---
title: "DAPseq primers"
author: "Anamaria Elek"
date: today
format: 
  html:
    code-fold: false
    code-tools: false
    embed-resources: true
    highlight-style: github
    toc: true 
    code-line-numbers: false 
execute:
  eval: false
  message: false
  warning: false
---

```{r}
#| label: initialize
#| echo: FALSE
knitr::opts_chunk$set(echo = TRUE, fig.width=7, fig.height=5) 
```

```{r}
#| label: load_libraries
#| warning: FALSE
#| message: FALSE
library(data.table)
library(stringr)
library(Biostrings)
library(GenomicRanges)
library(BSgenome.jaNemVect1.1.DToL.Assembly)
```

Primers matching to the genome

```{r}
# load primers
ps <- readDNAStringSet("annotation/DAPseq-primers-3.fasta")
gs <- unique(str_remove(names(ps), ":(rev|fwd)\\d+"))
  
# load genome
require(BSgenome.jaNemVect1.1.DToL.Assembly)

# load gene annotations
ga <- rtracklayer::import("genome/Nvec_v4_merged_annotation_sort.gtf.gz")
ga <- ga[ga$type == "transcript", ]

# match sequences to the reference genome
gr <- lapply(gs, function(g) {
  
  message(sprintf("%s (%d / %d)", g, which(gs == g), length(gs)))
  
  # get chromosome on which the gene is
  chr <- as.character(seqnames(ga[ga$transcript_id == g, ]))
  
  # get primers of the gene
  prs <- ps[grep(g, names(ps))]
  
  # get fwd primer
  prf <- unlist(prs[grepl("fwd", names(prs))])
  
  # get rev primer
  prr <- unlist(prs[grepl("rev", names(prs))])
  
  # match fwd primer
  mrf <- vmatchPattern(prf, Nvectensis)
  if (length(mrf) == 0) {
    mrf <- vmatchPattern(reverseComplement(prf), Nvectensis)
  }
  mrf <- mrf[seqnames(mrf) == chr]
  if (length(mrf) > 0) {
    mrf$primer <- "fwd"
    mrf$gene <- g
  } else {
    message(sprintf("No match for %s fwd primer", g))
  }
  
  # match rev primer
  mrr <- vmatchPattern(prr, Nvectensis)
  if (length(mrr) == 0) {
    mrr <- vmatchPattern(reverseComplement(prr), Nvectensis)
  }
  mrr <- mrr[seqnames(mrr) == chr]
  if (length(mrr) > 0) {
    mrr$primer <- "rev"
    mrr$gene <- g
  } else {
    message(sprintf("No match for %s rev primer", g))
  }
  
  # return
  pgr <- c(mrf, mrr)
  pgr
  
})

# transform to single GRanges object
gr <- do.call("c", gr)
gr

# data table
dt <- as.data.table(gr)
dt[, gene := paste(gene, primer, sep = "_")]
dt[, score := "."]
stopifnot(nrow(dt[,.N,gene][N>1]) == 0)

# save bed
fwrite(
  dt[, .(seqnames, start, end, gene, score, strand)],
  "annotation/DAPseq-primers-match-genome.bed",
  sep = "\t",
  col.names = FALSE
)
```

Primers matching to the transcriptome

```{r}
# load primers
ps <- readDNAStringSet("annotation/DAPseq-primers-4.fasta")
gs <- unique(str_remove(names(ps), ":(rev|fwd)\\d+"))
  
# load genome
require(BSgenome.jaNemVect1.1.DToL.Assembly)

# load gene annotations
gn <- rtracklayer::import("genome/Nvec_v4_merged_annotation_sort.gtf.gz")
ga <- gn[gn$type == "exon", ]
gb <- gn[gn$type == "CDS", ]

# match sequences to the reference genome
dt <- rbindlist(lapply(gs, function(g) {
  
  message(sprintf("%s (%d / %d)", g, which(gs == g), length(gs)))
  
  # get chromosome on which the gene is
  chr <- as.character(seqnames(ga[ga$transcript_id == g, ]))[1]
  
  # get transcript of the gene
  ggr <- ga[ga$transcript_id == g, ]
  ggs <- gb[gb$transcript_id == g, ]
  
  # get sequence of the transcript
  gseq <- unlist(getSeq(Nvectensis, ggr))
  
  # get coordinates of the exons
  gcoord_dt <- rbindlist(lapply(seq_along(ggr), function(i) {
    data.table(genomic_coord = seq(from = start(ggr)[i], to = end(ggr)[i]))
  }))
  gcoord_dt[, view_coord := .I]

  # get primers of the gene
  prs <- ps[grep(g, names(ps))]
  
  # get fwd primer
  prf <- unlist(prs[grepl("fwd", names(prs))])
  
  # get rev primer
  prr <- unlist(prs[grepl("rev", names(prs))])
  
  # match fwd primer
  mrf <- matchPattern(prf, gseq)
  if (length(mrf) == 0) {
    mrf <- matchPattern(reverseComplement(prf), gseq)
  }
  if (length(mrf) > 0) {
    # match back to original coordinates
    gcoord_fw <- gcoord_dt[which(gcoord_dt$view_coord == start(mrf)) : which(gcoord_dt$view_coord == end(mrf))]
    # get primer "exons"
    exo_fw <- gcoord_fw[, .(start = min(genomic_coord), end = max(genomic_coord)), by = rleid(genomic_coord - view_coord)]
    exo_fw[, seqnames := chr][, type := "exon"][, rleid := NULL]
    # get primer "transcript"
    tra_fw <- data.table(seqnames = chr, start = gcoord_fw[1]$genomic_coord, end = gcoord_fw[.N]$genomic_coord, type = "transcript")
    gtf_fw <- rbindlist(list(tra_fw, exo_fw), use.names = TRUE)
    gtf_fw$gene <- paste(g, "fwd", sep = "__")
  } else {
    message(sprintf("No match for %s fwd primer", g))
  }
  
  # match rev primer
  mrr <- matchPattern(prr, gseq)
  if (length(mrr) == 0) {
    mrr <- matchPattern(reverseComplement(prr), gseq)
  }
  if (length(mrr) > 0) {
    # match back to original coordinates
    gcoord_rv <- gcoord_dt[which(gcoord_dt$view_coord == start(mrr)) : which(gcoord_dt$view_coord == end(mrr))]
    # get primer "exons"
    exo_rv <- gcoord_rv[, .(start = min(genomic_coord), end = max(genomic_coord)), by = rleid(genomic_coord - view_coord)]
    exo_rv[, seqnames := chr][, type := "exon"][, rleid := NULL]
    # get primer "transcript"
    tra_rv <- data.table(seqnames = chr, start = gcoord_rv[1]$genomic_coord, end = gcoord_rv[.N]$genomic_coord, type = "transcript")
    gtf_rv <- rbindlist(list(tra_fw, exo_fw), use.names = TRUE)
    gtf_rv$gene <- paste(g, "rev", sep = "__")
  } else {
    message(sprintf("No match for %s rev primer", g))
  }
  
  # return
  rbindlist(list(gtf_fw, gtf_rv))
  
}))

# transform to single GRanges object
gr <- makeGRangesFromDataFrame(dt, keep.extra.columns = TRUE)

# save gtf
rtracklayer::export.gff3(gr, "annotation/DAPseq-primers-match-transciptome.gtf")
```


```{r}
hamming <- function(x, y) {
  sum(as.character(x) != as.character(y))
}

# match sequences to the reference genome WITH MISMATCHES
min_mismatch <- 1
max_mismatch <- 5
gr <- lapply(gs, function(g) {
  
  message(sprintf("%s (%d / %d)", g, which(gs == g), length(gs)))
  
  # get chromosome on which the gene is
  ggr <- ga[ga$transcript_id == g, ]
  tss <- ifelse(strand(ggr) == "+", start(ggr), end(ggr))
  tes <- ifelse(strand(ggr) == "+", end(ggr), start(ggr))
  chr <- as.character(seqnames(ggr))
  
  # get primers of the gene
  prs <- ps[grep(g, names(ps))]
  
  # get fwd primer
  prf <- unlist(prs[grepl("fwd", names(prs))])
  
  # get rev primer
  prr <- unlist(prs[grepl("rev", names(prs))])
  
  # match fwd primer
  mrf <- vmatchPattern(prf, Nvectensis, min.mismatch = min_mismatch, max.mismatch = max_mismatch)
  mrf <- mrf[seqnames(mrf) == chr]
  if (length(mrf) > 0) {
    mrf$primer <- "fwd"
    # count number of mismatches to respective primer
    mmf <- getSeq(Nvectensis, mrf)
    mrf$hamming_distance <- sapply(mmf, hamming, prf)
  }
  
  # match rev primer
  mrr <- vmatchPattern(prr, Nvectensis, min.mismatch = min_mismatch, max.mismatch = max_mismatch)
  mrr <- mrr[seqnames(mrr) == chr]
  if (length(mrr) > 0) {
    mrr$primer <- "rev"
    # count number of mismatches to respective primer
    mmr <- getSeq(Nvectensis, mrr)
    mrr$hamming_distance <- sapply(mmr, hamming, prr)
  }
  
  # return
  pgr <- c(mrf, mrr)
  if (length(pgr) > 0) {
    pgr$gene <- g
    # count distance to respective gene
    pgr$dist_to_tss <- pmin(abs(start(pgr) - tss), abs(end(pgr) - tss))
    pgr$dist_to_tes <- pmin(abs(start(pgr) - tss), abs(end(pgr) - tss))
  }
  pgr
  
})

# transform to single GRanges object
gr <- do.call("c", gr)
gr

# data table
dt <- as.data.table(gr)
dt <- dt[dist_to_tss < 3000 | dist_to_tes < 3000]
dt[, gene := paste(gene, primer, sep = "_")]

# save bed
fwrite(
  dt[, .(seqnames, start, end, gene, hamming_distance, strand, dist_to_tss, dist_to_tes)],
  "annotation/DAPseq-primers-mismatches.tsv",
  sep = "\t",
  col.names = TRUE
)

```


### For DAPseq candidates

```{r}
# developmental expression data
dev_dir <- "/home/anamaria/cluster/aelek/proj/scRNAseq_nvec_technau/"
rpm_dt <- readRDS(file.path(dev_dir, "pseudobulk_rpm.rds"))

# append adult to adukt tissues
tiss <- c("phbw", "bodywall", "mesentery", "pharynx", "tentacle", "mesf")
rpm_dt[mat %in% tiss, mat := paste0("adult_", mat)]

# aggregate per broad stages
rpm_dt[, stage := str_extract(mat, "gastrula|planula|polyp|adult")]

# TFs we want to use
tfs <- readLines(file.path(dev_dir, "dapseq_candidates.txt"))
dts <- rpm_dt[gene %in% tfs]

# order and select top expressed
dts[, mat := factor(mat, levels = unique(dts$mat))]
dts[, stage := factor(stage, levels = c("gastrula", "planula", "polyp", "adult"))]
setorder(dts, stage, gene, mat, -rpm)
setcolorder(dts, c("gene", "rpm", "stage", "mat", "cell_type"))

# matrices to save
dts_per_stage <- dts[, .SD[1], .(gene, stage)]
setcolorder(dts_per_stage, c("gene", "rpm", "stage", "mat", "cell_type"))
dts_per_stime <- dts[, .SD[1], .(gene, stage, mat)]
setcolorder(dts_per_stime, c("gene", "rpm", "stage", "mat", "cell_type"))

# save excel file
library(openxlsx)
wb <- createWorkbook()

addWorksheet(wb, "rpm_per_stage")
writeData(wb, "rpm_per_stage", dts_per_stage)

addWorksheet(wb, "rpm_per_stage_time")
writeData(wb, "rpm_per_stage_time", dts_per_stime)


addWorksheet(wb, "rpm_all")
writeData(wb, "rpm_all", dts)

saveWorkbook(wb, file.path("annotation", "DAPseq-candidates-rpm-per-stage.xlsx"))
```
