---
title: "Joint adult and gastrula set of peaks"
author: "Anamaria Elek"
date: today
format: 
  html:
    code-fold: false
    code-tools: false
    embed-resources: true
    highlight-style: github
    toc: true 
    code-line-numbers: false 
execute:
  eval: false
  message: false
  warning: false
---

```{r}
#| label: initialize
#| echo: FALSE
knitr::opts_chunk$set(echo = TRUE, fig.width=7, fig.height=5) 
```

In this notebook, we map peaks between adult and gastrula scATAC datasets.  

## Setup

Load packages and functions.

```{r}
#| label: setup

# load in-house functions
source("metacell_downstream_functions/Downstream_functions.R")
source("metacell_downstream_functions/utils.R")
source("motif-analysis/mta_downstream_functions.R")
source("scatac_helper_functions.R")

# global settings
options(stringsAsFactors = FALSE)

# load packages
library(BSgenome.jaNemVect1.1.DToL.Assembly)
library(GenomicRanges)
library(data.table)
library(tidyr)
library(stringr)
library(ggplot2)
library(patchwork)
library(ggrepel)
library(ggside)
library(grid)
library(ArchR)
library(Seurat)
library(metacell)

# set ggplot2 theme
theme_blank <- theme_minimal() + theme(
  axis.title.x = element_blank(),
  axis.title.y = element_blank(),
  panel.border = element_blank(),
  panel.grid=element_blank(),
  axis.ticks = element_blank(),
  text = element_text(size=20)
)
theme_py <- theme_light() + theme(
  #panel.grid.major = element_blank(),
  #panel.grid.minor = element_blank(),
  panel.border = element_rect(colour = "black", fill = NA),
  text = element_text(size=20),
  strip.placement = "outside", 
  strip.text = element_text(size=20, color="black"),
  strip.background = element_rect(fill="white")
)
theme_set(theme_py)
```

Define directories to save the results to.

```{r}
#| label: dirs

# define directories
adult_dir <- "ArchRProj_Nvec_TSS4_frag200"
gastr_dir <- "ArchRProj_Nvec_gastrula"
ann_dir <- "annotation"
pks_dir <- "Results/Peaks"
dir.create(pks_dir, showWarnings = FALSE)
fig_dir <- "Plots/Peaks"
dir.create(fig_dir, showWarnings = FALSE)
```


Project-specific variables:

```{r}
ct_cols <- c(
  "cnidocyte"                  = "#ff42ff",
  "cnidocyte_gastrula"         = "#f7abf7",
  "ecto_pharynx"               = "#5bc0e8",
  "ectoderm"                   = "#51a0be",
  "ecto_aboral"                = "#045170",
  "EMS"                        = "#bdf5bd",
  "EMS_ecto_boundary"          = "#93dbce",
  "gastro_circular_muscle_1"   = "#85c90e",
  "gastro_circular_muscle_2"   = "#73b009",
  "gastro_parietal_muscle"     = "#8ceb10",
  "gastro_IRF1_2"              = "#c1eb05",
  "gastro_somatic_gonad"       = "#bde314",
  "muscle_tentacle_retractor"  = "#ffd700",
  "muscle_mesentery_retractor" = "#f0e229",
  "digestive_filaments_1"      = "#e33d3d",
  "digestive_filaments_2"      = "#d10606",
  "digestive_filaments_3"      = "#ad0303",
  "epidermis_1"                = "#04ccd4",
  "epidermis_2"                = "#16bacc",
  "precursors_PGC"             = "#bebebe",
  "precursors_endoNPC"         = "#8a8686",
  "precursors_NPC"             = "#636363",
  "NPC_1"                      = "#808d91",
  "NPC_2"                      = "#758d92",
  "neuron_GATA_Islet_1"        = "#0c82f7",
  "neuron_GATA_Islet_2"        = "#1175f0",
  "neuron_Pou4_FoxL2_1"        = "#101cde",
  "neuron_Pou4_FoxL2_2"        = "#0b16bf",
  "neuron_Pou4_FoxL2_3"        = "#2e39dd",
  "neuronal_gastrula"          = "#063cb9",
  "gland"                      = "#ff6f08",
  "gland_mucin"                = "#ff8f12"
)
cell_types <- names(ct_cols)
adult_cell_types <- c(
  "cnidocyte",
  "gastro_circular_muscle_1", 
  "gastro_circular_muscle_2",
  "gastro_parietal_muscle",
  "gastro_IRF1_2",
  "gastro_somatic_gonad",
  "muscle_mesentery_retractor",
  "muscle_tentacle_retractor",
  "digestive_filaments_1",
  "digestive_filaments_2",
  "digestive_filaments_3",
  "epidermis_1",
  "epidermis_2",
  "precursors_PGC",
  "precursors_endoNPC",
  "precursors_NPC",
  "neuron_GATA_Islet_1",
  "neuron_GATA_Islet_2",
  "neuron_Pou4_FoxL2_1",
  "neuron_Pou4_FoxL2_2",
  "neuron_Pou4_FoxL2_3",
  "gland"
)
gastr_cell_types <- c(setdiff(cell_types, adult_cell_types))
bct_cols <- toupper(c(
  "cnidocyte"                 = "#FF42FF",
  "ecto"                      = "#51a0be",
  "EMS"                       = "#bdf5bd",
  "gastro_circular_muscle"    = "#73b009",
  "gastro_parietal_muscle"    = "#8ceb10",
  "gastro"                    = "#85c90e",  
  "muscle"                    = "#FFD700",
  "digestive_filaments"       = "#e33d3d",
  "precursors"                = "#BEBEBE",
  "NPC"                       = "#808d91",
  "epidermis"                 = "#04ccd4",
  "neuron_GATA_Islet"         = "#1175f0",
  "neuron_Pou4_FoxL2"         = "#101cde",
  "neuronal"                  = "#063cb9",
  "gland"                     = "#ff6f08"
))
broad_cell_types <- names(bct_cols)
bct_maps <- setDT(cbind.data.frame(
  cell_type = cell_types,
  broad_cell_type = str_extract(cell_types, paste(names(bct_cols), collapse = "|"))
))
```

```{r}
#| label: fix_peaks_files
#| ehco: FALSE
#| eval: FALSE
#| include: FALSE

for (ct in adult_cell_types) {
  message(ct)
  all_pks <- fread(file.path(adult_dir, "ArchRProj", "PeakDifferential", "cell_type", sprintf("Peaks-%s-vs-others.tsv", ct)))
  flt_pks <- fread(file.path(adult_dir, "ArchRProj", "PeakDifferential", "cell_type_filtered", sprintf("Peaks-%s-vs-others.tsv", ct)))
  if ("gene" %in% colnames(all_pks)) {
    all_pks[, gene := NULL]
  }
  setnames(flt_pks,colnames(all_pks)[1:6])
  fln_pks <- merge.data.table(
    all_pks, flt_pks, by = colnames(all_pks)[1:6], 
    all.x = FALSE, sort = FALSE
  )
  if (!all(flt_pks$peak %in% fln_pks$peak)) {
    break(sprintf("Error: not all peaks are present in the filtered set for %s", ct))
  }
  if (any(duplicated(fln_pks$peak))) {
    break(sprintf("Error: duplicated peaks in the filtered set for %s", ct))
  }
  fwrite(
    fln_pks,
    file.path(adult_dir, "ArchRProj", "PeakDifferential", "cell_type_filtered", sprintf("Peaks-%s-vs-others.tsv", ct)),
    sep = "\t"
  )
}
```

## Mapping peaks

Mapping between gastrula and adult peaks

```{r}
# load peaks
gastr_peaks <- fread(
    file.path(gastr_dir, "ArchRProj", "Peaks", "Peaks-consensus-cell_type.bed")
)
adult_peaks <- fread(
    file.path(adult_dir, "ArchRProj", "Peaks", "Peaks-consensus-cell_type.bed")
)
bed_cols <- c("seqnames", "start", "end", "peak", "score", "strand")
setnames(gastr_peaks, bed_cols)
setnames(adult_peaks, bed_cols)
gastr_peaks_gr <- makeGRangesFromDataFrame(
    gastr_peaks, keep.extra.columns = TRUE
)
adult_peaks_gr <- makeGRangesFromDataFrame(
    adult_peaks, keep.extra.columns = TRUE
)

# overlaps between two sets of peaks
ovl <- findOverlaps(
    query = gastr_peaks_gr, subject = adult_peaks_gr,
    minoverlap = 50
)
adult_peaks[, ovl := FALSE]
adult_ovl <- adult_peaks_gr[unique(subjectHits(ovl))]$peak
adult_peaks[peak %in% adult_ovl, ovl := TRUE]

gastr_peaks[, ovl := FALSE]
gastr_ovl <- gastr_peaks_gr[unique(queryHits(ovl))]$peak
gastr_peaks[peak %in% gastr_ovl, ovl := TRUE]

gastr_peaks[, .N, ovl][, perc := N / sum(N)][]
#     ovl     N     perc
#1: FALSE 44020 0.501127
#2:  TRUE 43822 0.498873

adult_peaks[, .N, ovl][, perc := N / sum(N)][]
#     ovl     N     perc
#1:  TRUE 44331 0.640464
#2: FALSE 24886 0.359536

# overlapping peaks
ovl_pks <- adult_peaks_gr[subjectHits(ovl)]
ovl_pks$peak_adult <- ovl_pks$peak
ovl_pks$peak_gastrula <- gastr_peaks_gr[queryHits(ovl)]$peak

# adult only peaks
onl_adult <- adult_peaks_gr[
    setdiff(seq_along(adult_peaks_gr), unique(subjectHits(ovl)))
]
onl_adult$peak_adult <- onl_adult$peak

# gastrula only peaks
onl_gastr <- gastr_peaks_gr[
    setdiff(seq_along(gastr_peaks_gr), unique(queryHits(ovl)))
]
onl_gastr$peak_gastrula <- onl_gastr$peak

# combine
pks_all <- c(ovl_pks, onl_adult, onl_gastr)
seqlevels(pks_all) <- as.character(unique(seqnames(adult_peaks_gr)))
pks_all <- sort(pks_all)
pks_dt <- as.data.table(pks_all)
pks_dt[is.na(pks_dt)] <- ""
pks_dt[, id := paste(seqnames, start, end, sep = "_")]
pks_dt[, id := factor(id, levels = unique(pks_dt$id))]
pks_dt[, peak := paste0("peak", as.integer(id))]

# save
fwrite(
    pks_dt,
    file.path(pks_dir, "Peaks_cell_type_mapped.tsv"),
    sep = "\t"
)
```

Combine metadata

```{r}
# annotation
meta_gastr <- as.data.table(
    proj_gastr@cellColData, keep.rownames = "cell"
)[, .(cell, nFrags, FRIP, TSSEnrichment, SEACell, cell_type, color)]
meta_adult <- as.data.table(
    proj_adult@cellColData, keep.rownames = "cell"
)[, .(cell, nFrags, FRIP, TSSEnrichment, SEACell, cell_type, cell_type_color)]
setnames(meta_adult, "cell_type_color", "color")
meta_all <- rbindlist(list(
    "adult" = meta_adult, "gastrula" =  meta_gastr
), idcol = "stage")
meta_all[, cell_type := str_replace_all(cell_type, "\\.", "_")]
meta_all[, color := ct_cols[as.character(cell_type)]]
meta_all[, cell_type := factor(cell_type, levels = names(ct_cols))]
setorder(meta_all, cell_type)
fwrite(meta_all, file.path(
    data_dir,
    "Annotation_Adult_Gastrula_SEACell.tsv"
), sep = "\t")

meta_all[, cell_type := factor(
    cell_type, levels = sort(unique(meta_all$cell_type))
)]
setorder(meta_all, cell_type)
meta_melt <- melt.data.table(
    meta_all,
    id.vars = c("stage", "SEACell", "cell_type"),
    measure.vars = c("nFrags", "TSSEnrichment", "FRIP")
)
meta_melt[, cell_type := factor(
    cell_type, levels = sort(unique(meta_melt$cell_type))
)]
setorder(meta_melt, cell_type)
meta_melt[, SEACell := factor(
    SEACell, levels = unique(meta_melt$SEACell)
)]
setorder(meta_melt, SEACell)
gp_qc_gastr <- ggplot(
      meta_melt[stage == "gastrula"],
      aes(SEACell, value, fill = cell_type)
    ) +
    geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), width = 1.4) +
    facet_grid(variable ~ ., scales = "free_y", switch = "both") +
    scale_fill_manual(values = ct_cols) +
    theme(
        legend.position = "bottom",
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
        axis.ticks.x = element_blank(),
        axis.title.x = element_blank()
    )
gp_qc_adult <- ggplot(
      meta_melt[stage == "adult"],
      aes(SEACell, value, fill = cell_type)
    ) +
    geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), width = 1.4) +
    facet_grid(variable ~ ., scales = "free_y", switch = "both") +
    scale_fill_manual(values = ct_cols) +
    theme(
        legend.position = "bottom",
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.x = element_text(
            angle = 90, vjust = 0.5, hjust = 1, size = 3
        ),
        axis.ticks.x = element_blank(),
        axis.title.x = element_blank()
    )

pdf(
    file.path(plot_dir, "meta_qc.pdf"),
    width = 45, height = 12
)
gp_qc_adult
gp_qc_gastr
dev.off()
```

Peak counts with unified set of peaks

```{r}
# peaks counts
gastr_counts <- readRDS(
    file.path(gastr_dir, "PeakMatrix", "Matrix-Peaks.rds")
)
adult_counts <- readRDS(
    file.path(adult_dir, "PeakMatrix", "Matrix-Peaks.rds")
)

# mapped peaks
pks_dt <- fread(file.path(adult_dir, "Peaks", "Peaks_cell_type_mapped.tsv"))

# metadata
meta_all <- fread(file.path(
    data_dir,
    "Annotation_Adult_Gastrula_SEACell.tsv"
))

# map gastrula counts
gastr_pks <- lapply(
    rownames(gastr_counts),
    function(p) pks_dt[peak_gastrula == p]$peak
)
gastr_pks_new <- unlist(gastr_pks)
gastr_pks_old <- rep(
    rownames(gastr_counts),
    times = sapply(gastr_pks, length)
)
gastr_counts_map <- gastr_counts[gastr_pks_old, ]
rownames(gastr_counts_map) <- gastr_pks_new

# map adult counts
adult_pks <- lapply(
    rownames(adult_counts),
    function(p) pks_dt[peak_adult == p]$peak
)
adult_pks_new <- unlist(adult_pks)
adult_pks_old <- rep(
    rownames(adult_counts),
    times = sapply(adult_pks, length)
)
adult_counts_map <- adult_counts[adult_pks_old, ]
rownames(adult_counts_map) <- adult_pks_new

# save files
saveRDS(
    gastr_counts_map,
    file.path(gastr_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds")
)
saveRDS(
    adult_counts_map,
    file.path(adult_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds")
)
```

Combine peaks

```{r}
# metadata
meta_all <- fread(file.path(
    data_dir,
    "Annotation_Adult_Gastrula_SEACell.tsv"
))

# counts
adult_counts <- readRDS(file.path(
    adult_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds"
))[, meta_all[stage == "adult"]$cell]
gastr_counts <- readRDS(file.path(
    gastr_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds"
))[, meta_all[stage == "gastrula"]$cell]

# combine
adult_miss_pks <- setdiff(rownames(gastr_counts), rownames(adult_counts))
adult_miss_mat <- matrix(0, nrow = length(adult_miss_pks), ncol = ncol(adult_counts), dimnames = list(adult_miss_pks, colnames(adult_counts)))
adult_miss_mat <- as(adult_miss_mat, "dgCMatrix")
adult_cont_mat <- rbind(adult_counts, adult_miss_mat)

gastr_miss_pks <- setdiff(rownames(adult_counts), rownames(gastr_counts))
gastr_miss_mat <- matrix(0, nrow = length(gastr_miss_pks), ncol = ncol(gastr_counts), dimnames = list(gastr_miss_pks, colnames(gastr_counts)))
gastr_miss_mat <- as(gastr_miss_mat, "dgCMatrix")
gastr_cont_mat <- rbind(gastr_counts, gastr_miss_mat)

all_pks <- sort(intersect(rownames(adult_cont_mat), rownames(gastr_cont_mat)))
uni_pks <- sort(unique(c(rownames(adult_cont_mat), rownames(gastr_cont_mat))))
all.equal(all_pks, uni_pks)
peaks_mat <- cbind(
    adult_cont_mat[all_pks, ],
    gastr_cont_mat[all_pks, ]
)

# save combined peaks matrix
saveRDS(peaks_mat, file.path(
    adult_dir, "PeakMatrix", "Matrix-Adult-Gastrula-Peaks-mapped.rds"
))

rm(adult_dt)
rm(gastr_dt)
rm(count_dt)
```

```{r}
# peaks counts
gastr_counts <- readRDS(
    file.path(gastr_dir, "PeakMatrix", "Matrix-Peaks.rds")
)
adult_counts <- readRDS(
    file.path(adult_dir, "PeakMatrix", "Matrix-Peaks.rds")
)

# mapped counts
adult_counts_map <- readRDS(file.path(
    adult_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds"
))
gastr_counts_map <- readRDS(file.path(
    gastr_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds"
))

# combined counts
peaks_mat <- readRDS(file.path(
    adult_dir, "PeakMatrix", "Matrix-Adult-Gastrula-Peaks-mapped.rds"
))

# plot counts for individual peak
pid <- "peak109"
pid_a <- pks_dt[peak == pid]$peak_adult
pid_g <- pks_dt[peak == pid]$peak_gastrula
pdt_a <- data.table(
    cell = colnames(adult_counts),
    count = adult_counts[match(pid_a, rownames(adult_counts)), ]
)
pdt_a <- merge.data.table(
    pdt_a, unique(meta_all[, .(cell, SEACell, cell_type, stage)]),
    by = "cell"
)
pdt_g <- data.table(
    cell = colnames(gastr_counts),
    count = gastr_counts[match(pid_g, rownames(gastr_counts)), ]
)
pdt_g <- merge.data.table(
    pdt_g, unique(meta_all[, .(cell, SEACell, cell_type, stage)]),
    by = "cell"
)
pdt_c <- rbindlist(list(pdt_a, pdt_g))
pdt_c[, cell_type := factor(cell_type, levels = names(ct_cols))]

gp_pc <- ggplot(pdt_c[count > 0], aes(cell_type, count)) +
    geom_boxplot(aes(color = cell_type), alpha = 0.5, outlier.color = NA) +
    geom_jitter(aes(fill = cell_type, shape = stage), width = 0.2, height = 0.1) +
    scale_color_manual(values = ct_cols) +
    scale_fill_manual(values = ct_cols) +
    scale_shape_manual(values = c("adult" = 21, "gastrula" = 24)) +
    theme(
        legend.position = "none",
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
        axis.ticks.x = element_blank(),
        axis.title.x = element_blank()
    ) +
    labs(title = sprintf("adult %s; gastrula %s", pid_a, pid_g))


# plot mapped counts for individual peak
pdt_a <- data.table(
    cell = colnames(adult_counts_map),
    count = adult_counts_map[match(pid, rownames(adult_counts_map)), ]
)
pdt_a <- merge.data.table(
    pdt_a, unique(meta_all[, .(cell, SEACell, cell_type, stage)]),
    by = "cell"
)
pdt_g <- data.table(
    cell = colnames(gastr_counts_map),
    count = gastr_counts_map[match(pid, rownames(gastr_counts_map)), ]
)
pdt_g <- merge.data.table(
    pdt_g, unique(meta_all[, .(cell, SEACell, cell_type, stage)]),
    by = "cell"
)
pdt_c <- rbindlist(list(pdt_a, pdt_g))
pdt_c[, cell_type := factor(cell_type, levels = names(ct_cols))]

gp_pc_m <- ggplot(pdt_c[count > 0], aes(cell_type, count)) +
    geom_boxplot(aes(color = cell_type), alpha = 0.5, outlier.color = NA) +
    geom_jitter(aes(fill = cell_type, shape = stage), width = 0.2, height = 0.1) +
    scale_color_manual(values = ct_cols) +
    scale_fill_manual(values = ct_cols) +
    scale_shape_manual(values = c("adult" = 21, "gastrula" = 24)) +
    theme(
        legend.position = "none",
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
        axis.ticks.x = element_blank(),
        axis.title.x = element_blank()
    ) +
    labs(title = sprintf("%s", pid))
    

# plot combined counts for individual peak
pdt_m <- data.table(
    cell = colnames(peaks_mat),
    count = peaks_mat[match(pid, rownames(peaks_mat)), ]
)
pdt_m <- merge.data.table(
    pdt_m, unique(meta_all[, .(cell, SEACell, cell_type, stage)]),
    by = "cell"
)
pdt_m[, cell_type := factor(cell_type, levels = names(ct_cols))]

gp_pm <- ggplot(pdt_m[count > 0], aes(cell_type, count)) +
    geom_boxplot(aes(color = cell_type), alpha = 0.5, outlier.color = NA) +
    geom_jitter(aes(fill = cell_type, shape = stage), width = 0.2, height = 0.1) +
    scale_color_manual(values = ct_cols) +
    scale_fill_manual(values = ct_cols) +
    scale_shape_manual(values = c("adult" = 21, "gastrula" = 24)) +
    theme(
        legend.position = "none",
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
        axis.ticks.x = element_blank(),
        axis.title.x = element_blank()
    ) +
    labs(title = sprintf("%s", pid))

# save plot
pdf(
    file.path(plot_dir, sprintf("cell_counts_%s.pdf", pid)),
    width = 8, height = 5
)
gp_pc
gp_pc_m
gp_pm
dev.off()

```

Inspect coverage correlation 

```{r}
peaks_mat <- readRDS(file.path(
    adult_dir, "PeakMatrix", "Matrix-Adult-Gastrula-Peaks-mapped.rds"
))
idx <- sapply(colnames(peaks_mat), function(cb) {
    if (cb %in% rownames(proj_adult@cellColData)) {
        "adult"
    } else if (cb %in% rownames(proj_gastr@cellColData)) {
        "gastrula"
    }
})
idx <- unlist(idx)
cov_list <- tapply(names(idx), idx, function(x) {
    data.table(
        peak = rownames(peaks_mat),
        count = Matrix::rowMeans(peaks_mat[, x])
    )
})
names(cov_list) <- unique(idx)
cov_dt <- rbindlist(cov_list, idcol = "dataset")
cov_dt <- cov_dt[, count := mean(count), .(peak, dataset)]
cov_dt <- unique(cov_dt)
cov_dc <- dcast.data.table(cov_dt, peak ~ dataset, value.var = "count")
gp_cov <- ggplot(cov_dc, aes(adult, gastrula)) +
    geom_point(alpha = 0.2) +
    geom_abline() +
    coord_fixed() +
    scale_x_continuous(trans = "log10", breaks = c(0, 0.001, 0.01, 0.1, 1)) +
    scale_y_continuous(trans = "log10", breaks = c(0, 0.001, 0.01, 0.1, 1))
ggsave(
    file.path(plot_dir, "peaks_mean_counts_correlation.pdf"),
    width = 6, height = 6
)
```

Quantile normalize peaks matrix

```{r}
require(preprocessCore)
peaks_mat <- readRDS(file.path(
    adult_dir, "PeakMatrix", "Matrix-Adult-Gastrula-Peaks-mapped.rds"
))
peaks_norm_mat <- normalize.quantiles(as.matrix(peaks_mat))
peaks_norm_mat <- as(peaks_norm_mat, "dgCMatrix")
rownames(peaks_norm_mat) <- rownames(peaks_mat)
colnames(peaks_norm_mat) <- colnames(peaks_mat)
saveRDS(peaks_norm_mat, file.path(
    adult_dir, "PeakMatrix",
    "Matrix-Adult-Gastrula-Peaks-mapped-qnormalized.rds"
))
```

Inspect coverage correlation after normalization

```{r}
peaks_norm_mat <- readRDS(file.path(
    adult_dir, "PeakMatrix",
    "Matrix-Adult-Gastrula-Peaks-mapped-qnormalized.rds"
))
idx <- sapply(colnames(peaks_norm_mat), function(cb) {
    if (cb %in% rownames(proj_adult@cellColData)) {
        "adult"
    } else if (cb %in% rownames(proj_gastr@cellColData)) {
        "gastrula"
    }
})
idx <- unlist(idx)
cov_list <- tapply(names(idx), idx, function(x) {
    data.table(
        peak = rownames(peaks_norm_mat),
        count = Matrix::rowMeans(peaks_norm_mat[, x])
    )
})
names(cov_list) <- unique(idx)
cov_dt <- rbindlist(cov_list, idcol = "dataset")
cov_dt <- cov_dt[, count := mean(count), .(peak, dataset)]
cov_dt <- unique(cov_dt)
cov_dc <- dcast.data.table(cov_dt, peak ~ dataset, value.var = "count")
gp_cov <- ggplot(cov_dc, aes(adult, gastrula)) +
    geom_point(alpha = 0.2) +
    geom_abline() +
    coord_fixed() +
    scale_x_continuous(
        trans = "log10",
        breaks = c(0.0001, 0.001, 0.01, 0.1, 1)
    ) +
    scale_y_continuous(
        trans = "log10",
        breaks = c(0.0001, 0.001, 0.01, 0.1, 1)
    )
ggsave(
    file.path(plot_dir, "peaks_mean_counts_qnormalized_correlation.pdf"),
    width = 6, height = 6
)
```

Aggregate per SEACell

```{r}
# peaks counts
peaks_mat <- readRDS(file.path(
    adult_dir, "PeakMatrix", "Matrix-Adult-Gastrula-Peaks-mapped.rds"
))
peaks_norm_mat <- readRDS(file.path(
    adult_dir, "PeakMatrix",
    "Matrix-Adult-Gastrula-Peaks-mapped-qnormalized.rds"
))

# metadata
meta_all <- fread(file.path(
    data_dir,
    "Annotation_Adult_Gastrula_SEACell.tsv"
))

# aggregate
clusters_vector <- structure(meta_all$SEACell, names = meta_all$cell)
clusters_vector <- clusters_vector[colnames(peaks_norm_mat)]
fp_clusters <- accessibility_footprint(peaks_norm_mat, clusters_vector)
saveRDS(
    fp_clusters,
    file.path(
        data_dir,
        "Footprint_Adult_Gastrula_Peaks_SEACell_qnorm.rds"
    )
)

# sum
sum_clusters <- accessibility_summary(peaks_norm_mat, clusters_vector)
sum_clusters <- unique(sum_clusters)
saveRDS(
    sum_clusters,
    file.path(
        data_dir,
        "Sum_Adult_Gastrula_Peaks_SEACell_qnorm.rds"
    )
)


# adult peak counts
adult_counts <- readRDS(file.path(
    adult_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds"
))[, meta_all[stage == "adult"]$cell]
clusters_vector <- structure(meta_all$SEACell, names = meta_all$cell)
clusters_vector <- clusters_vector[colnames(adult_counts)]
fp_clusters <- accessibility_footprint(adult_counts, clusters_vector)
saveRDS(
    fp_clusters,
    file.path(
        data_dir,
        "Footprint_Adult_Peaks_SEACell.rds"
    )
)

# gastrula peak counts
gastr_counts <- readRDS(file.path(
    gastr_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds"
))[, meta_all[stage == "gastrula"]$cell]
clusters_vector <- structure(meta_all$SEACell, names = meta_all$cell)
clusters_vector <- clusters_vector[colnames(gastr_counts)]
fp_clusters <- accessibility_footprint(gastr_counts, clusters_vector)
saveRDS(
    fp_clusters,
    file.path(
        data_dir,
        "Footprint_Gastrula_Peaks_SEACell.rds"
    )
)

```

Aggregate per cell type

```{r}
# peaks counts
peaks_mat <- readRDS(file.path(
    adult_dir, "PeakMatrix", "Matrix-Adult-Gastrula-Peaks-mapped.rds"
))
peaks_norm_mat <- readRDS(file.path(
    adult_dir, "PeakMatrix",
    "Matrix-Adult-Gastrula-Peaks-mapped-qnormalized.rds"
))

# metadata
meta_all <- fread(file.path(
    data_dir,
    "Annotation_Adult_Gastrula_SEACell.tsv"
))

# aggregate
clusters_vector <- structure(
    paste(meta_all$stage, meta_all$cell_type, sep = "__"),
    names = meta_all$cell
)
clusters_vector <- clusters_vector[colnames(peaks_norm_mat)]
fp_clusters <- accessibility_footprint(peaks_norm_mat, clusters_vector)
saveRDS(
    fp_clusters,
    file.path(
        data_dir,
        "Footprint_Adult_Gastrula_Peaks_cell_type_qnorm.rds"
    )
)

sum_clusters <- accessibility_summary(peaks_norm_mat, clusters_vector)
sum_clusters <- unique(sum_clusters)
saveRDS(
    sum_clusters,
    file.path(
        data_dir,
        "Sum_Adult_Gastrula_Peaks_cell_type_qnorm.rds"
    )
)


# adult peak counts
adult_counts <- readRDS(file.path(
    adult_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds"
))[, meta_all[stage == "adult"]$cell]
clusters_vector <- structure(
    meta_all$cell_type,
    names = meta_all$cell
)
clusters_vector <- clusters_vector[colnames(adult_counts)]
fp_clusters <- accessibility_footprint(adult_counts, clusters_vector)
saveRDS(
    fp_clusters,
    file.path(
        data_dir,
        "Footprint_Adult_Peaks_cell_type.rds"
    )
)

# gastrula peak counts
gastr_counts <- readRDS(file.path(
    gastr_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds"
))[, meta_all[stage == "gastrula"]$cell]
clusters_vector <- structure(
    meta_all$cell_type,
    names = meta_all$cell
)
clusters_vector <- clusters_vector[colnames(gastr_counts)]
fp_clusters <- accessibility_footprint(gastr_counts, clusters_vector)
saveRDS(
    fp_clusters,
    file.path(
        data_dir,
        "Footprint_Gastrula_Peaks_cell_type.rds"
    )
)
```

## Promoters classification

```{r}
# load mapped peaks
pks_fn <- file.path(pks_dir, "Peaks_cell_type_mapped.tsv")
pks_mp <- fread(pks_fn)

# load promoters classification
pks_cl <- sapply(c("adult", "gastrula"), function(stg) {
  stg_dir <- switch(stg, adult = adult_dir, gastrula = gastr_dir)
  fn <- file.path(stg_dir, "ArchRProj", "Promoters", "annotation_peaks.tsv")
  dt <- fread(fn)
  setnames(dt, "peak", paste0("peak_", stg))
  merge.data.table(
    dt, pks_mp, by = paste0("peak_", stg), all.x = TRUE, sort = FALSE
  )
}, simplify = FALSE, USE.NAMES = TRUE)
pks_dt <- rbindlist(pks_cl, idcol = "stage", use.names = TRUE)

# order columns
setcolorder(pks_dt, c(
  "seqnames", "start", "end", "width", "strand", "score",
  "peak", "peak_adult", "peak_gastrula", "gene", "promoter", "cell_types", "stage", "id"
))
# split cell types in rows
pks_dt <- pks_dt[, .(cell_type = unlist(strsplit(cell_types, ","))), by = c("peak", "id", "stage", "gene", "promoter")]
# rename cell types
pks_dt[cell_type == "gastro_unknown", cell_type := "gastro"]
pks_dt[cell_type == "cnidocyte" & stage == "gastrula", cell_type := "cnidocyte_gastrula"]
pks_dt[cell_type == "gland" & stage == "gastrula", cell_type := "gland_mucin"]
pks_dt[, cell_type := str_replace_all(cell_type, "\\.", "_")]
cell_type_rename <- c(
  "cnidocyte_precursors" = "NPC_2",
  "^muscle_1" = "muscle_tentacle_retractor",
  "^muscle_2" = "muscle_mesentery_retractor",
  "adult_muscle_1" = "adult_muscle_tentacle_retractor",
  "adult_muscle_2" = "adult_muscle_mesentery_retractor",
  "gastro_unknown_1" = "gastro_IRF1_2",
  "gastro_unknown_2" = "gastro_somatic_gonad",
  "gland_mucous" = "gland",
  "ectoderm_embryonic_oral" = "ecto_pharynx",
  "ectoderm_embryonic$" = "ectoderm",
  "ectoderm_embryonic_aboral" = "ecto_aboral",
  "mesendoderm_embryonic" = "EMS",
  "mesendoderm_ectoderm" = "EMS_ecto_boundary",
  "neuron_GATA_Islet_3" = "neuron_Pou4_FoxL2_3",
  "NPC$" = "NPC_1",
  "precursors_1" = "precursors_PGC",
  "precursors_2" = "precursors_endoNPC",
  "precursors_3" = "precursors_NPC"
)
pks_dt[, cell_type := str_replace_all(cell_type, cell_type_rename)]
stopifnot(all(pks_dt$cell_type %in% c(cell_types, broad_cell_types)))

# load gene expression info
gen_fc <- readRDS(file.path("Results", "Metacells", "cell_type", "gene_expression_fc_genes_exp_FC2_acc_FC4_spearman.rds"))
gen_fc <- melt.data.table(
    as.data.table(gen_fc, keep.rownames = "gene"),
    id.vars = "gene",
    variable.name = "cell_type",
    value.name = "gene_expression_fc"
)
gen_umi <- readRDS(file.path("Results", "Metacells", "cell_type", "gene_expression_umifrac_genes_exp_FC2_acc_FC4_spearman.rds"))
gen_umi <- melt.data.table(
    as.data.table(gen_umi, keep.rownames = "gene"),
    id.vars = "gene",
    variable.name = "cell_type",
    value.name = "gene_expression_umifrac"
)
gen_fc <- merge.data.table(gen_fc, gen_umi, by = c("gene", "cell_type"))
gen_fc <- merge.data.table(gen_fc, bct_maps, by = "cell_type", all.x = TRUE)
gen_fc[!cell_type %in% pks_dt$cell_type, cell_type := broad_cell_type]
gen_fc[, broad_cell_type := NULL]
gen_fc[, gene_expression_fc := max(gene_expression_fc), .(gene, cell_type)]
gen_fc <- unique(gen_fc)
stopifnot(!any(pks_dt[,.N,cell_type][!cell_type %in% gen_fc$cell_type]$cell_type))

# tau index
tau_dt <- unique(gen_fc[, .(gene, cell_type, gene_expression_fc, gene_expression_umifrac)])
tau_dt[, n_cell_types := .N, gene]
tau_dt[, gene_tau_index := (sum(1 - gene_expression_umifrac/max(gene_expression_umifrac)) / (n_cell_types - 1)), gene]
tau_dt[, n_cell_types := NULL]

# add gene expression info to peaks table
pks_dt <- merge.data.table(pks_dt, tau_dt, by = c("gene", "cell_type"), all.x = TRUE)

# save
fwrite(pks_dt, file.path(pks_dir, "Peaks_cell_type_promoter_annotation.tsv"), sep = "\t")

```

## Peak types summary

```{r}
# load peaks data
pks_dt <- fread(file.path(pks_dir, "Peaks_cell_type_promoter_annotation.tsv"))
pks_dt <- unique(pks_dt[, .(peak, id, cell_type, stage, gene, gene_expression_fc, gene_tau_index, promoter)])

# load gene expression data
# gen_dt <- fread(file.path())

# get data for promoters peaks only
pro_cols <- c(
  "CP" = "#053061",
  "SP" = "#2166ac",
  "AP" = "#4393c3",
  "NO" = "#319854"
)
pro_dt <- pks_dt[promoter != "NO"]
pro_dt[, promoter := str_extract(promoter, "CP|SP|AP|NO")]
pro_dt[, promoter := factor(promoter, levels = names(pro_cols))]
setorder(pro_dt, gene, promoter)
pro_dt <- pro_dt[, .SD[1], .(gene, stage)]
setnames(pro_dt, "promoter", "gene_promoter")
```

### Number of peaks

Number of peaks per gene, where genes are groupped by the promoter type (CP vs SP).

```{r}
dt_gp <- merge.data.table(pks_dt, unique(pro_dt[, .(gene, gene_promoter, stage)]), by = c("gene", "stage"))
dt_gp <- unique(dt_gp[, .(gene, peak, promoter, gene_promoter)])
dt_gp[, gene_promoter := factor(gene_promoter, levels = names(pro_cols))]

# all peaks
dt_gp_all <- dt_gp[gene_promoter != "AP"]
dt_gp_all <- dt_gp_all[, .N, .(gene, gene_promoter)]
gp_pks_all <- ggplot(dt_gp_all, aes(
    x = N,
    fill = gene_promoter, color = gene_promoter
  )) +
  geom_histogram(bins = 20) +
  scale_fill_manual(values = pro_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +  
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 5)
  ) +
  scale_y_continuous(
    breaks = scales::pretty_breaks(n = 4)
  ) +
  facet_grid(gene_promoter ~ ., scales = "free_y") +
  theme(legend.position = "none") +
  labs(
    x = "peaks",
    y = "# genes"
  )

# non-promoter peaks
dt_gp_nop <- dt_gp[gene_promoter != "AP"][promoter == "NO"]
dt_gp_nop <- dt_gp_nop[, .N, .(gene, gene_promoter)]
gp_pks_nop <- ggplot(dt_gp_nop, aes(
    x = N,
    fill = gene_promoter, color = gene_promoter
  )) +
  geom_histogram(bins = 20) +
  scale_fill_manual(values = pro_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 5)
  ) +
  scale_y_continuous(
    breaks = scales::pretty_breaks(n = 4)
  ) +
  facet_grid(gene_promoter ~ ., scales = "free_y") +
  theme(legend.position = "none") +
  labs(
    x = "non-promoter\npeaks",
    y = "# genes"
  )

# save
gp_pks <- gp_pks_all + gp_pks_nop
ggsave(
    file.path(fig_dir, sprintf("num_pks_per_gene_promoter_type.pdf")),
    gp_pks, width = 7, height = 3.5
)
```

Number of peaks per gene for different functional gene classes.

```{r}
# gene lists
gl_fns <- list.files(
  ann_dir, pattern = ".*Nvec_genes.curated_DToL_names.tsv", full.names = TRUE
)
names(gl_fns) <- str_remove(basename(gl_fns), "\\.Nvec_genes.curated_DToL_names.tsv")
gl_dt <- rbindlist(sapply(names(gl_fns), function(x) {
  fread(gl_fns[x], header = TRUE)[, 1]
}, simplify = FALSE, USE.NAMES = TRUE), idcol = "genelist")
gl_dt <- unique(gl_dt[, .(genelist, gene)])
gl_dt <- gl_dt[!genelist %in% c("neu")]

# supplement with go
go_annotations <- readRDS(file.path(ann_dir, "Nvec_ensembl.GO.rds"))
go_map_dt <- data.table(
    gene = rep(names(go_annotations), sapply(go_annotations, length)),
    category = unlist(go_annotations)
)
selected_gos <- list(
  ion = c(
    "intracellular calcium ion homeostasis" = "GO:0055074",
    "monoatomic ion transport" = "GO:0006811",
    "bicarbonate transport" = "GO:0015701"
  ),
  cal = c(
    "metabolic process" = "GO:0008152",
    "catalytic activity" = "GO:0003824",
    "lyase activity" = "GO:0016829"
  )
)
gl_add <- rbindlist(sapply(names(selected_gos), function(x) {
  unique(go_map_dt[category %in% selected_gos[[x]]])
}, simplify = FALSE, USE.NAMES = TRUE), idcol = "genelist")
gl_dt <- rbindlist(list(gl_dt, gl_add), fill = TRUE)

# add full names
gl_full_names <- c(
  "cal" = "metabolism",
  "ion" = "ion transport",
  "adh" = "adhesion",
  "sig" = "signaling",
  "tfs" = "TFs",
  "chr" = "chromatin",
  "rbp" = "RNA BPs"
)
gl_dt[, genelist_full := gl_full_names[genelist]]
gl_dt[, genelist_full := factor(genelist_full, levels = gl_full_names)]

# fraction of genes in a genelist with each promoter class (CP vs SP)
gn_pt <- unique(pro_dt[, .(gene, gene_promoter, stage)])
gl_dt_1 <- merge.data.table(gl_dt, gn_pt, by = "gene", sort = FALSE)
gl_dt_1 <- gl_dt_1[!grepl("AP", gene_promoter)]
gl_dt_1[, gene_promoter_2 := paste0(gene_promoter, "2")]

# reorder
new_lvl <- gl_dt_1[, .N, .(genelist_full, gene_promoter)][
  , frac := N/sum(N), genelist_full][
    gene_promoter=="SP"][
      order(-frac)]$genelist_full
gl_dt_1[, genelist_full := factor(genelist_full, levels = new_lvl)]
gl_dt[, genelist_full := factor(genelist_full, levels = new_lvl)]

# number of non-promoter peaks associated to genes in a genelist
gl_dt_2 <- merge.data.table(gl_dt, dt_gp_nop, by = "gene", sort = FALSE)
setnames(gl_dt_2, "N", "num_non_prom")
gl_dt_2 <- gl_dt_2[!is.na(num_non_prom)]
gl_dt_2[is.na(genelist_full), genelist_full := "none"]

# reorder
new_lvl <- gl_dt_2[, mean(num_non_prom), .(genelist_full)][order(-V1)]$genelist_full
gl_dt_1[, genelist_full := factor(genelist_full, levels = new_lvl)]
gl_dt_2[, genelist_full := factor(genelist_full, levels = new_lvl)]
gl_dt[, genelist_full := factor(genelist_full, levels = new_lvl)]

# plot fraction of genes with each promoter class in a genelist (CP vs SP)
gl_gp_1 <- ggplot(gl_dt_1, aes(genelist_full, fill = gene_promoter, color = gene_promoter_2)) +
  geom_bar(position = "fill") +
  scale_y_continuous(expand = c(0, 0), breaks = c(0, 1)) +
  scale_fill_manual(values = pro_cols) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = paste0(names(pro_cols), "2")
  ), guide = "none") +
  labs(y = "fraction\nof genes") +
  theme(
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.title.x = element_blank(),
    panel.border = element_blank()
  )

# plot
require(ggpubr)
gl_gp_2 <- ggplot(gl_dt_2[genelist_full != "none"], aes(genelist_full, num_non_prom)) +
  geom_boxplot(
    data = gl_dt_2,
    fill = "#319854", 
    color = colorspace::darken("#319854", 0.5), 
    outlier.shape = 21
  ) +
  scale_y_continuous(
    limits = c(0, quantile(gl_dt_2$num_non_prom, 0.9995)),
    oob = scales::squish,
    expand = expansion(c(0.05, 0.11))
  ) +
  stat_compare_means(
    label = "p.signif", hide.ns = TRUE,
    method = "wilcox", method.args = list(alternative = "greater"),
    ref.group = ".all."
  ) +
  labs(y = "enhancers\nper gene") +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    axis.title.x = element_blank(),
  )

# save combined plot
gl_gp <- gl_gp_1 / gl_gp_2 + plot_layout(heights = c(1, 1), guides = "collect")
ggsave(
    file.path(fig_dir, sprintf("num_pks_per_gene_list.pdf")),
    gl_gp, width = 5.5, height = 5
)

```

### Number of cell types (pleiotropy)

N cell types with expression FC > X (or Tau score) vs N CREs (boxplots).

```{r}
# number of cell types where gene is expressed
fcthr <- 1.2
exp_dt <- unique(pks_dt[, .(gene, cell_type, stage, gene_expression_fc, gene_tau_index)])
exp_dt[, n_cell_types := length(unique(.SD[gene_expression_fc > fcthr]$cell_type)), gene]

# number of regulatory elements in cell type
pkc_dt <- unique(pks_dt[, .(gene, peak, cell_type, stage, promoter)])
pkc_dt[, n_peaks_per_gene_per_cell_type := length(unique(.SD$peak)), .(gene, cell_type, stage)]
pkc_dt[, n_peaks_per_gene_all_cell_type := length(unique(.SD$peak)), .(gene)]
pkc_dt[, n_peaks_per_gene_not_promoters := length(unique(.SD[promoter == "NO"]$peak)), .(gene)]

# combine
cre_dt <- merge.data.table(exp_dt, pkc_dt, by = c("gene", "cell_type", "stage"), sort = FALSE)
cre_dt <- merge.data.table(cre_dt, pro_dt[, .(gene, stage, gene_promoter)], by = c("gene", "stage"), sort = FALSE)
cre_dt[grepl("AP", gene_promoter), gene_promoter := "AP"]
cre_dt <- cre_dt[gene_promoter != "AP"]
cre_dt[, n_cell_types := factor(n_cell_types, levels = sort(unique(cre_dt$n_cell_types)))]
cre_dt[, gene_promoter := factor(gene_promoter, levels = names(pro_cols))]

# plot number of peaks per gene
gp_1 <- ggplot(cre_dt, aes(
    x = n_cell_types, y = n_peaks_per_gene_all_cell_type,
  )) +
  geom_boxplot(fill = "#4d8cc4", color = colorspace::darken("#4d8cc4", 0.5), outlier.shape = 21) +
  scale_y_continuous(
    limits = c(0, quantile(cre_dt$n_peaks_per_gene_all_cell_type, 0.99)),
    oob = scales::squish
  ) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  labs(y = "# peaks\nper gene", x = "")

gp_1_ct <- ggplot(cre_dt, aes(
    x = n_cell_types, y = n_peaks_per_gene_all_cell_type,
    fill = gene_promoter, color = gene_promoter
  )) +
  geom_boxplot(position = position_dodge2(preserve = "single"), outlier.shape = 21) +
  scale_fill_manual(values = pro_cols) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +
  scale_y_continuous(
    limits = c(0, quantile(cre_dt$n_peaks_per_gene_all_cell_type, 0.99)),
    oob = scales::squish
  ) +
  theme(
    axis.title = element_blank(), 
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    legend.position = "none"
  )

# plot peaks per gene in cell type
gp_2 <- ggplot(cre_dt, aes(
    x = n_cell_types, y = n_peaks_per_gene_not_promoters
  )) +
  geom_boxplot(fill = "#4d8cc4", color = colorspace::darken("#4d8cc4", 0.5), outlier.shape = 21) +
  scale_y_continuous(
    limits = c(0, quantile(cre_dt$n_peaks_per_gene_not_promoters, 0.99)),
    oob = scales::squish
  ) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  labs(
    y = "# non-promoter peaks\nper gene",
    x = ""
  )

gp_2_ct <- ggplot(cre_dt, aes(
    x = n_cell_types, y = n_peaks_per_gene_not_promoters,
    fill = gene_promoter, color = gene_promoter
  )) +
  geom_boxplot(position = position_dodge2(preserve = "single"), outlier.shape = 21) +
  scale_fill_manual(values = pro_cols) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +
  scale_y_continuous(
    limits = c(0, quantile(cre_dt$n_peaks_per_gene_not_promoters, 0.99)),
    oob = scales::squish
  ) +
  theme(
    axis.title = element_blank(),
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    legend.position = "none"
  )

# plot number of genes
dt_3 <- unique(cre_dt[, .(gene, n_cell_types, gene_promoter)])
gp_3 <- ggplot(dt_3, aes(x = n_cell_types)) +
  geom_bar(fill = "#4d8cc4", color = colorspace::darken("#4d8cc4", 0.5)) +
  scale_y_continuous(
    expand =  expansion(mult = c(0, 0.1))
  ) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  labs(
    y = "# genes",
    x = sprintf("# expression domains\n(FC > %s)", fcthr)
  )

gp_3_ct <- ggplot(dt_3, aes(
    x = n_cell_types, fill = gene_promoter, color = gene_promoter
  )) +
  geom_bar(position = position_dodge2(preserve = "single")) +
  scale_fill_manual(values = pro_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +
  scale_y_continuous(
    expand =  expansion(mult = c(0, 0.1))
  ) +
  theme(
    axis.title.y = element_blank(), 
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    legend.position = "none"
  ) +
  labs(x = sprintf("# expression domains\n(FC > %s)", fcthr))

gp_st <- (gp_1 + gp_1_ct) / (gp_2 + gp_2_ct) / (gp_3 + gp_3_ct)

ggsave(
    file.path(fig_dir, sprintf("num_pks_gene_expression_fc%s_stats.pdf", fcthr)),
    gp_st, width = 10, height = 7
)

# plot tau index
tau_dt <- unique(cre_dt[, .(gene, gene_promoter, gene_tau_index, n_peaks_per_gene_all_cell_type, n_peaks_per_gene_not_promoters)])
tau_dt[, tau_bin := cut(
    gene_tau_index, 
    breaks = c(0, 0.6, 0.8, 1), 
    include.lowest = TRUE
)]

gp_tau_1 <- ggplot(
    tau_dt[!is.na(gene_tau_index)],
    aes(x = tau_bin, y = n_peaks_per_gene_all_cell_type, fill = gene_promoter, color = gene_promoter)
  ) +
  geom_boxplot() +
  scale_fill_manual(values = pro_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +
  scale_y_continuous(
    limits = c(0, quantile(cre_dt$n_peaks_per_gene_per_cell_type, 0.99)),
    oob = scales::squish
  ) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    legend.position = "none"
  ) +
  labs(x = "", y = "# peaks\nper gene")

gp_tau_2 <- ggplot(
    tau_dt[!is.na(gene_tau_index)],
    aes(x = tau_bin, y = n_peaks_per_gene_not_promoters, fill = gene_promoter, color = gene_promoter)
  ) +
  geom_boxplot() +
  scale_fill_manual(values = pro_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +
  scale_y_continuous(
    limits = c(0, quantile(cre_dt$n_peaks_per_gene_not_promoters, 0.99)),
    oob = scales::squish
  ) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    legend.position = "none"
  ) +
  labs(x = "", y = "# non-promoter peaks\nper gene")

gp_tau_3 <- ggplot(
    unique(tau_dt[!is.na(gene_tau_index), .(gene, tau_bin, gene_promoter)]),
    aes(x = tau_bin, fill = gene_promoter, color = gene_promoter)
  ) +
  geom_bar(position = position_dodge2(preserve = "single")) +
  scale_fill_manual(values = pro_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    legend.position = "none"
  ) +
  labs(x = "Tau", y = "# genes")


gp_tau <- gp_tau_1 / gp_tau_2 / gp_tau_3

ggsave(
    file.path(fig_dir, "num_pks_gene_expression_tau.pdf"),
    gp_tau, width = 3, height = 8
)

# figure
gp_fig <- ((gp_tau_2 + gp_2_ct) / (gp_tau_3 + gp_3_ct)) &
    plot_layout(widths = c(3, 4))
ggsave(
    file.path(fig_dir, "num_pks_gene_expression.pdf"),
    gp_fig, width = 10, height = 6
)

# tau index distribution
gp_tau_dist_1 <- ggplot(tau_dt[!is.na(gene_tau_index)], aes(gene_tau_index)) + 
  geom_density(alpha = 0.9, fill = "#4d8cc4", color = colorspace::darken("#4d8cc4", 0.5)) +
  theme(legend.position = "none") +
  labs(x = "Tau index", y = "density")

gp_tau_dist_2 <- ggplot(tau_dt[!is.na(gene_tau_index)], aes(gene_tau_index, fill = gene_promoter, color = gene_promoter)) + 
  geom_density(alpha = 0.9) +
  scale_fill_manual(values = pro_cols) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +
  theme(legend.position = "none") +
  labs(x = "Tau index", y = "density")

# correlation of tau index and expression domains
gp_cor_tau_exp <- ggplot(cre_dt, aes(n_cell_types, gene_tau_index, fill = gene_promoter, color = gene_promoter)) + 
  geom_boxplot(position = position_dodge2(preserve = "single"), outlier.shape = 21) +
  scale_fill_manual(values = pro_cols) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    legend.position = "none"
  ) +
  labs(x = "# expression domains", y = "Tau index")

gp_tau_dist <- gp_tau_dist_1 / gp_tau_dist_2 / gp_cor_tau_exp

ggsave(
    file.path(fig_dir, "tau_vs_expression.pdf"),
    gp_tau_dist, width = 6, height = 7
)
```

How many cell types SP are in?

```{r}
# specific promoters
sp_dist <- unique(pks_dt[promoter == "SP"][, .(peak, stage, cell_type)])
sp_dist[, stage := paste(sort(unique(.SD$stage)), collapse = "+"), peak]
sp_dist <- sp_dist[, .(num_cts = .N), .(peak, stage)][, .N, .(num_cts, stage)]
sp_dist[, num_cts := factor(num_cts, levels = seq_along(unique(pks_dt$cell_type)))]
sp_dist[, stage := factor(stage, levels = c("adult", "gastrula", "adult+gastrula"))]
sph <- ggplot(sp_dist, aes(num_cts, N, fill = stage)) + 
  geom_bar(stat = "identity", color = colorspace::darken(pro_cols["SP"], 0.5)) + 
  scale_y_continuous(
    expand = expansion(mult = c(0, 0.05))
  ) +
  scale_fill_manual(values = c(
    "adult" = colorspace::lighten(pro_cols["SP"], 0.18),
    "gastrula" = unname(pro_cols["SP"]),
    "adult+gastrula" = colorspace::darken(pro_cols["SP"], 0.1)
  )) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  labs(y = "# SP", x = "# accessibility domains") 

ggsave(
  file.path(fig_dir, "num_cts_sp_cell_types.pdf"),
  sph, 
  width = 6.5, height = 2
)
```


### Genes variability

sz_cor for SP vs CP genes

```{r}
gstat <- switch(
  stage,
  "adult" = gstat_adult,
  "gastrula" = gstat_gastr
)
if (stage == "joint") {
  gstat <- rbindlist(list(
    adult = gstat_adult, gastrua = gstat_gastr
  ))
}

gstat_pro <- merge.data.table(pro_dt, gstat, by = c("gene", "stage"), all.x = TRUE)
gstat_pro <- merge.data.table(
  gstat_pro,
  unique(class_peaks[, .(gene, cell_type, stage, umifrac, mcfp)]),
  by = c("gene", "stage")
)
gstat_pro[, gene_promoter_2 := paste0(gene_promoter, "2")]
gstat_pro[, gene_promoter := factor(gene_promoter, levels = c("CP", "SP", "AP"))]
# gstat_pro <- gstat_pro[gene_promoter != "AP"]

# szcor globally
gp_szcor <- ggplot(gstat_pro, aes(umifrac, sz_cor)) +
  ggrastr::geom_point_rast(aes(color = gene_promoter_2, shape = stage), size = 0.25, alpha = 0.7) +
  geom_density_2d(aes(color = gene_promoter)) +
  scale_x_continuous(
    trans = "log10",
    oob = scales::squish
  ) +
  scale_shape_manual(values = c("adult" = 16, "gastrula" = 17)) +
  facet_grid(gene_promoter ~ stage) +
  scale_color_manual(values = c(
    class_cols,
    structure(
      colorspace::lighten(class_cols, 0.6),
      names = paste0(names(class_cols), "2")
    )
  )) +
  theme(legend.position = "none")

ggsave(
    file.path(plot_dir, sprintf("peaks_class_gene_szcor_%s.pdf", stage)),
    gp_szcor, width = 6, height = 6.5
)

gp_szcor_box_1 <- ggplot(gstat_pro, aes(stage, sz_cor_norm)) +
  geom_boxplot(aes(color = gene_promoter_2, fill = gene_promoter), outlier.shape = NA) +
  scale_fill_manual(values = class_cols) +
  scale_y_continuous(
    limits = c(-0.1, 0.1),
    oob = scales::squish,
    expand = c(0.01, 0.01)
  ) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = paste0(names(class_cols), "2")
  )) +
  theme(legend.position = "none")
gp_szcor_box_2 <- ggplot(gstat_pro, aes(gene_promoter, sz_cor_norm)) +
  geom_boxplot(aes(color = gene_promoter_2, fill = gene_promoter), outlier.shape = NA) +
  scale_fill_manual(values = class_cols) +
  scale_y_continuous(
    limits = c(-0.07, 0.07),
    oob = scales::squish,
    expand = c(0.01, 0.01)
  ) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = paste0(names(class_cols), "2")
  )) +
  theme(legend.position = "none")
gp_szcor_box <- gp_szcor_box_1 + gp_szcor_box_2 + plot_layout(widths = c(2, 1))

ggsave(
    file.path(plot_dir, sprintf("peaks_class_gene_szcor_nom_box_%s.pdf", stage)),
    gp_szcor_box, width = 4.5, height = 2.5
)


# szcor per cell type
gp_szcor_ct <- ggplot(gstat_pro, aes(umifrac, sz_cor)) +
  ggrastr::geom_point_rast(aes(color = gene_promoter_2, shape = stage), size = 0.25, alpha = 0.7) +
  geom_density_2d(aes(color = gene_promoter)) +
  scale_shape_manual(values = c("adult" = 16, "gastrula" = 17)) +
  scale_x_continuous(
    trans = "log10",
    oob = scales::squish
  ) +
  facet_grid(cell_type ~ gene_promoter) +
  scale_color_manual(values = c(
    class_cols,
    structure(
      colorspace::lighten(class_cols, 0.6),
      names = paste0(names(class_cols), "2")
    )
  )) +
  theme(legend.position = "none")

ggsave(
    file.path(plot_dir, sprintf("peaks_class_gene_szcor_per_cell_type_%s.pdf", stage)),
    gp_szcor_ct, width = 12, height = 24
)


gp_szcor_ct_box <- ggplot(gstat_pro, aes(cell_type, sz_cor)) +
  geom_boxplot(aes(color = gene_promoter_2, fill = gene_promoter), outlier.shape = NA) +
  scale_fill_manual(values = class_cols) +
  scale_y_continuous(
    limits = c(NA, NA), oob = scales::squish, expand = c(0.01, 0.01)
  ) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = paste0(names(class_cols), "2")
  )) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    legend.position = "none"
  )

ggsave(
    file.path(plot_dir, sprintf("peaks_class_gene_szcor_per_cell_type_box_%s.pdf", stage)),
    gp_szcor_ct_box, width = 12, height = 6
)

# metacell level variability
var_dt <- rbindlist(list(
  adult = data.table(var_mc = apply(mc_adult@mc_fp, 1, var), gene = rownames(mc_adult@mc_fp)),
  gastrula = data.table(var_mc = apply(mc_gastr@mc_fp, 1, var), gene = rownames(mc_gastr@mc_fp))
), idcol = "stage")
gstat_vardt <- merge.data.table(
  gstat_pro, var_dt, by = c("gene", "stage"), all = FALSE, sort = FALSE
)

gp_mcvar_box <- ggplot(gstat_vardt, aes(gene_promoter, var_mc)) +
  geom_boxplot(aes(color = gene_promoter_2, fill = gene_promoter), outlier.shape = NA) +
  scale_fill_manual(values = class_cols) +
  scale_y_continuous(
    limits = c(NA, quantile(gstat_vardt$var_mc, 0.9, na.rm=TRUE)),
    oob = scales::squish,
    expand = c(0.01, 0.01)
  ) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = paste0(names(class_cols), "2")
  )) +
  theme(legend.position = "none")

ggsave(
    file.path(plot_dir, sprintf("peaks_class_gene_var_mc_box_%s.pdf", stage)),
    gp_mcvar_box, width = 2, height = 2.5
)

```

### Peaks variability

```{r}
if (!is.null(ap_dir)) {

  stats_peaks <- fread(file.path(ap_dir, "scATAC_reduced_peaks_gene_scores_table.tsv.gz"))[, stage := stage]

} else {

  stats_peaks_adult <- fread(file.path(adult_pks_dir, "scATAC_reduced_peaks_gene_scores_table.tsv.gz"))
  setnames(stats_peaks_adult, "peak", "peak_adult")
  stats_peaks_adult <- merge.data.table(
    stats_peaks_adult,
    unique(pks_map[, .(peak, peak_adult)][peak_adult != ""]),
    by = "peak_adult", all.x = TRUE
  )
  stats_peaks_adult[, peak_adult := NULL]
  stats_peaks_gastr <- fread(file.path(gastr_pks_dir, "scATAC_reduced_peaks_gene_scores_table.tsv.gz"))
  setnames(stats_peaks_gastr, "peak", "peak_gastrula")
  stats_peaks_gastr <- merge.data.table(
    stats_peaks_gastr,
    unique(pks_map[, .(peak, peak_gastrula)][peak_gastrula != ""]),
    by = "peak_gastrula", all.x = TRUE
  )
  stats_peaks_gastr[, peak_gastrula := NULL]
  stats_peaks <- rbindlist(list(
    gastrula = stats_peaks_gastr, adult = stats_peaks_adult
  ), use.names = TRUE, idcol = "stage")

}

stats_peaks <- unique(stats_peaks[, .(gene, peak, stage, dist_to_tss, peak_gini, peak_gini_scaled, mean_corr)])
setnames(stats_peaks, "mean_corr", "expression_correlation")

# combine
var_dt <- merge.data.table(class_peaks, stats_peaks, by = c("gene", "peak", "stage"))
var_dt <- merge.data.table(var_dt, pro_dt, by = c("gene", "stage"), sort = FALSE)
var_dt[, cre := ifelse(promoter == "NO", "enhancer", "promoter")]
var_dt[, cre_class := promoter][cre_class == "NO", cre_class := "enhancer"]
var_dt[, cre_class := factor(cre_class, levels = c("CP", "SP", "AP", "enhancer"))]

# plot
cre_cols <- c(class_cols, "promoter" = "#4393c3", "enhancer" = "#4ba068")
gp_list <- lapply(c("CP", "SP", "AP", "enhancer"), function(x) {
  ggplot(var_dt[cre_class == x], aes(score, peak_gini)) + 
    stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
    scale_x_continuous(trans = "log10", limits = c(0.1, 2), oob = squish, expand = c(0, 0)) +
    scale_y_continuous(limits = c(0.4, 1), oob = squish, expand = c(0, 0)) +
    scale_fill_gradientn(colours = c(colorspace::lighten(cre_cols[x], 0.995), cre_cols[x])) +
    labs(x = "peak accessibility", y = "peak variability", title = x)
})
gp_pvar <- wrap_plots(gp_list) +
  plot_layout(nrow = 1, guides = "collect") & theme(legend.position = "bottom")
ggsave(
    file.path(plot_dir, sprintf("peaks_var_%s.pdf", stage)),
    gp_pvar, width = 9.5, height = 3.5
)
```

### GC content

```{r}
# sequence
dna_fn <- file.path("..", "..", "genome", "Nvec_vc1.1_gDNA_mtDNA.fasta")
dna <- Biostrings::readDNAStringSet(dna_fn)

# get peaks ranges
peaks_gr <- makeGRangesFromDataFrame(
  unique(class_peaks[, .(seqnames, start, end, peak, promoter)]),
  keep.extra.columns = TRUE
)

# get peaks sequence
peaks_seq <- dna[peaks_gr]

# GC content
gc <- letterFrequency(peaks_seq, letters="GC", as.prob=TRUE)
peaks_gr$GC <- unlist(gc)
peaks_dt <- setDT(as.data.frame(peaks_gr))
setnames(peaks_dt, "G.C", "GC")
peaks_dt[, promoter := factor(promoter, levels = c(names(class_cols), "NO"))]

# plot
gp_gc <- ggplot(peaks_dt, aes(
    x = promoter, y = GC,
    fill = promoter, color = promoter
  )) +
  geom_boxplot(outlier.shape = 21) +
  scale_fill_manual(values = c(class_cols, "NO" = "#319854"), drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(c(class_cols, "#319854"), 0.5),
    names = c(names(class_cols), "NO")
  )) +
  scale_y_continuous(
    #limits = c(0, quantile(dt_gp_nop$N, 0.99)),
    #trans = "log10",
    oob = scales::squish
  ) +
  theme(legend.position = "none") +
  labs(
    y = "non-promoter peaks",
    x = ""
  )
ggsave(
    file.path(plot_dir, sprintf("peaks_gc_%s.pdf", stage)),
    gp_gc, width = 2.5, height = 2.5
)
```
