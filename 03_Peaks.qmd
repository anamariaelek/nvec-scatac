---
title: "Joint adult and gastrula set of peaks"
author: "Anamaria Elek"
date: today
format: 
  html:
    code-fold: false
    code-tools: false
    embed-resources: true
    highlight-style: github
    toc: true 
    code-line-numbers: false 
execute:
  eval: false
  message: false
  warning: false
---

```{r}
#| label: initialize
#| echo: FALSE
knitr::opts_chunk$set(echo = TRUE, fig.width=7, fig.height=5) 
```

In this notebook, we map peaks between adult and gastrula scATAC datasets.  

## Setup

Load packages and functions.

```{r}
#| label: setup

# load in-house functions
source("metacell_downstream_functions/Downstream_functions.R")
source("metacell_downstream_functions/utils.R")
source("motif-analysis/mta_downstream_functions.R")
source("scatac_helper_functions.R")

# global settings
options(stringsAsFactors = FALSE)

# load packages
library(BSgenome.jaNemVect1.1.DToL.Assembly)
library(GenomicRanges)
library(data.table)
library(tidyr)
library(stringr)
library(ggplot2)
library(patchwork)
library(ggrepel)
library(ggside)
library(grid)
library(ArchR)
library(Seurat)
library(metacell)

# set ggplot2 theme
theme_blank <- theme_minimal() + theme(
  axis.title.x = element_blank(),
  axis.title.y = element_blank(),
  panel.border = element_blank(),
  panel.grid=element_blank(),
  axis.ticks = element_blank(),
  text = element_text(size=20)
)
theme_py <- theme_light() + theme(
  #panel.grid.major = element_blank(),
  #panel.grid.minor = element_blank(),
  panel.border = element_rect(colour = "black", fill = NA),
  text = element_text(size=20),
  strip.placement = "outside", 
  strip.text = element_text(size=20, color="black"),
  strip.background = element_rect(fill="white")
)
theme_set(theme_py)
```

Define directories to save the results to.

```{r}
#| label: dirs

# input directories
adult_dir <- "ArchRProj_Nvec_TSS4_frag200"
gastr_dir <- "ArchRProj_Nvec_gastrula"

# gene annotations
ann_dir <- "annotation"
gen_ann <- fread(file.path(ann_dir, "Nematostella_DToL_FINAL.tsv"))
tfs_ann <- fread(file.path(ann_dir, "Nematostella_DToL_TFs_FINAL.tsv"))

# output directories
pks_dir <- "results/Peaks"
dir.create(pks_dir, showWarnings = FALSE)
fig_dir <- "plots/Peaks"
dir.create(fig_dir, showWarnings = FALSE)
```


Project-specific variables:

```{r}
ct_cols <- c(
  "cnidocyte"                  = "#ff42ff",
  "cnidocyte_gastrula"         = "#f7abf7",
  "ecto_pharynx"               = "#5bc0e8",
  "ectoderm"                   = "#51a0be",
  "ecto_aboral"                = "#045170",
  "EMS"                        = "#bdf5bd",
  "EMS_ecto_boundary"          = "#93dbce",
  "gastro_circular_muscle_1"   = "#85c90e",
  "gastro_circular_muscle_2"   = "#73b009",
  "gastro_parietal_muscle"     = "#8ceb10",
  "gastro_IRF1_2"              = "#c1eb05",
  "gastro_somatic_gonad"       = "#bde314",
  "muscle_tentacle_retractor"  = "#ffd700",
  "muscle_mesentery_retractor" = "#f0e229",
  "digestive_filaments_1"      = "#e33d3d",
  "digestive_filaments_2"      = "#d10606",
  "digestive_filaments_3"      = "#ad0303",
  "epidermis_1"                = "#04ccd4",
  "epidermis_2"                = "#16bacc",
  "precursors_PGC"             = "#bebebe",
  "precursors_endoNPC"         = "#8a8686",
  "precursors_NPC"             = "#636363",
  "NPC_1"                      = "#808d91",
  "NPC_2"                      = "#758d92",
  "neuron_GATA_Islet_1"        = "#0c82f7",
  "neuron_GATA_Islet_2"        = "#1175f0",
  "neuron_Pou4_FoxL2_1"        = "#101cde",
  "neuron_Pou4_FoxL2_2"        = "#0b16bf",
  "neuron_Pou4_FoxL2_3"        = "#2e39dd",
  "neuronal"                   = "#063cb9",
  "gland"                      = "#ff6f08",
  "gland_mucin"                = "#ff8f12"
)
cell_types <- names(ct_cols)
adult_cell_types <- c(
  "cnidocyte",
  "gastro_circular_muscle_1", 
  "gastro_circular_muscle_2",
  "gastro_parietal_muscle",
  "gastro_IRF1_2",
  "gastro_somatic_gonad",
  "muscle_mesentery_retractor",
  "muscle_tentacle_retractor",
  "digestive_filaments_1",
  "digestive_filaments_2",
  "digestive_filaments_3",
  "epidermis_1",
  "epidermis_2",
  "precursors_PGC",
  "precursors_endoNPC",
  "precursors_NPC",
  "neuron_GATA_Islet_1",
  "neuron_GATA_Islet_2",
  "neuron_Pou4_FoxL2_1",
  "neuron_Pou4_FoxL2_2",
  "neuron_Pou4_FoxL2_3",
  "gland"
)
gastr_cell_types <- c(setdiff(cell_types, adult_cell_types))
bct_cols <- toupper(c(
  "cnidocyte"                 = "#FF42FF",
  "cnidocyte_gastrula"        = "#f7abf7",
  "ecto"                      = "#51a0be",
  "EMS"                       = "#bdf5bd",
  "gastro_circular_muscle"    = "#73b009",
  "gastro_parietal_muscle"    = "#8ceb10",
  "gastro"                    = "#85c90e",  
  "muscle"                    = "#FFD700",
  "digestive_filaments"       = "#e33d3d",
  "precursors"                = "#BEBEBE",
  "NPC"                       = "#808d91",
  "epidermis"                 = "#04ccd4",
  "neuron_GATA_Islet"         = "#1175f0",
  "neuron_Pou4_FoxL2"         = "#101cde",
  "neuronal"                  = "#063cb9",
  "gland"                     = "#ff6f08",
  "gland_mucin"               = "#ff8f12"
))
broad_cell_types <- names(bct_cols)
bct_maps <- setDT(cbind.data.frame(
  cell_type = cell_types,
  broad_cell_type = str_extract(cell_types, paste(names(bct_cols), collapse = "|"))
))
bct_maps[cell_type == "cnidocyte_gastrula", broad_cell_type := "cnidocyte_gastrula"]
bct_maps[cell_type == "gland_mucin", broad_cell_type := "gland_mucin"]
broad_cell_types <- unique(bct_maps$broad_cell_type)
gastrula_broad_cell_types <-  c("cnidocyte_gastrula", "ecto", "EMS", "NPC", "neuronal", "gland_mucin")
adult_broad_cell_types <- setdiff(broad_cell_types, gastrula_broad_cell_types)
```

```{r}
#| label: fix_peaks_files
#| ehco: FALSE
#| eval: FALSE
#| include: FALSE

for (ct in adult_cell_types) {
  message(ct)
  all_pks <- fread(file.path(adult_dir, "ArchRProj", "PeakDifferential", "cell_type", sprintf("Peaks-%s-vs-others.tsv", ct)))
  flt_pks <- fread(file.path(adult_dir, "ArchRProj", "PeakDifferential", "cell_type_filtered", sprintf("Peaks-%s-vs-others.tsv", ct)))
  if ("gene" %in% colnames(all_pks)) {
    all_pks[, gene := NULL]
  }
  setnames(flt_pks,colnames(all_pks)[1:6])
  fln_pks <- merge.data.table(
    all_pks, flt_pks, by = colnames(all_pks)[1:6], 
    all.x = FALSE, sort = FALSE
  )
  if (!all(flt_pks$peak %in% fln_pks$peak)) {
    break(sprintf("Error: not all peaks are present in the filtered set for %s", ct))
  }
  if (any(duplicated(fln_pks$peak))) {
    break(sprintf("Error: duplicated peaks in the filtered set for %s", ct))
  }
  fwrite(
    fln_pks,
    file.path(adult_dir, "ArchRProj", "PeakDifferential", "cell_type_filtered", sprintf("Peaks-%s-vs-others.tsv", ct)),
    sep = "\t"
  )
}
```

## Mapping peaks

Mapping between gastrula and adult peaks

```{r}
# load peaks
gastr_peaks <- fread(
    file.path(gastr_dir, "ArchRProj", "Peaks", "Peaks-consensus-cell_type.bed")
)
adult_peaks <- fread(
    file.path(adult_dir, "ArchRProj", "Peaks", "Peaks-consensus-cell_type.bed")
)
bed_cols <- c("seqnames", "start", "end", "peak", "score", "strand")
setnames(gastr_peaks, bed_cols)
setnames(adult_peaks, bed_cols)
gastr_peaks_gr <- makeGRangesFromDataFrame(
    gastr_peaks, keep.extra.columns = TRUE
)
adult_peaks_gr <- makeGRangesFromDataFrame(
    adult_peaks, keep.extra.columns = TRUE
)

# overlaps between two sets of peaks
ovl <- findOverlaps(
    query = gastr_peaks_gr, subject = adult_peaks_gr,
    minoverlap = 50
)
adult_peaks[, ovl := FALSE]
adult_ovl <- adult_peaks_gr[unique(subjectHits(ovl))]$peak
adult_peaks[peak %in% adult_ovl, ovl := TRUE]

gastr_peaks[, ovl := FALSE]
gastr_ovl <- gastr_peaks_gr[unique(queryHits(ovl))]$peak
gastr_peaks[peak %in% gastr_ovl, ovl := TRUE]

gastr_peaks[, .N, ovl][, perc := N / sum(N)][]
#     ovl     N     perc
#1: FALSE 44020 0.501127
#2:  TRUE 43822 0.498873

adult_peaks[, .N, ovl][, perc := N / sum(N)][]
#     ovl     N     perc
#1:  TRUE 44331 0.640464
#2: FALSE 24886 0.359536

# overlapping peaks
ovl_pks <- adult_peaks_gr[subjectHits(ovl)]
ovl_pks$peak_adult <- ovl_pks$peak
ovl_pks$peak_gastrula <- gastr_peaks_gr[queryHits(ovl)]$peak

# adult only peaks
onl_adult <- adult_peaks_gr[
    setdiff(seq_along(adult_peaks_gr), unique(subjectHits(ovl)))
]
onl_adult$peak_adult <- onl_adult$peak

# gastrula only peaks
onl_gastr <- gastr_peaks_gr[
    setdiff(seq_along(gastr_peaks_gr), unique(queryHits(ovl)))
]
onl_gastr$peak_gastrula <- onl_gastr$peak

# combine
pks_all <- c(ovl_pks, onl_adult, onl_gastr)
seqlevels(pks_all) <- as.character(unique(seqnames(adult_peaks_gr)))
pks_all <- sort(pks_all)
pks_dt <- as.data.table(pks_all)
pks_dt[is.na(pks_dt)] <- ""
pks_dt[, id := paste(seqnames, start, end, sep = "_")]
pks_dt[, id := factor(id, levels = unique(pks_dt$id))]
pks_dt[, peak := paste0("peak", as.integer(id))]

# save
fwrite(
    pks_dt,
    file.path(pks_dir, "Peaks_cell_type_mapped.tsv"),
    sep = "\t"
)
```

Save mapped peaks for individual cell types

```{r}
# Get peaks for all cell types
for (lvl %in% c("cell_type", "cell_type_differential")) {

  # For all cell types
  pks_ct_lst <- lapply(cts, function(ct) {

    tryCatch({

      # Stage
      if (ct %in% adult_cell_types) {
        stage_dir <- "ArchRProj_Nvec_TSS4_frag200"
      } else {
        stage_dir <- "ArchRProj_Nvec_gastrula"
      }

      # Cell type peaks
      if (lvl == "cell_type") {
        pks_fn <- file.path(
          stage_dir, "ArchRProj", "Peaks", 
          "cell_type_filtered",
          sprintf("Peaks-%s.bed", ct)
        )
        pks_ct <- fread(pks_fn)[, 1:3]
        setnames(pks_ct, c("seqnames", "start", "end"))

      # Cell type differential peaks
      } else if (lvl == "cell_type_differential") {
        pks_fn <- file.path(
          stage_dir, "ArchRProj", "PeakDifferential", 
          "cell_type_filtered",
          sprintf("Peaks-%s-vs-others.tsv", ct)
        )
        pks_ct <- fread(pks_fn)

      }

      # Translate per-stage peak ids to mapped peaks ids
      pks_ct_gr <- makeGRangesFromDataFrame(pks_ct[, 1:3])
      pks_dt_gr <- makeGRangesFromDataFrame(pks_dt[, 1:3])
      pks_ovl <- findOverlaps(
        query = pks_ct_gr, subject = pks_dt_gr, 
        minoverlap = 100, type = "any", ignore.strand = TRUE
      )
      pks_ct <- pks_ct[queryHits(pks_ovl)]
      pks_ct$peak <- pks_dt[subjectHits(pks_ovl)]$peak
      pks_ct[, cell_type := ct]
      pks_ct

    }, error = function(e) {
      warning(sprintf("Error: %s", e$message))
      return(NULL)
    })

  })

  # Save combined peaks
  pks_dt <- rbindlist(pks_ct_lst)
  fwrite(
    pks_dt,
    file.path(pks_dir, sprintf("Peaks_per_%s_mapped.tsv.gz", lvl)),
    sep = "\t"
  )

}

```

Combine metadata

```{r}
# annotation
meta_gastr <- as.data.table(
    proj_gastr@cellColData, keep.rownames = "cell"
)[, .(cell, nFrags, FRIP, TSSEnrichment, SEACell, cell_type, color)]
meta_adult <- as.data.table(
    proj_adult@cellColData, keep.rownames = "cell"
)[, .(cell, nFrags, FRIP, TSSEnrichment, SEACell, cell_type, cell_type_color)]
setnames(meta_adult, "cell_type_color", "color")
meta_all <- rbindlist(list(
    "adult" = meta_adult, "gastrula" =  meta_gastr
), idcol = "stage")
meta_all[, cell_type := str_replace_all(cell_type, "\\.", "_")]
meta_all[, color := ct_cols[as.character(cell_type)]]
meta_all[, cell_type := factor(cell_type, levels = names(ct_cols))]
setorder(meta_all, cell_type)
fwrite(meta_all, file.path(
    data_dir,
    "Annotation_Adult_Gastrula_SEACell.tsv"
), sep = "\t")

meta_all[, cell_type := factor(
    cell_type, levels = sort(unique(meta_all$cell_type))
)]
setorder(meta_all, cell_type)
meta_melt <- melt.data.table(
    meta_all,
    id.vars = c("stage", "SEACell", "cell_type"),
    measure.vars = c("nFrags", "TSSEnrichment", "FRIP")
)
meta_melt[, cell_type := factor(
    cell_type, levels = sort(unique(meta_melt$cell_type))
)]
setorder(meta_melt, cell_type)
meta_melt[, SEACell := factor(
    SEACell, levels = unique(meta_melt$SEACell)
)]
setorder(meta_melt, SEACell)
gp_qc_gastr <- ggplot(
      meta_melt[stage == "gastrula"],
      aes(SEACell, value, fill = cell_type)
    ) +
    geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), width = 1.4) +
    facet_grid(variable ~ ., scales = "free_y", switch = "both") +
    scale_fill_manual(values = ct_cols) +
    theme(
        legend.position = "bottom",
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
        axis.ticks.x = element_blank(),
        axis.title.x = element_blank()
    )
gp_qc_adult <- ggplot(
      meta_melt[stage == "adult"],
      aes(SEACell, value, fill = cell_type)
    ) +
    geom_violin(draw_quantiles = c(0.25, 0.5, 0.75), width = 1.4) +
    facet_grid(variable ~ ., scales = "free_y", switch = "both") +
    scale_fill_manual(values = ct_cols) +
    theme(
        legend.position = "bottom",
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.x = element_text(
            angle = 90, vjust = 0.5, hjust = 1, size = 3
        ),
        axis.ticks.x = element_blank(),
        axis.title.x = element_blank()
    )

pdf(
    file.path(plot_dir, "meta_qc.pdf"),
    width = 45, height = 12
)
gp_qc_adult
gp_qc_gastr
dev.off()
```

Peak counts with unified set of peaks

```{r}
# peaks counts
gastr_counts <- readRDS(
    file.path(gastr_dir, "PeakMatrix", "Matrix-Peaks.rds")
)
adult_counts <- readRDS(
    file.path(adult_dir, "PeakMatrix", "Matrix-Peaks.rds")
)

# mapped peaks
pks_dt <- fread(file.path(adult_dir, "Peaks", "Peaks_cell_type_mapped.tsv"))

# metadata
meta_all <- fread(file.path(
    data_dir,
    "Annotation_Adult_Gastrula_SEACell.tsv"
))

# map gastrula counts
gastr_pks <- lapply(
    rownames(gastr_counts),
    function(p) pks_dt[peak_gastrula == p]$peak
)
gastr_pks_new <- unlist(gastr_pks)
gastr_pks_old <- rep(
    rownames(gastr_counts),
    times = sapply(gastr_pks, length)
)
gastr_counts_map <- gastr_counts[gastr_pks_old, ]
rownames(gastr_counts_map) <- gastr_pks_new

# map adult counts
adult_pks <- lapply(
    rownames(adult_counts),
    function(p) pks_dt[peak_adult == p]$peak
)
adult_pks_new <- unlist(adult_pks)
adult_pks_old <- rep(
    rownames(adult_counts),
    times = sapply(adult_pks, length)
)
adult_counts_map <- adult_counts[adult_pks_old, ]
rownames(adult_counts_map) <- adult_pks_new

# save files
saveRDS(
    gastr_counts_map,
    file.path(gastr_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds")
)
saveRDS(
    adult_counts_map,
    file.path(adult_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds")
)
```

Combine peaks

```{r}
# metadata
meta_all <- fread(file.path(
    data_dir,
    "Annotation_Adult_Gastrula_SEACell.tsv"
))

# counts
adult_counts <- readRDS(file.path(
    adult_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds"
))[, meta_all[stage == "adult"]$cell]
gastr_counts <- readRDS(file.path(
    gastr_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds"
))[, meta_all[stage == "gastrula"]$cell]

# combine
adult_miss_pks <- setdiff(rownames(gastr_counts), rownames(adult_counts))
adult_miss_mat <- matrix(0, nrow = length(adult_miss_pks), ncol = ncol(adult_counts), dimnames = list(adult_miss_pks, colnames(adult_counts)))
adult_miss_mat <- as(adult_miss_mat, "dgCMatrix")
adult_cont_mat <- rbind(adult_counts, adult_miss_mat)

gastr_miss_pks <- setdiff(rownames(adult_counts), rownames(gastr_counts))
gastr_miss_mat <- matrix(0, nrow = length(gastr_miss_pks), ncol = ncol(gastr_counts), dimnames = list(gastr_miss_pks, colnames(gastr_counts)))
gastr_miss_mat <- as(gastr_miss_mat, "dgCMatrix")
gastr_cont_mat <- rbind(gastr_counts, gastr_miss_mat)

all_pks <- sort(intersect(rownames(adult_cont_mat), rownames(gastr_cont_mat)))
uni_pks <- sort(unique(c(rownames(adult_cont_mat), rownames(gastr_cont_mat))))
all.equal(all_pks, uni_pks)
peaks_mat <- cbind(
    adult_cont_mat[all_pks, ],
    gastr_cont_mat[all_pks, ]
)

# save combined peaks matrix
saveRDS(peaks_mat, file.path(
    adult_dir, "PeakMatrix", "Matrix-Adult-Gastrula-Peaks-mapped.rds"
))

rm(adult_dt)
rm(gastr_dt)
rm(count_dt)
```

```{r}
# peaks counts
gastr_counts <- readRDS(
    file.path(gastr_dir, "PeakMatrix", "Matrix-Peaks.rds")
)
adult_counts <- readRDS(
    file.path(adult_dir, "PeakMatrix", "Matrix-Peaks.rds")
)

# mapped counts
adult_counts_map <- readRDS(file.path(
    adult_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds"
))
gastr_counts_map <- readRDS(file.path(
    gastr_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds"
))

# combined counts
peaks_mat <- readRDS(file.path(
    adult_dir, "PeakMatrix", "Matrix-Adult-Gastrula-Peaks-mapped.rds"
))

# plot counts for individual peak
pid <- "peak109"
pid_a <- pks_dt[peak == pid]$peak_adult
pid_g <- pks_dt[peak == pid]$peak_gastrula
pdt_a <- data.table(
    cell = colnames(adult_counts),
    count = adult_counts[match(pid_a, rownames(adult_counts)), ]
)
pdt_a <- merge.data.table(
    pdt_a, unique(meta_all[, .(cell, SEACell, cell_type, stage)]),
    by = "cell"
)
pdt_g <- data.table(
    cell = colnames(gastr_counts),
    count = gastr_counts[match(pid_g, rownames(gastr_counts)), ]
)
pdt_g <- merge.data.table(
    pdt_g, unique(meta_all[, .(cell, SEACell, cell_type, stage)]),
    by = "cell"
)
pdt_c <- rbindlist(list(pdt_a, pdt_g))
pdt_c[, cell_type := factor(cell_type, levels = names(ct_cols))]

gp_pc <- ggplot(pdt_c[count > 0], aes(cell_type, count)) +
    geom_boxplot(aes(color = cell_type), alpha = 0.5, outlier.color = NA) +
    geom_jitter(aes(fill = cell_type, shape = stage), width = 0.2, height = 0.1) +
    scale_color_manual(values = ct_cols) +
    scale_fill_manual(values = ct_cols) +
    scale_shape_manual(values = c("adult" = 21, "gastrula" = 24)) +
    theme(
        legend.position = "none",
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
        axis.ticks.x = element_blank(),
        axis.title.x = element_blank()
    ) +
    labs(title = sprintf("adult %s; gastrula %s", pid_a, pid_g))


# plot mapped counts for individual peak
pdt_a <- data.table(
    cell = colnames(adult_counts_map),
    count = adult_counts_map[match(pid, rownames(adult_counts_map)), ]
)
pdt_a <- merge.data.table(
    pdt_a, unique(meta_all[, .(cell, SEACell, cell_type, stage)]),
    by = "cell"
)
pdt_g <- data.table(
    cell = colnames(gastr_counts_map),
    count = gastr_counts_map[match(pid, rownames(gastr_counts_map)), ]
)
pdt_g <- merge.data.table(
    pdt_g, unique(meta_all[, .(cell, SEACell, cell_type, stage)]),
    by = "cell"
)
pdt_c <- rbindlist(list(pdt_a, pdt_g))
pdt_c[, cell_type := factor(cell_type, levels = names(ct_cols))]

gp_pc_m <- ggplot(pdt_c[count > 0], aes(cell_type, count)) +
    geom_boxplot(aes(color = cell_type), alpha = 0.5, outlier.color = NA) +
    geom_jitter(aes(fill = cell_type, shape = stage), width = 0.2, height = 0.1) +
    scale_color_manual(values = ct_cols) +
    scale_fill_manual(values = ct_cols) +
    scale_shape_manual(values = c("adult" = 21, "gastrula" = 24)) +
    theme(
        legend.position = "none",
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
        axis.ticks.x = element_blank(),
        axis.title.x = element_blank()
    ) +
    labs(title = sprintf("%s", pid))
    

# plot combined counts for individual peak
pdt_m <- data.table(
    cell = colnames(peaks_mat),
    count = peaks_mat[match(pid, rownames(peaks_mat)), ]
)
pdt_m <- merge.data.table(
    pdt_m, unique(meta_all[, .(cell, SEACell, cell_type, stage)]),
    by = "cell"
)
pdt_m[, cell_type := factor(cell_type, levels = names(ct_cols))]

gp_pm <- ggplot(pdt_m[count > 0], aes(cell_type, count)) +
    geom_boxplot(aes(color = cell_type), alpha = 0.5, outlier.color = NA) +
    geom_jitter(aes(fill = cell_type, shape = stage), width = 0.2, height = 0.1) +
    scale_color_manual(values = ct_cols) +
    scale_fill_manual(values = ct_cols) +
    scale_shape_manual(values = c("adult" = 21, "gastrula" = 24)) +
    theme(
        legend.position = "none",
        panel.grid.major.x = element_blank(),
        panel.grid.minor = element_blank(),
        axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
        axis.ticks.x = element_blank(),
        axis.title.x = element_blank()
    ) +
    labs(title = sprintf("%s", pid))

# save plot
pdf(
    file.path(plot_dir, sprintf("cell_counts_%s.pdf", pid)),
    width = 8, height = 5
)
gp_pc
gp_pc_m
gp_pm
dev.off()

```

Inspect coverage correlation 

```{r}
peaks_mat <- readRDS(file.path(
    adult_dir, "PeakMatrix", "Matrix-Adult-Gastrula-Peaks-mapped.rds"
))
idx <- sapply(colnames(peaks_mat), function(cb) {
    if (cb %in% rownames(proj_adult@cellColData)) {
        "adult"
    } else if (cb %in% rownames(proj_gastr@cellColData)) {
        "gastrula"
    }
})
idx <- unlist(idx)
cov_list <- tapply(names(idx), idx, function(x) {
    data.table(
        peak = rownames(peaks_mat),
        count = Matrix::rowMeans(peaks_mat[, x])
    )
})
names(cov_list) <- unique(idx)
cov_dt <- rbindlist(cov_list, idcol = "dataset")
cov_dt <- cov_dt[, count := mean(count), .(peak, dataset)]
cov_dt <- unique(cov_dt)
cov_dc <- dcast.data.table(cov_dt, peak ~ dataset, value.var = "count")
gp_cov <- ggplot(cov_dc, aes(adult, gastrula)) +
    geom_point(alpha = 0.2) +
    geom_abline() +
    coord_fixed() +
    scale_x_continuous(trans = "log10", breaks = c(0, 0.001, 0.01, 0.1, 1)) +
    scale_y_continuous(trans = "log10", breaks = c(0, 0.001, 0.01, 0.1, 1))
ggsave(
    file.path(plot_dir, "peaks_mean_counts_correlation.pdf"),
    width = 6, height = 6
)
```

Quantile normalize peaks matrix

```{r}
require(preprocessCore)
peaks_mat <- readRDS(file.path(
    adult_dir, "PeakMatrix", "Matrix-Adult-Gastrula-Peaks-mapped.rds"
))
peaks_norm_mat <- normalize.quantiles(as.matrix(peaks_mat))
peaks_norm_mat <- as(peaks_norm_mat, "dgCMatrix")
rownames(peaks_norm_mat) <- rownames(peaks_mat)
colnames(peaks_norm_mat) <- colnames(peaks_mat)
saveRDS(peaks_norm_mat, file.path(
    adult_dir, "PeakMatrix",
    "Matrix-Adult-Gastrula-Peaks-mapped-qnormalized.rds"
))
```

Inspect coverage correlation after normalization

```{r}
peaks_norm_mat <- readRDS(file.path(
    adult_dir, "PeakMatrix",
    "Matrix-Adult-Gastrula-Peaks-mapped-qnormalized.rds"
))
idx <- sapply(colnames(peaks_norm_mat), function(cb) {
    if (cb %in% rownames(proj_adult@cellColData)) {
        "adult"
    } else if (cb %in% rownames(proj_gastr@cellColData)) {
        "gastrula"
    }
})
idx <- unlist(idx)
cov_list <- tapply(names(idx), idx, function(x) {
    data.table(
        peak = rownames(peaks_norm_mat),
        count = Matrix::rowMeans(peaks_norm_mat[, x])
    )
})
names(cov_list) <- unique(idx)
cov_dt <- rbindlist(cov_list, idcol = "dataset")
cov_dt <- cov_dt[, count := mean(count), .(peak, dataset)]
cov_dt <- unique(cov_dt)
cov_dc <- dcast.data.table(cov_dt, peak ~ dataset, value.var = "count")
gp_cov <- ggplot(cov_dc, aes(adult, gastrula)) +
    geom_point(alpha = 0.2) +
    geom_abline() +
    coord_fixed() +
    scale_x_continuous(
        trans = "log10",
        breaks = c(0.0001, 0.001, 0.01, 0.1, 1)
    ) +
    scale_y_continuous(
        trans = "log10",
        breaks = c(0.0001, 0.001, 0.01, 0.1, 1)
    )
ggsave(
    file.path(plot_dir, "peaks_mean_counts_qnormalized_correlation.pdf"),
    width = 6, height = 6
)
```

Aggregate per SEACell

```{r}
# peaks counts
peaks_mat <- readRDS(file.path(
    adult_dir, "PeakMatrix", "Matrix-Adult-Gastrula-Peaks-mapped.rds"
))
peaks_norm_mat <- readRDS(file.path(
    adult_dir, "PeakMatrix",
    "Matrix-Adult-Gastrula-Peaks-mapped-qnormalized.rds"
))

# metadata
meta_all <- fread(file.path(
    data_dir,
    "Annotation_Adult_Gastrula_SEACell.tsv"
))

# aggregate
clusters_vector <- structure(meta_all$SEACell, names = meta_all$cell)
clusters_vector <- clusters_vector[colnames(peaks_norm_mat)]
fp_clusters <- accessibility_footprint(peaks_norm_mat, clusters_vector)
saveRDS(
    fp_clusters,
    file.path(
        data_dir,
        "Footprint_Adult_Gastrula_Peaks_SEACell_qnorm.rds"
    )
)

# sum
sum_clusters <- accessibility_summary(peaks_norm_mat, clusters_vector)
sum_clusters <- unique(sum_clusters)
saveRDS(
    sum_clusters,
    file.path(
        data_dir,
        "Sum_Adult_Gastrula_Peaks_SEACell_qnorm.rds"
    )
)


# adult peak counts
adult_counts <- readRDS(file.path(
    adult_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds"
))[, meta_all[stage == "adult"]$cell]
clusters_vector <- structure(meta_all$SEACell, names = meta_all$cell)
clusters_vector <- clusters_vector[colnames(adult_counts)]
fp_clusters <- accessibility_footprint(adult_counts, clusters_vector)
saveRDS(
    fp_clusters,
    file.path(
        data_dir,
        "Footprint_Adult_Peaks_SEACell.rds"
    )
)

# gastrula peak counts
gastr_counts <- readRDS(file.path(
    gastr_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds"
))[, meta_all[stage == "gastrula"]$cell]
clusters_vector <- structure(meta_all$SEACell, names = meta_all$cell)
clusters_vector <- clusters_vector[colnames(gastr_counts)]
fp_clusters <- accessibility_footprint(gastr_counts, clusters_vector)
saveRDS(
    fp_clusters,
    file.path(
        data_dir,
        "Footprint_Gastrula_Peaks_SEACell.rds"
    )
)

```

Aggregate per cell type

```{r}
# peaks counts
peaks_mat <- readRDS(file.path(
    adult_dir, "PeakMatrix", "Matrix-Adult-Gastrula-Peaks-mapped.rds"
))
peaks_norm_mat <- readRDS(file.path(
    adult_dir, "PeakMatrix",
    "Matrix-Adult-Gastrula-Peaks-mapped-qnormalized.rds"
))

# metadata
meta_all <- fread(file.path(
    data_dir,
    "Annotation_Adult_Gastrula_SEACell.tsv"
))

# aggregate
clusters_vector <- structure(
    paste(meta_all$stage, meta_all$cell_type, sep = "__"),
    names = meta_all$cell
)
clusters_vector <- clusters_vector[colnames(peaks_norm_mat)]
fp_clusters <- accessibility_footprint(peaks_norm_mat, clusters_vector)
saveRDS(
    fp_clusters,
    file.path(
        data_dir,
        "Footprint_Adult_Gastrula_Peaks_cell_type_qnorm.rds"
    )
)

sum_clusters <- accessibility_summary(peaks_norm_mat, clusters_vector)
sum_clusters <- unique(sum_clusters)
saveRDS(
    sum_clusters,
    file.path(
        data_dir,
        "Sum_Adult_Gastrula_Peaks_cell_type_qnorm.rds"
    )
)


# adult peak counts
adult_counts <- readRDS(file.path(
    adult_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds"
))[, meta_all[stage == "adult"]$cell]
clusters_vector <- structure(
    meta_all$cell_type,
    names = meta_all$cell
)
clusters_vector <- clusters_vector[colnames(adult_counts)]
fp_clusters <- accessibility_footprint(adult_counts, clusters_vector)
saveRDS(
    fp_clusters,
    file.path(
        data_dir,
        "Footprint_Adult_Peaks_cell_type.rds"
    )
)

# gastrula peak counts
gastr_counts <- readRDS(file.path(
    gastr_dir, "PeakMatrix", "Matrix-Peaks-mapped.rds"
))[, meta_all[stage == "gastrula"]$cell]
clusters_vector <- structure(
    meta_all$cell_type,
    names = meta_all$cell
)
clusters_vector <- clusters_vector[colnames(gastr_counts)]
fp_clusters <- accessibility_footprint(gastr_counts, clusters_vector)
saveRDS(
    fp_clusters,
    file.path(
        data_dir,
        "Footprint_Gastrula_Peaks_cell_type.rds"
    )
)
```

## Promoters classification

Classify scATAC peaks as promoters using 5' scRNA and H3K4me3 information.

### 5' scRNA peaks

```{r}
#| label: parse_5prime_peaks
#| ehco: FALSE
#| eval: FALSE
#| include: FALSE

fp_dir <- "/users/asebe/aelek/proj/scRNAseq_nvec_v5_5prime/scdb/ct.Nv5prime_K30_reord_rm/macs2/"
fp_ct_dir <- grep("\\.(plus|minus)", list.dirs(fp_dir), value = TRUE)
fp_cts <- unique(str_remove(basename(fp_ct_dir), "\\.(plus|minus)"))
fp_peaks_list <- sapply(fp_cts, function(x) {
  dirs <- file.path(fp_dir, sprintf("%s.%s", x, c("plus","minus")))
  peak_files <- list.files(dirs, pattern = "macs_peaks.filtered.narrowPeak", full.names = TRUE)
  peak_list <- lapply(peak_files, read_bed, format = "narrowPeak")
  peak_gr <- unlist(GRangesList(peak_list))
  seqlevels(peak_gr) <- seqlvl
  strand(peak_gr) <- ifelse(grepl("plus",peak_gr$name),"+","-")
  sort(peak_gr)
}, simplify = FALSE, USE.NAMES = TRUE)
saveRDS(fp_peaks_list, file.path("data/5prime_peaks.rds"))

```

Reduce set of per-cell type 5' peaks.

```{r}
fp_peaks_list <- readRDS(file.path("data/5prime_peaks.rds"))
fp_peaks <- unlist(GRangesList(fp_peaks_list))

# reduced peaks (aka bedtools)
# reduced_peaks <- GenomicRanges::reduce(fp_peaks, min.gapwidth=0L, with.revmap=TRUE, ignore.strand=FALSE) # 3952

# iteratively reduced peaks (aka ArchR)
reduced_it_peaks <- mta_reduce_peaks(fp_peaks, by = "qValue", decreasing = TRUE, ignore.strand = FALSE) # 234422

# trim
seqlevels(reduced_it_peaks) <- seqlevels(BSgenome.jaNemVect1.1.DToL.Assembly)
seqlengths(reduced_it_peaks) <- seqlengths(BSgenome.jaNemVect1.1.DToL.Assembly)
reduced_it_peaks_mid <- start(reduced_it_peaks) + (end(reduced_it_peaks)-start(reduced_it_peaks))/2
ranges(reduced_it_peaks) <- IRanges(reduced_it_peaks_mid, width=0)
reduced_it_trimmed_peaks <- promoters(reduced_it_peaks, upstream=125, downstream=125)
reduced_it_trimmed_peaks <- sort(reduced_it_trimmed_peaks)
# which(end(reduced_it_trimmed_peaks) > seqlengths(BSgenome.jaNemVect1.1.DToL.Assembly)[as.character(seqnames(reduced_it_trimmed_peaks))])

# save bed
bed_cols <- c("seqnames","start","end","peak","score","strand","signalValue","pValue","qValue")
reduced_it_trimmed_peaks_dt <- as.data.table(reduced_it_trimmed_peaks)
reduced_it_trimmed_peaks_dt[,peak:=paste0("peak",.I)]
reduced_it_trimmed_peaks_dt <- reduced_it_trimmed_peaks_dt[,..bed_cols]
fwrite(reduced_it_trimmed_peaks_dt, file.path(pks_dir, "5prime_reduced_peaks.bed"), sep="\t", col.names = FALSE)
```

Assign peaks to cell types.

```{r}
# reduced scRNA peaks
peaks <- fread(file.path(pks_dir, "5prime_reduced_peaks.bed"))
setnames(peaks, c("seqnames","start","end","peak","score","strand","signalValue","pValue","qValue"))
peaks_gr <- makeGRangesFromDataFrame(peaks, keep.extra.columns = TRUE)

# per cell type scRNA peaks
fp_peaks_list <- readRDS(file.path(pks_dir, "5prime_peaks.RDS"))
fp_peaks <- sort(unlist(GRangesList(fp_peaks_list)))
fp_peaks$cell_type <- names(fp_peaks)
fp_peaks$peak <- NULL
fp_peaks$name <- NULL

# overlap
ovl <- findOverlaps(query = peaks_gr, subject = fp_peaks, minoverlap = 1, ignore.strand = FALSE)

# reduced peaks overlapping per cell type scRNA peaks
peaks_red_gr <- peaks_gr[queryHits(ovl)]
mcols(peaks_red_gr) <- cbind(mcols(peaks_red_gr)[,1,drop=FALSE], mcols(fp_peaks[subjectHits(ovl)]))

# save
peaks_red_dt <- as.data.table(peaks_red_gr)
fwrite(peaks_red_dt, file.path(pks_dir, "5prime_reduced_peaks_cell_type_assignment.tsv,gz"), sep="\t", col.names = TRUE)
```

Assign peaks to genes

```{r}
# peaks
peaks <- fread(file.path(pks_dir, "5prime_reduced_peaks.bed"))
setnames(peaks, c("seqnames","start","end","name","score","strand","signalValue","pValue","qValue"))
peaks <- peaks[seqnames!="ENA|OW052000|OW052000.1"]
peaks_gr <- makeGRangesFromDataFrame(peaks, keep.extra.columns = TRUE)

# all genes
genes_gr <- read_gtf("genome/Nvec_v4_merged_annotation_sort.gtf.gz")
genes_gr <- genes_gr[genes_gr$feature=="transcript"]
genes_gr$name <- str_extract(genes_gr$attribute, '(?<=transcript_id ").+(?="; gene_id)')
genes_gr$type <- "transcript" 

# non-expressed genes to remove
scdb_init("../../../scRNAseq_nvec_v4/scdb", force_reinit = TRUE)
mat <- scdb_mat("Nvec")
g_umi <- rowSums(mat@mat)
exclude_genes <- names(which(g_umi<10))
length(exclude_genes) # 2058

# assign
assign <- mta_match_peaks_to_genes(
	gff_object = genes_gr, 
	peak_object = peaks_gr, 
	index_object = "genome/Nvec_vc1.1_gDNA.fasta.fai", 
	list_genes = NULL, 
	feature_to_match = "transcript", 
	feature_field = "name", 
	exclude_genes = NULL,     # genes to exclude from gff file (can be nonexpressed genes, for example)
	max_tss_dist = 10000,    # peaks beyond this distance should never be assigned to a particular gene
	min_overlap = 0, # min overlap between a peak and a gene/gene extended region to link them
	max_gap = 1,
	promoter_upstream = 200, # used to define promoters around TSS: peaks within this region get automatically assigned to the relevant gene
	promoter_downstream = 50,
	promoter_object = NULL
)
setDT(assign)
setnames(assign, "chr", "seqnames")
assign[,seqnames:=factor(seqnames,levels=seqlvl)]
setorder(assign, seqnames, start, end)

# keep only peaks in-strand
genes_strands <- structure(as.vector(strand(genes_gr)), names=genes_gr$name)
assign[,gene_strand:=genes_strands[gene]]
assign <- assign[gene_strand==strand]

# save
fwrite(assign, file.path(pks_dir, "5prime_reduced_peaks_gene_assignment.tsv.gz"), sep="\t", col.names = TRUE)
```

Combine and add unique peaks info.

```{r}
# combine
assign_gene <- fread(file.path(pks_dir, "5prime_reduced_peaks_gene_assignment.tsv.gz"))
assign_ct <- fread(file.path(pks_dir, "5prime_reduced_peaks_cell_type_assignment.tsv.gz"))
scRNA_peaks <- merge.data.table(assign_ct, assign_gene, by = c("seqnames", "start", "end", "strand", "peak"), all = TRUE)

# label order of peaks (1 == most upstream)
scRNA_peaks[,seqnames:=factor(seqnames,levels=seqlvl)]
setorder(scRNA_peaks, seqnames, start, end)
scRNA_peaks <- scRNA_peaks[, order_5prime_cell_type:=1:.N, .(gene,cell_type)][strand=="-", order_5prime_cell_type:=rev(1:.N), .(gene,cell_type)]

# add broad cell type
bct_pattern <- paste(c("cnidocyte","gastro","^muscle","digestive_filaments","^precursors","epidermis","neuron_\\d+","gland"), collapse="|")
scRNA_peaks[,broad_cell_type:=str_extract(cell_type, bct_pattern)]
scRNA_peaks[grep("neuron",cell_type), broad_cell_type:=paste0("neuron_",ifelse(as.integer(str_extract(cell_type,"\\d+"))<28, "GATA_Islet", "Pou4_FoxL2"))]

# get unique peaks
unique_peaks_list <- unique(scRNA_peaks[,.(peak,cell_type)])[,.N,peak][N==1]$peak
unique_peaks <- scRNA_peaks[peak %in% unique_peaks_list]
fwrite(unique_peaks,file.path(pks_dir,"5prime_reduced_peaks_cell_unique_type.tsv.gz"), sep="\t", col.names = TRUE)
unique_peaks_list <- unique(scRNA_peaks[,.(peak,broad_cell_type)])[,.N,peak][N==1]$peak
unique_peaks_broad <- scRNA_peaks[peak %in% unique_peaks_list]
fwrite(unique_peaks_broad,file.path(pks_dir,"5prime_reduced_peaks_unique_broad_cell_type.tsv.gz"), sep="\t", col.names = TRUE)

# load unique peaks
unique_peaks <- fread(file.path(pks_dir,"5prime_reduced_peaks_unique_cell_type.tsv.gz"))
unique_peaks <- unique(unique_peaks[,.(seqnames,start,end,strand,peak,cell_type)])
setnames(unique_peaks, "cell_type", "cell_type_unique")

unique_peaks_broad <- fread(file.path(pks_dir,"5prime_reduced_peaks_unique_broad_cell_type.tsv.gz"))
unique_peaks_broad <- unique(unique_peaks_broad[,.(seqnames,start,end,strand,peak,broad_cell_type)])
setnames(unique_peaks_broad, "broad_cell_type", "broad_cell_type_unique")

scRNA_peaks <- merge.data.table(scRNA_peaks, unique_peaks, by = c("seqnames","start","end","strand","peak"), all.x = TRUE)
scRNA_peaks <- merge.data.table(scRNA_peaks, unique_peaks_broad, by = c("seqnames","start","end","strand","peak"), all.x = TRUE)
scRNA_peaks[is.na(cell_type_unique), cell_type_unique:=""]
scRNA_peaks[is.na(broad_cell_type_unique), broad_cell_type_unique:=""]
setcolorder(scRNA_peaks, c("seqnames","start","end","strand","peak","width","score","signalValue","pValue","qValue","cell_type","cell_type_unique","broad_cell_type","broad_cell_type_unique","gene","dist_to_tss","is_promoter","is_intergenic"))

# save
fwrite(scRNA_peaks, file.path(pks_dir, "5prime_reduced_peaks_cell_type_gene_assignment.tsv.gz"), sep="\t", col.names = TRUE)
```

### ChIP peaks


Load ChIP peaks.

```{r}
# helper function
source("scripts/scatac_helper_functions.R")

# ChIP peaks
chip_peaks <- read_bed(
  "data/Nvec_H3K4me3_250124_peaks.narrowPeak",
  format = "bed",
  as_GRanges = TRUE
)

# ChIP summits 
chip_summits <- read_bed(
  "data/Nvec_H3K4me3_250124_summits.bed",
  format = "bed",
  as_GRanges = TRUE
)
```

Assign ChiP peaks to genes

```{r}
# genes
genes <- read_gtf(
  "genome/Nvec_v4_merged_annotation_sort.gtf.gz",
  as_GRanges = TRUE
)
genes <- genes[genes$feature == "transcript"]
genes$gene <- str_extract(genes$attribute, '(?<=transcript_id ").+(?="; gene_id)')
genes$type <- "transcript" 

# non-expressed genes to remove
scdb_init("../../scRNAseq_nvec_v4/scdb", force_reinit = TRUE)
mat <- scdb_mat("Nvec")
g_umi <- rowSums(mat@mat)
exclude_genes <- names(which(g_umi<10))
writeLines(exclude_genes, file.path(pks_dir, "blacklist_genes.txt"))
length(exclude_genes) # 2058

# assign
assign <- mta_match_peaks_to_genes(
	gff_object = genes,
	peak_object = chip_peaks,
	index_object = "genome/Nvec_vc1.1_gDNA.fasta.fai",
	list_genes = NULL,
	feature_to_match = "transcript",
	feature_field = "gene",
	exclude_genes = exclude_genes,
	max_tss_dist = 500,
	min_overlap = 0,
	max_gap = 1,
	promoter_upstream = 200,
	promoter_downstream = 50,
	promoter_object = NULL
)
setDT(assign)
setnames(assign, "chr", "seqnames")
assign[,seqnames := factor(seqnames, levels = seqlevels(BSgenome.jaNemVect1.1.DToL.Assembly))]
setorder(assign, seqnames, start, end)

# nuber of H3K4me3 peaks per gene
assign[, peaks := .N, gene]

# peak summit distance to TSS
tss <- promoters(genes, upstream = 0, downstream = 1)
assign$summit_dist_to_tss <- distance(
  chip_summits[match(assign$peak,chip_summits$name)],
  tss[match(assign$gene,tss$gene)]
)

# peak summit in gene body
ovl <- findOverlaps(
  chip_summits[match(assign$peak,chip_summits$name)],
  genes[match(assign$gene,genes$gene)],
  ignore.strand=TRUE
)
ovl <- ovl[queryHits(ovl)==subjectHits(ovl)]
assign$summit_in_gene_body <- FALSE
assign$summit_in_gene_body[queryHits(ovl)] <- TRUE
assign$summit_in_gene_body <- factor(assign$summit_in_gene_body, levels=c(TRUE,FALSE))

# for peaks with multiple assigned K4me3 peaks, keep the one in gene body, then closest to TSS
assign <- assign[order(gene,summit_in_gene_body,summit_dist_to_tss)]
assign <- assign[,.SD[1],gene]

# for genes without K4me3 assigned to them, look for orphan H3K4me3 peaks
orphan_genes <- genes[!genes$gene %in% assign$gene] 
orphan_peaks <- chip_peaks[!chip_peaks$name %in% assign$peak]
orphan_assign <- mta_match_peaks_to_genes(
	gff_object = orphan_genes, 
	peak_object = orphan_peaks, 
	index_object = "genome/Nvec_vc1.1_gDNA.fasta.fai", 
	list_genes = NULL, 
	feature_to_match = "transcript", 
	feature_field = "gene", 
	exclude_genes = exclude_genes,
	max_tss_dist = 1e6,
	min_overlap = 0,
	max_gap = 1,
	promoter_upstream = 200,
	promoter_downstream = 50,
	promoter_object = NULL
)
setDT(orphan_assign)
setnames(orphan_assign, "chr", "seqnames")
orphan_assign[,seqnames:=factor(seqnames,levels = seqlevels(BSgenome.jaNemVect1.1.DToL.Assembly))]
setorder(orphan_assign, seqnames, start, end)

# nuber of H3K4me3 peaks per gene
orphan_assign[, peaks := .N, gene]

# peak summit distance to TSS
orphan_assign$summit_dist_to_tss <- distance(
  peak_summits[match(orphan_assign$peak,peak_summits$name)],
  tss[match(orphan_assign$gene,tss$gene)]
)

# peak summit in gene body
ovl <- findOverlaps(
  peak_summits[match(orphan_assign$peak,peak_summits$name)],
  genes[match(orphan_assign$gene,genes$gene)],
  ignore.strand=TRUE
)
ovl <- ovl[queryHits(ovl)==subjectHits(ovl)]
orphan_assign$summit_in_gene_body <- FALSE
orphan_assign$summit_in_gene_body[queryHits(ovl)] <- TRUE
orphan_assign$summit_in_gene_body <- factor(orphan_assign$summit_in_gene_body, levels=c(TRUE,FALSE))

# for peaks with multiple orphan_assigned K4me3 peaks, keep the one in gene body, then closest to TSS
orphan_assign <- orphan_assign[order(gene,summit_in_gene_body,summit_dist_to_tss)]
orphan_assign <- orphan_assign[,.SD[1],gene]

# combine all assigned peaks
chip_assigned <- rbindlist(list(assign,orphan_assign))
chip_assigned[,seqnames:=factor(seqnames,levels=seqlvl)]
setorder(chip_assigned, seqnames, start, end)

# save 
fwrite(
  chip_assigned,
  file.path(pks_dir, "ChIP_H3K4me3_peaks_gene_assignment.tsv.gz"),
  sep = "\t",
  col.names = TRUE
)
```

### scATAC peaks

Load genes.

```{r}
source("scripts/scatac_helper_functions.R")
genes <- read_gtf(
  "genome/Nvec_v4_merged_annotation_sort.gtf.gz",
  as_GRanges = TRUE
)
genes <- genes[genes$feature == "transcript"]
genes$gene <- str_extract(genes$attribute, '(?<=transcript_id ").+(?="; gene_id)')
genes$type <- "transcript" 
```

Load mapped scATAC peaks assigned to genes.

```{r}
# peaks
pks_dt <- fread(file.path(
  pks_dir, "Peaks_cell_type_mapped.tsv"
))

# peaks assignment to genes
pks_gen_dt <- fread(file.path(
  pks_dir, "Peaks_cell_type_mapped_gene_assignment_coaccess.tsv.gz"
))
pks_gen_dt[, score := NULL] # this will come from cell type peaks assignmente
```

Load cell type peaks from adult and gastrula and map to common peak ids.

```{r}
# adult peaks
peaks_adult <- fread(file.path(adult_dir, "ArchRProj", "Peaks", "scATAC_reduced_peaks_broad_cell_type_assignment_filtered.tsv"))

query_gr <- makeGRangesFromDataFrame(
    peaks_adult[, .(seqnames, start, end, peak, broad_cell_type, score)], 
    keep.extra.columns = TRUE
)
subject_gr <- makeGRangesFromDataFrame(
    pks_dt, keep.extra.columns = TRUE
)
ovl <- findOverlaps(
    query = query_gr, subject = subject_gr,
    minoverlap = 50
)
pks_cts <- peaks_adult[queryHits(ovl)]$broad_cell_type
pks_sco <- peaks_adult[queryHits(ovl)]$score
pks_adult <- pks_dt[subjectHits(ovl)]
pks_adult$broad_cell_type <- pks_cts
pks_adult$score <- pks_sco
pks_adult <- unique(pks_adult)

# gastrula peaks
peaks_gastr <- fread(file.path(gastr_dir, "ArchRProj", "Peaks", "scATAC_reduced_peaks_cell_type_assignment.tsv"))
peaks_gastr <- merge.data.table(peaks_gastr, bct_maps, by = "cell_type", all.x = TRUE)
peaks_gastr[, score := max(score), .(seqnames, start, end, peak, broad_cell_type)]
peaks_gastr[, cell_type := NULL]
peaks_gastr <- unique(peaks_gastr)

query_gr <- makeGRangesFromDataFrame(
    peaks_gastr[, .(seqnames, start, end, peak, broad_cell_type, score)], 
    keep.extra.columns = TRUE
)
subject_gr <- makeGRangesFromDataFrame(
    pks_dt, keep.extra.columns = TRUE
)
ovl <- findOverlaps(
    query = query_gr, subject = subject_gr,
    minoverlap = 50
)
pks_cts <- peaks_gastr[queryHits(ovl)]$broad_cell_type
pks_sco <- peaks_gastr[queryHits(ovl)]$score
pks_gastr <- pks_dt[subjectHits(ovl)]
pks_gastr$broad_cell_type <- pks_cts
pks_gastr$score <- pks_sco
pks_gastr <- unique(pks_gastr)


# combine and save
pks_cts_dt <- rbindlist(list(pks_adult, pks_gastr))
stopifnot(nrow(pks_cts_dt[!broad_cell_type %in% broad_cell_types]) == 0)
pks_cts_dt[, broad_cell_type := factor(broad_cell_type, levels = broad_cell_types)]
pks_cts_dt[, stage := ifelse(broad_cell_type %in% adult_broad_cell_types, "adult", "gastrula")]
setorder(pks_cts_dt, seqnames, start, end, broad_cell_type)
fwrite(
  pks_cts_dt, 
  file.path(pks_dir, "Peaks_cell_type_mapped_cell_type_assignment.tsv.gz"), 
  sep = "\t"
)
```

Load mapped filtered cell type peaks.

```{r}
pks_cts_dt <- fread(file.path(pks_dir, "Peaks_cell_type_mapped_cell_type_assignment.tsv.gz"))
```

Comibine peaks assignments to genes and cell types.

```{r}
# combine peaks assignments
scatac_peaks <- merge.data.table(
  pks_gen_dt, pks_cts_dt, 
  by = intersect(colnames(pks_gen_dt), colnames(pks_cts_dt)), 
  all = FALSE, sort = FALSE, allow.cartesian = TRUE
)
scatac_peaks <- scatac_peaks[gene != ""]

# rename broad cell type column
setnames(scatac_peaks, "broad_cell_type", "cell_type")
sort(unique(scatac_peaks$cell_type))
```

Load scRNA peaks 

```{r}
# all scRNA peaks
scrna_peaks <- fread(file.path(pks_dir, "5prime_reduced_peaks_cell_type_gene_assignment.tsv.gz"))
scrna_peaks <- scrna_peaks[seqnames!=""]

# parse peaks
scrna_peaks <- unique(scrna_peaks[,.(seqnames, start, end, strand, peak, broad_cell_type, gene)])
setnames(scrna_peaks,"broad_cell_type","cell_type")

# deal with different annotation of gastrodermis
scrna_peaks <- rbindlist(list(
  scrna_peaks[!grepl("gastro", cell_type),],
  copy(scrna_peaks[grepl("gastro", cell_type)])[, cell_type := "gastro_parietal_muscle"],
  copy(scrna_peaks[grepl("gastro", cell_type)])[, cell_type := "gastro_circular_muscle"],
  copy(scrna_peaks[grepl("gastro", cell_type)])[, cell_type := "gastro"]
))

# we don't have info for gastrula cell types, but oh well...
setdiff(sort(unique(scatac_peaks$cell_type)), sort(unique(scrna_peaks$cell_type)))
```

Load ChIP peaks assigned to genes

```{r}
chip_peaks <- fread(
  file.path(pks_dir, "ChIP_H3K4me3_peaks_gene_assignment.tsv.gz")
)
```

Classify promoters

```{r}
class_cols <- c(
  "scATAC peaks" = "#9142eb",
  "5' scRNA" = "#e66101",
  "H3K4me3" = "#e6ab02",
  "SP" = "#2166ac",
  "CP" = "#053061",
  "AP" = "#4393c3"
)

# classify peaks
res_list_adult <- mta_class_promoters(
  scatac_peaks = scatac_peaks[stage == "adult"],
  scrna_peaks = scrna_peaks,
  chip_peaks = chip_peaks,
  pairs_dt = pairs_dt,
  genes = genes,
  max_dist_to_tss = 20000,
  class_cols = class_cols,
  verbose = TRUE
)

# save
saveRDS(
  res_list_adult,
  file.path(pks_dir, "annotaton_promoters_adult.rds")
)


# classify peaks
res_list_gastrula <- mta_class_promoters(
  scatac_peaks = scatac_peaks[stage == "gastrula"],
  scrna_peaks = NULL,
  chip_peaks = NULL,
  pairs_dt = pairs_dt,
  genes = genes,
  max_dist_to_tss = 20000,
  class_cols = class_cols,
  verbose = TRUE
)

# save
saveRDS(
  res_list_gastrula,
  file.path(pks_dir, "annotaton_promoters_gastrula.rds")
)

```

Plot the decision tree

```{r}
# decision tree
for (stage in c("adult", "gastrula")) {
  res_list <- readRDS(file.path(pks_dir, sprintf("annotaton_promoters_%s.rds", stage)))
  gg1 <- res_list$tree_graph
  gg2 <- ggraph(
      res_list$tbl_graph,
      layout = 'dendrogram',
      circular = FALSE
    ) +
    geom_edge_elbow(
      aes(color=decision)
    ) +
    geom_node_point(
      aes(size = node_N, fill = class),
      color = "black", shape = 21
    ) + 
    scale_size_continuous(range = c(1, 30), guide="none") +
    scale_fill_manual(values = class_cols) +
    scale_edge_colour_manual(values = c("YES" = "#31a354", "NO" = "#d7191c")) +
    geom_node_text(
      aes(label = sprintf("%.0f%%\n(%i)", node_perc*100, node_N)),
      repel = FALSE
    ) +
    geom_node_text(
      aes(label = str_wrap(node, width = 25)), nudge_y = -0.35,
      repel = FALSE
    ) +
    guides(fill = guide_legend(override.aes = list(size=5))) +
    theme_void()

  pdf(
    file.path(fig_dir, sprintf("annotaiton_promoters_decison_tree_%s.pdf", stage)),
    width = 18, height = 8
  )
  print(gg1); print(gg2)
  dev.off()
}
```

Save promoters decision tree annotations.

```{r}
# gene promoters annotation
peaks_res <- rbindlist(sapply(c("adult", "gastrula"), function(stage) {
  res_list <- readRDS(file.path(pks_dir, sprintf("annotaton_promoters_%s.rds", stage)))
  unique(res_list$annotaiton[,.(gene, peak, cell_type, promoter)])
}, simplify = FALSE, USE.NAMES = TRUE), idcol = "stage")

# sanity check that one gene only gets one type of promoter
stopifnot(
  nrow(
    unique(peaks_res[, .(gene, stage, promoter)][promoter != "NO"])[, .N, .(gene, stage)][N>1]
  ) == 0
)

# sanity check that all promoters open in all cell types are called CP
peaks_res_gastr <- unique(
  peaks_res[stage=="gastrula" & promoter != "NO"][, .(gene, peak, promoter, cell_type)]
)[, n_cell_types := .N, .(gene, peak, promoter)]
n_cts_gastr <- max(peaks_res_gastr$n_cell_types)
peaks_res_gastr[n_cell_types == 6][, .N, promoter]

peaks_res_adult <- unique(
  peaks_res[stage=="adult" & promoter != "NO"][, .(gene, peak, promoter, cell_type)]
)[, n_cell_types := .N, .(gene, peak, promoter)]
n_cts_adult <- max(peaks_res_adult$n_cell_types)
peaks_res_adult[n_cell_types == n_cts_adult][, .N, promoter]

# ad-hoc fix:
# if a gene is SP in gastrula in 5 out of 6 cell types, and is a CP in adult
# then it is likely also CP in gastrula
cp_adult <- unique(peaks_res_adult[promoter == "CP", .(gene, peak, promoter)])
setnames(cp_adult, "promoter", "promoter_adult")
sp_gastr <- unique(peaks_res_gastr[n_cell_types == n_cts_gastr-1, .(gene, peak, promoter)])
setnames(sp_gastr, "promoter", "promoter_gastrula")
reassign <- merge.data.table(sp_gastr, cp_adult, by = c("gene", "peak"))
reassign <- reassign[promoter_gastrula != promoter_adult]
for (i in seq_along(unique(reassign$gene))) {
  # if (i %% 100 == 0) print(sprintf("%i/%i", i, length(unique(reassign$gene))))
  g <- unique(reassign$gene)[i]
  p <- reassign[gene == g]$peak
  peaks_res[gene == g, promoter := "NO"]
  peaks_res[gene == g & peak == p, promoter := "CP"]
}

# ad-hoc fix:
# if a gene is SP in gastrula in 5 out of 6 cell types, regardless of promoter in adult
# it is more likely to be a CP
pt_gastr <- unique(peaks_res_gastr[n_cell_types == n_cts_gastr-1 & promoter != "CP", .(gene, peak, promoter, cell_type)])
# check in which cell type is it not open
pt_gastr <- unique(pt_gastr[, missing_cell_type := setdiff(gastrula_broad_cell_types, .SD$cell_type),.( gene, peak)][, .(gene, peak, missing_cell_type)])
pt_gastr[, .N, missing_cell_type][order(N)]
# update assignment
for (i in seq_along(unique(pt_gastr$gene))) {
  # if (i %% 100 == 0) print(sprintf("%i/%i", i, length(unique(pt_gastr$gene))))
  g <- unique(pt_gastr$gene)[i]
  p <- pt_gastr[gene == g]$peak
  peaks_res[stage == "gastrula" & gene == g, promoter := "NO"]
  peaks_res[stage == "gastrula" & gene == g & peak == p, promoter := "CP"]
}

# check that all cell types are valid
stopifnot(all(peaks_res$cell_type %in% broad_cell_types))
peaks_res[, cell_type := factor(cell_type, levels = broad_cell_types)]

# order peaks
lvl_peaks <- paste0(
  "peak",
  sort(as.integer(str_remove(unique(peaks_res$peak), "peak")))
)
peaks_res[, peak := factor(peak, levels = lvl_peaks)]
setorder(peaks_res, gene, peak, cell_type)
setcolorder(peaks_res, c("gene", "peak", "promoter", "cell_type"))

# save
fwrite(peaks_res, file.path(pks_dir, "annotaton_promoters_decison_tree.tsv.gz"))

# all cell types per gene in one row
peaks_annotation <- copy(peaks_res)
peaks_annotation[, cell_types := paste(unique(.SD$cell_type), collapse = ","), gene]
peaks_annotation[, cell_type := NULL]
peaks_annotation <- unique(peaks_annotation)

# save
fwrite(
  peaks_annotation,
  file.path(pks_dir, "annotaton_peaks.tsv.gz"),
  sep="\t", col.names = TRUE
)

# promoters only
genes_promoters <- copy(peaks_annotation)[, peak := NULL]
genes_promoters <- unique(genes_promoters)
genes_promoters <- genes_promoters[promoter != "NO"]

# save
fwrite(
  genes_promoters,
  file.path(pks_dir, "annotaton_promoters.tsv.gz"),
  sep="\t", col.names = TRUE
)

```

Add expression info to peak/promoters table.

```{r}
# load peaks classification
peaks_res <- fread(file.path(pks_dir, "annotaton_promoters_decison_tree.tsv.gz"))

# load gene expression info
gen_fc <- readRDS(file.path("results", "Metacells", "cell_type", "gene_expression_fc_genes_exp_FC2_acc_FC4_spearman.rds"))
gen_fc <- melt.data.table(
    as.data.table(gen_fc, keep.rownames = "gene"),
    id.vars = "gene",
    variable.name = "cell_type",
    value.name = "gene_expression_fc"
)
gen_umi <- readRDS(file.path("results", "Metacells", "cell_type", "gene_expression_umifrac_genes_exp_FC2_acc_FC4_spearman.rds"))
gen_umi <- melt.data.table(
    as.data.table(gen_umi, keep.rownames = "gene"),
    id.vars = "gene",
    variable.name = "cell_type",
    value.name = "gene_expression_umifrac"
)
gen_fc <- merge.data.table(gen_fc, gen_umi, by = c("gene", "cell_type"))
gen_fc[cell_type == "neuronal_gastrula", cell_type := "neuronal"]
gen_fc <- merge.data.table(gen_fc, bct_maps, by = "cell_type", all.x = TRUE)
gen_fc[!cell_type %in% peaks_res$cell_type, cell_type := broad_cell_type]
gen_fc[, broad_cell_type := NULL]
gen_fc[, gene_expression_fc := max(gene_expression_fc), .(gene, cell_type)]
gen_fc <- unique(gen_fc)
stopifnot(length(peaks_res[,.N,cell_type][!cell_type %in% gen_fc$cell_type]$cell_type) == 0)

# tau index
tau_dt <- unique(gen_fc[, .(gene, cell_type, gene_expression_fc, gene_expression_umifrac)])
tau_dt[, n_cell_types := .N, gene]
tau_dt[, gene_tau_index := (sum(1 - gene_expression_umifrac/max(gene_expression_umifrac)) / (n_cell_types - 1)), gene]
tau_dt[, n_cell_types := NULL]

# add gene expression info to peaks table
peaks_res <- merge.data.table(peaks_res, tau_dt, by = c("gene", "cell_type"), all.x = TRUE)

# add coordinates
peaks_res <- merge.data.table(
  unique(pks_dt[, .(seqnames, start, end, peak, id)]), 
  peaks_res,
  by = "peak",
  all.y = TRUE, sort = FALSE
)

# save
fwrite(peaks_res, file.path(pks_dir, "Peaks_cell_type_promoter_annotation.tsv.gz"), sep = "\t")
```

## Peak types summary

```{r}
# load promoters classification
peaks_res <- fread(file.path(pks_dir, "Peaks_cell_type_promoter_annotation.tsv.gz"))
pks_dt <- unique(peaks_res[, .(peak, cell_type, stage, gene, gene_expression_fc, gene_tau_index, promoter)])

# load promoters per gene
peaks_annotation <- fread(file.path(pks_dir, "annotaton_peaks.tsv.gz"))

# get data for promoters peaks only
pro_cols <- c(
  "CP" = "#053061",
  "SP" = "#2166ac",
  "AP" = "#4393c3",
  "NO" = "#319854"
)
pro_dt <- peaks_res[promoter != "NO"]
pro_dt[, promoter := str_extract(promoter, "CP|SP|AP|NO")]
pro_dt[, promoter := factor(promoter, levels = names(pro_cols))]
setorder(pro_dt, gene, promoter)
pro_dt <- pro_dt[, .SD[1], .(gene, stage)]
setnames(pro_dt, "promoter", "gene_promoter")

# gene lists for functional enrichment
gl_fns <- list.files(
  ann_dir, pattern = ".*Nvec_genes.curated_DToL_names.tsv", full.names = TRUE
)
names(gl_fns) <- str_remove(basename(gl_fns), "\\.Nvec_genes.curated_DToL_names.tsv")
gl_dt <- rbindlist(sapply(names(gl_fns), function(x) {
  fread(gl_fns[x], header = TRUE)[, 1]
}, simplify = FALSE, USE.NAMES = TRUE), idcol = "genelist")
gl_dt <- unique(gl_dt[, .(genelist, gene)])
gl_dt <- gl_dt[!genelist %in% c("neu")]

# supplement with go
go_annotations <- readRDS(file.path(ann_dir, "Nvec_ensembl.GO.rds"))
go_map_dt <- data.table(
    gene = rep(names(go_annotations), sapply(go_annotations, length)),
    category = unlist(go_annotations)
)
selected_gos <- list(
  ion = c(
    "intracellular calcium ion homeostasis" = "GO:0055074",
    "monoatomic ion transport" = "GO:0006811",
    "bicarbonate transport" = "GO:0015701"
  ),
  cal = c(
    "metabolic process" = "GO:0008152",
    "catalytic activity" = "GO:0003824",
    "lyase activity" = "GO:0016829"
  )
)
gl_add <- rbindlist(sapply(names(selected_gos), function(x) {
  unique(go_map_dt[category %in% selected_gos[[x]]])
}, simplify = FALSE, USE.NAMES = TRUE), idcol = "genelist")
gl_dt <- rbindlist(list(gl_dt, gl_add), fill = TRUE)

# add full names
gl_full_names <- c(
  "cal" = "metabolism",
  "ion" = "ion transport",
  "adh" = "adhesion",
  "sig" = "signaling",
  "tfs" = "TFs",
  "chr" = "chromatin",
  "rbp" = "RNA BPs"
)
gl_dt[, genelist_full := gl_full_names[genelist]]
gl_dt[, genelist_full := factor(genelist_full, levels = gl_full_names)]

```

### Types of promoters

```{r}
# colors
pe_cols <- c(
  "YES" = "#4d8cc4",
  "NO"  = "#319854"
)
pro_cols <- c( # class_cols
  "SP" = "#2166ac",
  "CP" = "#053061",
  "AP" = "#4393c3",
  "NO" = "#319854"
)
ovl_cols <- c(
    "promoter"         = "#4393c3",
    "intergenic"       = "#fcec73",
    "5'UTR"            = "#f7fcb9",
    "3'UTR"            = "#d9f0a3",
    "UTR"              = "#d9f0b2",
    "first_intron"     = "#41ab5d",
    "other_introns"    = "#238443",
    "intron"           = "#006837",
    "CDS"              = "#004529",
    "unannotated_gene" = "#7a9695"
)

```

Pie chart of promoters and non-promoters, and promoter classes

```{r}
for (st in c("adult", "gastrula", "all")) {

  if (st == "all") {
    pa <- peaks_annotation
  } else {
    pa <- peaks_annotation[stage == st]
  }

  # promoters vs non-promoters
  pp <- unique(pa[, .(peak, promoter)])
  pp[promoter != "NO", promoter := "YES"]
  pp[, promoter := factor(promoter, levels = c("YES", "NO"))]
  setorder(pp, "peak", "promoter")
  pp <- pp[, .SD[1], peak]
  pps <- pp[, .N, promoter][,prop := N / sum(N)]
  ppp <- ggplot(pps, aes("", N, fill = promoter)) +
    geom_bar(stat="identity", width=1, color="white") +
    coord_polar("y", start=0) +
    scale_fill_manual(values = pe_cols) +
    geom_text(
      aes(label = scales::percent(prop), x = 1.1),
      position = position_stack(vjust = 0.5),
      color = "black"
    ) +
    theme_void() 


  # promoter classes
  pp <- unique(pa[promoter != "NO", .(gene, promoter)])
  pp[grep("AP", promoter), promoter := "AP"]
  gps <- pp[, .N, promoter][, prop := N / sum(N)]
  gps[, promoter := factor(promoter, levels = names(pro_cols))]
  gpp <- ggplot(gps, aes("", N, fill=promoter)) +
    geom_bar(stat="identity", width=1, color="white") +
    coord_polar("y", start=0) +
    scale_fill_manual(values = pro_cols) +
    geom_text(
      aes(label = scales::percent(prop), x = 1.1),
      position = position_stack(vjust = 0.5),
      color = "black"
    ) +
    theme_void() 


  ggsave(
    file.path(fig_dir, sprintf("annotaiton_promoters_pie_%s.pdf", st)),
    ppp + gpp,
    width = 6, height = 3
  )

}

```

### Genomic regions overlap

```{r}
# gene annotation
genes_gr <- read_gtf("genome/Nvec_v4_merged_annotation_sort.gtf.gz")
genes_gr$name <- str_extract(genes_gr$attribute, '(?<=transcript_id ").+(?="; gene_id)')

# define regions
promoters_gr <- promoters(genes_gr, upstream = 200, downstream = 50)

transcripts_gr <- genes_gr[genes_gr$feature=="transcript"]

exons_gr <- genes_gr[genes_gr$feature=="exon"]

cds_gr <- genes_gr[genes_gr$feature=="CDS"]

genes_dt <- as.data.table(genes_gr)
genes_dt[strand=="+",feature_id:=1:.N,.(name,feature)]
genes_dt[strand=="-",feature_id:=.N:1,.(name,feature)]
genes_dt[strand=="+",feature_id_rev:=.N:1,.(name,feature)]
genes_dt[strand=="-",feature_id_rev:=1:.N,.(name,feature)]

# 5' UTR: beginning of transcript - beginning of first CDS
utr5 <- genes_dt[feature %in% c("transcript","CDS") & feature_id==1]
utr5[strand=="-",':='(end=.SD[feature=="transcript"]$end,start=.SD[feature=="CDS"]$end),name]
utr5[strand=="+",':='(start=.SD[feature=="transcript"]$start,end=.SD[feature=="CDS"]$start),name]
utr5_gr <- makeGRangesFromDataFrame(unique(utr5[,.(seqnames,start,end,strand,name)]))

# 3' UTR: end of last CDS - end of transcript
utr3 <- genes_dt[feature %in% c("transcript","CDS") & feature_id_rev==1]
utr3[strand=="-",':='(start=.SD[feature=="transcript"]$start,end=.SD[feature=="CDS"]$start),name]
utr3[strand=="+",':='(end=.SD[feature=="transcript"]$end,start=.SD[feature=="CDS"]$end),name]
utr3_gr <- makeGRangesFromDataFrame(unique(utr3[,.(seqnames,start,end,strand,name)]))

# first intron
idt <- genes_dt[feature=="exon"]
idt_plus <- idt[strand=="+"][,.SD[1:2],name][!is.na(start)&!is.na(end)][,N:=.N,name]
idt_minus <- idt[strand=="-"][order(-start)][,.SD[1:2],name][!is.na(start)&!is.na(end)][,N:=.N,name]
idt <- rbindlist(list(idt_plus,idt_minus))
first_intron_dt <- unique(idt[N>1][,':='(start=min(end),end=max(start),feature="intron"),name][,.(seqnames,start,end,strand,name)])
first_intron_gr <- makeGRangesFromDataFrame(first_intron_dt, keep.extra.columns=TRUE)

# define overlaps
promoters_ovl <- unique(peaks_gr[subjectHits(
    findOverlaps(promoters_gr, peaks_gr, minoverlap = 10, ignore.strand = TRUE)
)]$peak)

exons_ovl <- unique(peaks_gr[subjectHits(
    findOverlaps(exons_gr, peaks_gr, minoverlap = 10, ignore.strand = TRUE)
)])

transcripts_ovl <- unique(peaks_gr[subjectHits(
    findOverlaps(transcripts_gr, peaks_gr, minoverlap = 10, ignore.strand = TRUE)
)]$peak)

cds_ovl <- unique(peaks_gr[subjectHits(
    findOverlaps(cds_gr, peaks_gr, minoverlap = 10, ignore.strand = TRUE)
)]$peak)

first_introns_ovl <- unique(peaks_gr[subjectHits(
    findOverlaps(first_intron_gr, peaks_gr, minoverlap = 10, ignore.strand = TRUE)
)]$peak)

utr5_ovl <- unique(peaks_gr[subjectHits(
    findOverlaps(utr5_gr, peaks_gr, minoverlap = 10, ignore.strand = TRUE)
)]$peak)

utr3_ovl <- unique(peaks_gr[subjectHits(
    findOverlaps(utr3_gr, peaks_gr, minoverlap = 10, ignore.strand = TRUE)
)]$peak)

other_introns_ovl <- setdiff(
    transcripts_ovl,
    c(first_introns_ovl, exons_ovl, cds_ovl, utr5_ovl, utr3_ovl)
)

intergenic_ovl <- setdiff(
    peaks_gr$peak,
    transcripts_ovl
)

# plot
all_peaks_ovl <- rbindlist(list(
  "promoter" = data.table(peak = promoters_ovl),
  "CDS" = data.table(peak = cds_ovl),
  "5'UTR" = data.table(peak = utr5_ovl),
  "3'UTR" = data.table(peak = utr3_ovl),
  "first_intron" = data.table(peak = first_introns_ovl),
  "other_introns" = data.table(peak = other_introns_ovl),
  "intergenic" = data.table(peak = intergenic_ovl)
), use.names = TRUE, idcol = "overlap")
all_peaks_ovl[, overlap := factor(overlap, levels = c(
    "promoter", "5'UTR", "CDS", "3'UTR",
    "first_intron", "other_introns", "intergenic"
))]
all_peaks_ovl <- unique(all_peaks_ovl)
all_peaks_ovl[, peak_occur := 1:nrow(.SD), peak]

# save
fwrite(
  all_peaks_ovl,
  file.path(pks_dir, "annotation_peaks_genomic_overlap.tsv.gz"),
  sep="\t", col.names=TRUE
)

# plot
for (st in c("adult", "gastrula", "all")) {

  if (st == "all") {
    pa <- copy(peaks_res)
    po <- copy(all_peaks_ovl)[peak %in% peaks_annotation$peak]
  } else if (st %in% c("adult", "gastrula")) {
    pa <- peaks_res[stage == st]
    po <- copy(all_peaks_ovl)[peak %in% peaks_annotation[stage == st]$peak]
  }
  gp <- rbindlist(list(
      # annotated promoters
      unique(
          pa[promoter != "NO"][, .SD[1], .(peak)][, .(peak)]
      )[, overlap := "promoter"],
      # non-promoter peaks
      unique(
          po[
              overlap != "promoter" &
              !peak %in% peaks_annotation[promoter != "NO"]$peak
          ][order(peak_occur)][, .SD[1], peak]
      )[, .(peak, overlap)]
  ), use.names = TRUE)
  gp[, promoter := ifelse(overlap == "promoter", "YES", "NO")]
  gp[, overlap := factor(overlap, levels = names(ovl_cols))]

  # pie chart
  gps <- gp[, .N, overlap][, prop := N / sum(N)]
  gpp <- ggplot(gps, aes("", N, fill = overlap)) +
    geom_bar(stat = "identity", color = "white", width = 1) +
    coord_polar("y", start = 0) +
    scale_fill_manual(values = ovl_cols, limits = force) +
    geom_text(
      aes(label = scales::percent(prop, accuracy = 0.1), x=1.2),
      position = position_stack(vjust=0.5),
      color = "black"
    ) +
    theme_void() + theme(legend.title = element_blank())
  ggsave(
      file.path(fig_dir, sprintf("annotaiton_overlap_pie_%s.pdf", st)),
      gpp, width = 4, height = 3
  )


  # pie chart w/o promoters
  gps <- gp[promoter == "NO"][, .N, overlap][, prop := N / sum(N)]
  gpp <- ggplot(gps, aes("", N, fill = overlap)) +
    geom_bar(stat = "identity", color = "white", width = 1) +
    coord_polar("y", start = 0) +
    scale_fill_manual(values = ovl_cols, limits = force) +
    geom_text(
      aes(label = scales::percent(prop, accuracy = 0.1), x=1.2),
      position = position_stack(vjust=0.5),
      color = "black"
    ) +
    theme_void() + theme(legend.title = element_blank())
  ggsave(
      file.path(fig_dir, sprintf("annotaiton_overlap_pie_wo_proms_%s.pdf", st)),
      gpp, width = 4, height = 3
  )

}
```

### Conservation in genomic regions overlaps

```{r}
con_dir <-file.path("data", "2023-nematostella_whole_genome_conservation")

ph_cols <- c(
  class_cols[c("CP", "SP", "AP")],
  "enh_intergenic" = colorspace::lighten(ovl_cols["intergenic"], 0.5),
  ovl_cols["intergenic"],
  "enh_intron" = colorspace::lighten(ovl_cols["intron"], 0.5),
  ovl_cols["intron"], 
  ovl_cols["CDS"],
  "transposons" = "#f03b20",
  "tfbs" = "#c51b8a",
  "loops" = "#756bb1",
  "CRE" = "#326bb1"
)

```

Load scores

```{r}
# all classified peaks
pks <- fread(file.path(pks_dir, "Peaks_cell_type_mapped.tsv.gz"))
pks_gr <- makeGRangesFromDataFrame(pks, keep.extra.columns = TRUE)

# genomic ovls
all_peaks_ovl <- fread(
  file.path(pks_dir, "annotation_peaks_genomic_overlap.tsv.gz")
)

# phylop scores for peaks and other features
phylop_fn <- c(
  CRE = "phastcons.Nvec.phylop_per_peak.bed",
  CDS = "phastcons.Nvec.phylop_CDS.bed",
  UTR = "phastcons.Nvec.phylop_UTR.bed",
  intron = "phastcons.Nvec.phylop_introns.bed",
  intergenic = "phastcons.Nvec.phylop_intergenic.bed",
  transposons = "phastcons.Nvec.phylop_transposons.bed",
  tfbs = "phastcons.Nvec.phylop_tfbs.bed",
  loops = "phastcons.Nvec.phylop_loops.bed"
)

phastc_list <- lapply(
  names(phylop_fn), function(x) {

    # load file
    phastc_dt <- fread(file.path(con_dir, phylop_fn[x]), fill = TRUE)
    setnames(phastc_dt, c("seqnames", "start", "end", "peak", "phylop_score", "strand"))
    phastc_dt[, c("strand", "peak") := NULL]

    if (x == "CRE") {

      # map peaks
      phastc_gr <- makeGRangesFromDataFrame(phastc_dt, keep.extra.columns = TRUE)
      ovl <- findOverlaps(query = phastc_gr, subject = pks_gr, ignore.strand = TRUE, type = "any")
      phastc_dt <- phastc_gr[queryHits(ovl)]
      phastc_dt$peak <- pks_dt[subjectHits(ovl)]$peak
      phastc_dt <- as.data.table(phastc_dt)[, width := NULL]

      # map to peak classification
      peak_class_dt <- unique(peaks_res[, .(peak, promoter)])
      phastc_dt <- merge.data.table(
        phastc_dt, peak_class_dt, 
        by = "peak", sort = FALSE, allow.cartesian = TRUE
      )

      # add genomic overlaps
      phastc_dt <- merge.data.table(
        phastc_dt, unique(all_peaks_ovl[, .(peak, overlap)]), 
        by = "peak", sort = FALSE, allow.cartesian = TRUE
      )

    } else {
      
      # substract peaks
      phastc_gr <- makeGRangesFromDataFrame(phastc_dt, keep.extra.columns = TRUE)
      ovl <- findOverlaps(query = phastc_gr, subject = pks_gr, ignore.strand = TRUE, type = "any")
      phastc_dt <- phastc_gr[setdiff(seq_along(phastc_gr), queryHits(ovl))]
      phastc_dt <- as.data.table(phastc_dt)[, width := NULL]
      phastc_dt[, peak := paste(x, .I, sep = "_")]

    }

    # add metadata
    phastc_dt[, type := x]
    phastc_dt
  }
)
phastc_dt <- rbindlist(phastc_list, use.names = TRUE, fill = TRUE)
setcolorder(phastc_dt, c("seqnames", "start", "end", "phylop_score", "type", "peak", "promoter", "overlap"))
phastc_dt[, strand := NULL]
```

Plot phastCon scores

```{r}
# data to plot

# for peaks (CRE), show CP, SP, AP, and intergenic and intronic enhancers
cons_plot_dt <- rbindlist(list(
  # genomic features
  phastc_dt[type != "CRE"][, feature := type][phylop_score!=0][],
  # promoters
  phastc_dt[type == "CRE" & promoter != "NO"][phylop_score!=0][, feature := promoter][],
  # enhancers
  phastc_dt[type == "CRE" & promoter == "NO" & overlap %in% c("intergenic", "first_intron", "other_introns")][phylop_score!=0][, feature := paste0("enh_", str_extract(overlap, "intergenic|intron"))]
))

# top score per feature
cons_plot_dt <- cons_plot_dt[, .(score = max(phylop_score)), .(type, peak, feature)]
cons_plot_dt[, feature := factor(feature, levels = names(ph_cols))]
setorder(cons_plot_dt, type, -score)

# plot phastCon scores
gp_phastc_ovl <- ggplot(
    cons_plot_dt[feature %in% c(
      "CP", "SP", "AP", 
      "enh_intron", "enh_intergenic", 
      "intergenic", "intron", 
      "CDS"
    )],
    aes(feature, score, color = feature, fill = feature)
  ) +
  geom_boxplot(outlier.shape = NA, outlier.size = 1) +
  ggpubr::stat_compare_means(
    method = "t.test", method.args = list(alternative = "greater"),
    label = "p.signif", hide.ns = TRUE,
    comparisons = list(
      c("CP", "SP"),
      c("CP", "AP"), 
      c("enh_intergenic", "intergenic"),
      c("enh_intron", "intron")
    )
  ) +
  scale_y_continuous(
    #trans = "log10",
    breaks = scales::pretty_breaks(n = 3),
    limits = c(-4, 10), oob = scales::squish,
    expand = expansion(mult = c(0.05, 0.2))
  ) +
  scale_fill_manual(values = ph_cols) +
  scale_color_manual(values = structure(
    colorspace::darken(ph_cols, 0.5),
    names = names(ph_cols)
  )) +
  theme(
    legend.position = "none",
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(),
    panel.grid.major.y = element_line(linewidth = 0.5), panel.grid.minor.y = element_blank(),
  ) +
  labs(x = "", y = "phastCon\nscore")

# save
ggsave(
  file.path(fig_dir, "phastcon_scores.pdf"),
  gp_phastc_ovl,
  width = 4, height = 4
)
```

### Number of peaks

Number of peaks per gene, where genes are groupped by the promoter type (CP vs SP).

```{r}
dt_gp <- merge.data.table(pks_dt, unique(pro_dt[, .(gene, gene_promoter, stage)]), by = c("gene", "stage"))
dt_gp <- unique(dt_gp[, .(gene, peak, promoter, gene_promoter)])
dt_gp[, gene_promoter := factor(gene_promoter, levels = names(pro_cols))]

# all peaks
dt_gp_all <- dt_gp[gene_promoter != "AP"]
dt_gp_all <- dt_gp_all[, .N, .(gene, gene_promoter)]
gp_pks_all <- ggplot(dt_gp_all, aes(
    x = N,
    fill = gene_promoter, color = gene_promoter
  )) +
  geom_histogram(bins = 20) +
  scale_fill_manual(values = pro_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +  
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 5)
  ) +
  scale_y_continuous(
    breaks = scales::pretty_breaks(n = 4)
  ) +
  facet_grid(gene_promoter ~ ., scales = "free_y") +
  theme(legend.position = "none") +
  labs(
    x = "peaks",
    y = "# genes"
  )

# non-promoter peaks
dt_gp_nop <- dt_gp[gene_promoter != "AP"][promoter == "NO"]
dt_gp_nop <- dt_gp_nop[, .N, .(gene, gene_promoter)]
gp_pks_nop <- ggplot(dt_gp_nop, aes(
    x = N,
    fill = gene_promoter, color = gene_promoter
  )) +
  geom_histogram(bins = 20) +
  scale_fill_manual(values = pro_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +
  scale_x_continuous(
    breaks = scales::pretty_breaks(n = 5)
  ) +
  scale_y_continuous(
    breaks = scales::pretty_breaks(n = 4)
  ) +
  facet_grid(gene_promoter ~ ., scales = "free_y") +
  theme(legend.position = "none") +
  labs(
    x = "non-promoter\npeaks",
    y = "# genes"
  )

# save
gp_pks <- gp_pks_all + gp_pks_nop
ggsave(
    file.path(fig_dir, sprintf("num_pks_per_gene_promoter_type.pdf")),
    gp_pks, width = 7, height = 3.5
)
```

Number of peaks per gene for different functional gene classes.

```{r}
# fraction of genes in a genelist with each promoter class (CP vs SP)
gn_pt <- unique(pro_dt[, .(gene, gene_promoter, stage)])
gl_dt_1 <- merge.data.table(gl_dt, gn_pt, by = "gene", sort = FALSE)
gl_dt_1 <- gl_dt_1[!grepl("AP", gene_promoter)]
gl_dt_1[, gene_promoter_2 := paste0(gene_promoter, "2")]

# reorder
new_lvl <- gl_dt_1[, .N, .(genelist_full, gene_promoter)][
  , frac := N/sum(N), genelist_full][
    gene_promoter=="SP"][
      order(-frac)]$genelist_full
gl_dt_1[, genelist_full := factor(genelist_full, levels = new_lvl)]
gl_dt[, genelist_full := factor(genelist_full, levels = new_lvl)]

# number of non-promoter peaks associated to genes in a genelist
gl_dt_2 <- merge.data.table(gl_dt, dt_gp_nop, by = "gene", sort = FALSE)
setnames(gl_dt_2, "N", "num_non_prom")
gl_dt_2 <- gl_dt_2[!is.na(num_non_prom)]
gl_dt_2[is.na(genelist_full), genelist_full := "none"]

# reorder
new_lvl <- gl_dt_2[, mean(num_non_prom), .(genelist_full)][order(-V1)]$genelist_full
gl_dt_1[, genelist_full := factor(genelist_full, levels = new_lvl)]
gl_dt_2[, genelist_full := factor(genelist_full, levels = new_lvl)]
gl_dt[, genelist_full := factor(genelist_full, levels = new_lvl)]

# plot fraction of genes with each promoter class in a genelist (CP vs SP)
gl_gp_1 <- ggplot(gl_dt_1, aes(genelist_full, fill = gene_promoter, color = gene_promoter_2)) +
  geom_bar(position = "fill") +
  scale_y_continuous(expand = c(0, 0), breaks = c(0, 1)) +
  scale_fill_manual(values = pro_cols) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = paste0(names(pro_cols), "2")
  ), guide = "none") +
  labs(y = "fraction\nof genes") +
  theme(
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.title.x = element_blank(),
    panel.border = element_blank()
  )

# plot
require(ggpubr)
gl_gp_2 <- ggplot(gl_dt_2[genelist_full != "none"], aes(genelist_full, num_non_prom)) +
  geom_boxplot(
    data = gl_dt_2,
    fill = "#319854", 
    color = colorspace::darken("#319854", 0.5), 
    outlier.shape = 21
  ) +
  scale_y_continuous(
    #trans = "log10",
    limits = c(0, quantile(gl_dt_2$num_non_prom, 0.99)),
    oob = scales::squish,
    expand = expansion(c(0.05, 0.1))
  ) +
  stat_compare_means(
    label = "p.signif", hide.ns = TRUE,
    method = "wilcox", method.args = list(alternative = "greater"),
    ref.group = ".all."
  ) +
  labs(y = "enhancers\nper gene") +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    axis.title.x = element_blank(),
  )

# save combined plot
gl_gp <- gl_gp_1 / gl_gp_2 + plot_layout(heights = c(1, 1), guides = "collect")
ggsave(
    file.path(fig_dir, sprintf("num_pks_per_gene_list.pdf")),
    gl_gp, width = 5.5, height = 5
)

```

### Number of cell types

Summarize number of cell types nad number of peaks. 

```{r}
# number of cell types where gene is expressed
fcthr <- 1.2
exp_dt <- unique(pks_dt[, .(gene, cell_type, stage, gene_expression_fc, gene_tau_index)])
exp_dt[, n_cell_types := length(unique(.SD[gene_expression_fc > fcthr]$cell_type)), gene]

# number of regulatory elements in cell type
pkc_dt <- unique(pks_dt[, .(gene, peak, cell_type, stage, promoter)])
pkc_dt[, n_peaks_per_gene_per_cell_type := length(unique(.SD$peak)), .(gene, cell_type, stage)]
pkc_dt[, n_peaks_per_gene_all_cell_type := length(unique(.SD$peak)), .(gene)]
pkc_dt[, n_peaks_per_gene_not_promoters := length(unique(.SD[promoter == "NO"]$peak)), .(gene)]

# combine
cre_dt <- merge.data.table(exp_dt, pkc_dt, by = c("gene", "cell_type", "stage"), sort = FALSE)
cre_dt <- merge.data.table(cre_dt, pro_dt[, .(gene, stage, gene_promoter)], by = c("gene", "stage"), sort = FALSE)
cre_dt[grepl("AP", gene_promoter), gene_promoter := "AP"]
cre_dt <- cre_dt[gene_promoter != "AP"]
cre_dt[, n_cell_types := factor(n_cell_types, levels = sort(unique(cre_dt$n_cell_types)))]
cre_dt[, gene_promoter := factor(gene_promoter, levels = names(pro_cols))]

```

Number of peaks per gene, and number of genes, stratified per different promoter types (SP vs CP).

```{r}
# plot number of peaks per gene
gp_1 <- ggplot(cre_dt, aes(
    x = n_cell_types, y = n_peaks_per_gene_all_cell_type,
  )) +
  geom_boxplot(fill = "#4d8cc4", color = colorspace::darken("#4d8cc4", 0.5), outlier.shape = 20, outlier.size = 1) +
  scale_y_continuous(
    limits = c(0, quantile(cre_dt$n_peaks_per_gene_all_cell_type, 0.99)),
    oob = scales::squish
  ) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  labs(y = "# peaks\nper gene", x = "")

gp_1_ct <- ggplot(cre_dt, aes(
    x = n_cell_types, y = n_peaks_per_gene_all_cell_type,
    fill = gene_promoter, color = gene_promoter
  )) +
  geom_boxplot(position = position_dodge2(preserve = "single"), outlier.shape = 21, outlier.size = 1) +
  scale_fill_manual(values = pro_cols) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +
  scale_y_continuous(
    trans = "log10",
    #limits = c(0, quantile(cre_dt$n_peaks_per_gene_all_cell_type, 0.99)),
    oob = scales::squish
  ) +
  theme(
    axis.title = element_blank(), 
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    legend.position = "none"
  )

# plot peaks per gene in cell type
gp_2 <- ggplot(cre_dt, aes(
    x = n_cell_types, y = n_peaks_per_gene_not_promoters
  )) +
  geom_boxplot(fill = "#4d8cc4", color = colorspace::darken("#4d8cc4", 0.5), outlier.shape = 20, outlier.size = 1) +
  scale_y_continuous(
    trans = "log10",
    #limits = c(0, quantile(cre_dt$n_peaks_per_gene_not_promoters, 0.99)),
    oob = scales::squish
  ) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  labs(
    y = "# non-promoter peaks\nper gene",
    x = ""
  )

gp_2_ct <- ggplot(cre_dt, aes(
    x = n_cell_types, y = n_peaks_per_gene_not_promoters,
    fill = gene_promoter, color = gene_promoter
  )) +
  geom_boxplot(position = position_dodge2(preserve = "single"), outlier.shape = 20, outlier.size = 1) +
  scale_fill_manual(values = pro_cols) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +
  scale_y_continuous(
    trans = "log10",
    #limits = c(0, quantile(cre_dt$n_peaks_per_gene_not_promoters, 0.99)),
    oob = scales::squish
  ) +
  theme(
    axis.title = element_blank(),
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    legend.position = "none"
  )

# plot number of genes
dt_3 <- unique(cre_dt[, .(gene, n_cell_types, gene_promoter)])
gp_3 <- ggplot(dt_3, aes(x = n_cell_types)) +
  geom_bar(fill = "#4d8cc4", color = colorspace::darken("#4d8cc4", 0.5)) +
  scale_y_continuous(
    expand =  expansion(mult = c(0, 0.1))
  ) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  labs(
    y = "# genes",
    x = sprintf("# expression domains\n(FC > %s)", fcthr)
  )

gp_3_ct <- ggplot(dt_3, aes(
    x = n_cell_types, fill = gene_promoter, color = gene_promoter
  )) +
  geom_bar(position = position_dodge2(preserve = "single")) +
  scale_fill_manual(values = pro_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +
  scale_y_continuous(
    expand =  expansion(mult = c(0, 0.1))
  ) +
  theme(
    axis.title.y = element_blank(), 
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    legend.position = "none"
  ) +
  labs(x = sprintf("# expression domains\n(FC > %s)", fcthr))

gp_st <- (gp_1 + gp_1_ct) / (gp_2 + gp_2_ct) / (gp_3 + gp_3_ct)

ggsave(
    file.path(fig_dir, sprintf("num_pks_gene_expression_fc%s_stats.pdf", fcthr)),
    gp_st, width = 10, height = 7
)

# plot tau index
tau_dt <- unique(cre_dt[, .(gene, gene_promoter, gene_tau_index, n_peaks_per_gene_all_cell_type, n_peaks_per_gene_not_promoters)])
tau_dt[, tau_bin := cut(
    gene_tau_index, 
    breaks = c(0, 0.6, 0.7, 0.8, 0.9, 1), 
    include.lowest = TRUE
)]

gp_tau_1 <- ggplot(
    tau_dt[!is.na(gene_tau_index)],
    aes(x = tau_bin, y = n_peaks_per_gene_all_cell_type, fill = gene_promoter, color = gene_promoter)
  ) +
  geom_boxplot(outlier.shape = 20, outlier.size = 1) +
  scale_fill_manual(values = pro_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +
  scale_y_continuous(
    #trans = "log10",
    limits = c(0, quantile(cre_dt$n_peaks_per_gene_per_cell_type, 0.99)),
    oob = scales::squish
  ) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    legend.position = "none"
  ) +
  labs(x = "", y = "# peaks\nper gene")

# cpmparison SP-CP
gp_tau_2 <- ggplot(
    tau_dt[!is.na(gene_tau_index)],
    aes(x = tau_bin, y = n_peaks_per_gene_not_promoters, fill = gene_promoter, color = gene_promoter)
  ) +
  geom_boxplot(outlier.shape = 20, outlier.size = 1) +
  stat_compare_means(
    label = "p.signif", hide.ns = TRUE,
    method = "t.test",
    method.args = list(formula = n_peaks_per_gene_not_promoters ~ gene_promoter)
  ) +
  scale_fill_manual(values = pro_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +
  scale_y_continuous(
    #trans = "log10",
    limits = c(0, quantile(cre_dt$n_peaks_per_gene_not_promoters, 0.9)),
    oob = scales::squish,
    expand = expansion(mult = c(0.1, 0.1))
  ) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    legend.position = "none"
  ) +
  labs(x = "", y = "# non-promoter peaks\nper gene")

# pairwise comparisons for all tau_bin values
comp_dt <- tau_dt[!is.na(gene_tau_index)]
comp_dt[, tau_bin := as.character(tau_bin)]
comparisons_list <- combn(unique(comp_dt$tau_bin), 2, simplify = FALSE)
gp_tau_comp <- ggboxplot(comp_dt, x = "tau_bin", y = "n_peaks_per_gene_not_promoters")+ 
  stat_compare_means(comparisons = comparisons_list, label.y = seq(50, 140, 10), label = "p.signif", hide.ns = TRUE)+
  stat_compare_means(label.y = 150)
ggsave(
    file.path(fig_dir, "num_pks_gene_expression_tau_comp.pdf"),
    gp_tau_comp, width = 4, height = 8
)

gp_tau_3 <- ggplot(
    unique(tau_dt[!is.na(gene_tau_index), .(gene, tau_bin, gene_promoter)]),
    aes(x = tau_bin, fill = gene_promoter, color = gene_promoter)
  ) +
  geom_bar(position = position_dodge2(preserve = "single")) +
  scale_fill_manual(values = pro_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    legend.position = "none"
  ) +
  labs(x = "Tau index", y = "# genes")


require(ggpubr)
gp_tau <- gp_tau_1 / gp_tau_2 / gp_tau_3
ggsave(
    file.path(fig_dir, "num_pks_gene_expression_tau.pdf"),
    gp_tau, width = 4, height = 9
)

# tau index distribution
gp_tau_dist_1 <- ggplot(tau_dt[!is.na(gene_tau_index)], aes(gene_tau_index)) + 
  geom_density(alpha = 0.9, fill = "#4d8cc4", color = colorspace::darken("#4d8cc4", 0.5)) +
  theme(legend.position = "none") +
  labs(x = "Tau index", y = "density")

gp_tau_dist_2 <- ggplot(tau_dt[!is.na(gene_tau_index)], aes(gene_tau_index, fill = gene_promoter, color = gene_promoter)) + 
  geom_density(alpha = 0.9) +
  scale_fill_manual(values = pro_cols) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +
  theme(legend.position = "none") +
  labs(x = "Tau index", y = "density")

# correlation of tau index and expression domains
gp_cor_tau_exp <- ggplot(cre_dt, aes(n_cell_types, gene_tau_index, fill = gene_promoter, color = gene_promoter)) + 
  geom_boxplot(position = position_dodge2(preserve = "single"), outlier.shape = 20, outlier.size = 1) +
  scale_fill_manual(values = pro_cols) +
  scale_color_manual(values = structure(
    colorspace::darken(pro_cols, 0.5),
    names = names(pro_cols)
  )) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    legend.position = "none"
  ) +
  labs(x = "# expression domains", y = "Tau index")

gp_tau_dist <- gp_tau_dist_1 / gp_tau_dist_2 / gp_cor_tau_exp

ggsave(
    file.path(fig_dir, "tau_vs_expression.pdf"),
    gp_tau_dist, width = 6, height = 7
)
```

How many cell types SP are in?

```{r}
# specific promoters
sp_dist <- unique(pks_dt[promoter == "SP"][, .(peak, stage, cell_type)])
sp_dist[, stage := paste(sort(unique(.SD$stage)), collapse = "+"), peak]
sp_dist <- sp_dist[, .(num_cts = .N), .(peak, stage)][, .N, .(num_cts, stage)]
sp_dist[, num_cts := factor(num_cts, levels = seq_along(unique(pks_dt$cell_type)))]
sp_dist[, stage := factor(stage, levels = c("adult", "gastrula", "adult+gastrula"))]
sph <- ggplot(sp_dist, aes(num_cts, N, fill = stage)) + 
  geom_bar(stat = "identity", color = colorspace::darken(pro_cols["SP"], 0.5)) + 
  scale_y_continuous(
    expand = expansion(mult = c(0, 0.05))
  ) +
  scale_fill_manual(values = c(
    "adult" = colorspace::lighten(pro_cols["SP"], 0.18),
    "gastrula" = unname(pro_cols["SP"]),
    "adult+gastrula" = colorspace::darken(pro_cols["SP"], 0.1)
  )) +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  labs(y = "# SP", x = "# accessibility domains") 

ggsave(
  file.path(fig_dir, "num_cts_sp_cell_types.pdf"),
  sph, 
  width = 6.5, height = 2
)
```

### Broad H3K4me3 (deprecated)

To identify genes with broad K4me3 in gene body, we trim TSS signal.

```{r}
trim_tss <- 600
bed <- fread("genome/Nvec_v4_merged_annotation_sort.bed")
bed[V6=="+", V2 := V2 + trim_tss]
bed[V6=="-", V3 := V3 - trim_tss]
bed[, len := V3 - V2]
fwrite(
  bed[len > 0, 1:6],
  sprintf("genome/Nvec_v4_merged_annotation_sort_TSS+%s.bed", trim_tss),
  sep = "\t",
  col.names = FALSE
)
```

deeptools matrix and plot heatmap

```{bash}
# directories
scatac_dir=$(pwd)
chip_dir="/home/anamaria/cluster/aelek/proj/ChIPseq_nvec_v2"
plot_dir=${scatac_dir}"/plots/Peaks/deeptools"
resu_dir=${scatac_dir}"/results/Peaks/deeptools"

# inputs
tss_trim=600
genes=${scatac_dir}"/genome/Nvec_v4_merged_annotation_sort.bed"
genes=${scatac_dir}"/genome/Nvec_v4_merged_annotation_sort_TSS+"${tss_trim}".bed"
bw_h3k4me3=${chip_dir}"/H3K4me3/alignments/H3K4me3.bw"
bw_h3k4me3_gastrula=${chip_dir}"/H3K4me3_gastrula/H3K4me3_gastrula_bwa.bw"

# H3K4me3 heatmap outputs
k=8
matrix=${resu_dir}"/deeptools.matrix.H3K4me3.TSS+"${tss_trim}"bp.gz"
heatmap=${plot_dir}"/deeptools.heatmap.H3K4me3.TSS+"${tss_trim}"bp.k"${k}".pdf"

# adult
computeMatrix scale-regions \
  -R ${genes} \
  -S ${bw_h3k4me3} \
  -b 0 -a 1000 \
  --regionBodyLength 5000 \
  --skipZeros \
  -o ${matrix%%.gz}.adult.gz \
  --outFileNameMatrix ${matrix%%.gz}.adult.tab \
  --outFileSortedRegions ${matrix%%.gz}.adult.bed \
  -p 32

plotHeatmap -m ${matrix%%.gz}.adult.gz \
  -out ${heatmap%%.pdf}.adult.pdf \
  --outFileSortedRegions ${heatmap%%.pdf}.adult.bed \
  --colorMap Blues \
  --zMin 0 --zMax 30 \
  --kmeans ${k} \
  --legendLocation lower-center \
  --dpi 100 &

# gastrula
computeMatrix scale-regions \
  -R ${genes} \
  -S ${bw_h3k4me3_gastrula} \
  -b 0 -a 1000 \
  --regionBodyLength 5000 \
  --skipZeros \
  -o ${matrix%%.gz}.gastrula.gz \
  --outFileNameMatrix ${matrix%%.gz}.gastrula.tab \
  --outFileSortedRegions ${matrix%%.gz}.gastrula.bed \
  -p 32

plotHeatmap -m ${matrix%%.gz}.gastrula.gz \
  -out ${heatmap%%.pdf}.gastrula.pdf \
  --outFileSortedRegions ${heatmap%%.pdf}.gastrula.bed \
  --colorMap Blues \
  --zMin 0 --zMax 30 \
  --kmeans ${k} \
  --legendLocation lower-center \
  --dpi 100 &
```

Parse deeptools output files and save inputs for figure heatmap

```{r}
k <- 8
stage <- "adult"
stage <- "gastrula"
k4me3_cols <- c(adult = "#853636ff", gastrula = "#d35f5fe5")

# load data
dtools_dt <- fread(file.path(fig_dir, "deeptools", sprintf(
  "deeptools.heatmap.H3K4me3.TSS+600bp.k%s.%s.bed", k, stage
)))
setnames(dtools_dt, c("#chrom", "name"), c("seqnames", "gene"))
dtools_dt <- unique(dtools_dt[, .(gene, deepTools_group)])
dtools_dt[, deepTools_group := factor(deepTools_group, levels = paste0("cluster_", seq_len(k)))]
dtools_dt[, rank := .I]

# add gene annotations
gene_bed <- fread("genome/Nvec_v4_merged_annotation_sort.bed")
gene_len <- gene_bed[, abs(V2 - V3)]
names(gene_len) <- gene_bed$V4
dtools_dt[, gene_length := gene_len[gene]]
dtools_gn <- merge.data.table(
  dtools_dt, gen_ann, by = "gene", all.x = TRUE, sort = FALSE
)
fwrite(
  dtools_gn,
  file.path(pks_dir, "deeptools", sprintf("deeptools_groups_TSS+600bp_k%s.%s.tsv", k, stage)),
  sep = "\t"
)

# save bed files for figure heatmap
# check which clusterr is broad in the heatmap
cl_fg <- c( "adult" = "cluster_1", "gastrula" = "cluster_1")
cl_bg <- c("adult" = "cluster_6", "gastrula" = "cluster_5")
cl <- c("broad" = unname(cl_fg[stage]), "control" = unname(cl_bg[stage]))
for (x in c("broad", "control")) {
  fwrite(
    gene_bed[V4 %in% dtools_gn[deepTools_group == cl[x]]$gene],
    file.path(fig_dir, "deeptools", sprintf("Nvec_v4_merged_annotation_sort_%s_%s.bed", x, stage)),
    sep = "\t", col.names = FALSE
  )
}
```

How many broad domain genes are in adult/gastrula/intersect?

```{r}
# how many overlapping broad domain genes?
broad_dt <- rbindlist(sapply(c("adult", "gastrula"), function(stage)
  fread(file.path(fig_dir, "deeptools", sprintf("Nvec_v4_merged_annotation_sort_broad_%s.bed", stage))),
  simplify = FALSE, USE.NAMES = TRUE
), idcol = "stage")
broad_dt[, gene_length := abs(V3 - V2)]
setnames(broad_dt, "V4", "gene")
broad_dt <- broad_dt[, .(stage, gene, gene_length)]

broad_dc <- dcast.data.table(broad_dt, gene ~ stage, value.var = "gene_length")
broad_mt <- as.matrix(broad_dc[, -1])
broad_mt[!is.na(broad_mt)] <- 1
broad_mt[is.na(broad_mt)] <- 0

require(eulerr)
fit <- euler(broad_mt)
p1 <- plot(
  fit,
  quantities = TRUE,
  fill = k4me3_cols,
  labels = list(font = 4)
)
pdf(
  file.path(fig_dir, "deeptools", "broad_H3K4me3_genes_ovl.pdf"),
  width = 4, height = 2
)
print(p1)
dev.off()
```

Expression for genes in different deeptools clusters of H3K4me3

```{r}
# deep tools clusters
dtools_dt <- rbindlist(sapply(c("adult", "gastrula"), function(stage)
  fread(file.path(pks_dir, "deeptools", sprintf("deeptools_groups_TSS+600bp_k%s.%s.tsv", k, stage))),
  simplify = FALSE, USE.NAMES = TRUE
), idcol = "stage")

# expression data
pks_dt <- fread(file.path(pks_dir, "deeptools", "Peaks_cell_type_promoter_annotation.tsv.gz"))
exp_dt <- unique(pks_dt[, .(gene, cell_type, stage, gene_expression_fc, gene_expression_umifrac, gene_tau_index)])
exp_dt[, n_stages := length(unique(.SD$stage)), gene]
exp_dt[, n_cell_types := length(unique(.SD[gene_expression_fc > fcthr]$cell_type)), gene]

# add deeptools cluster info
dtools_exptop <- merge.data.table(
  dtools_dt[, .(gene, stage, deepTools_group)],
  exp_dt, by = c("gene", "stage")
)

# top expression fc per gene
dtools_exptop <- dtools_exptop[!is.na(gene_expression_umifrac)][order(stage, -gene_expression_fc)][, .SD[1], .(gene, stage)]
dtools_exptop[, gene_expression_fc := pmin(gene_expression_fc, 6)]

# category for plot
dtools_exptop <- dtools_exptop[
  (stage == "adult" & deepTools_group %in% c(cl_fg["adult"], cl_bg["adult"])) |
  (stage == "gastrula" & deepTools_group %in% c(cl_fg["gastrula"], cl_bg["gastrula"]))
]
dtools_exptop[, category := stage]
dtools_exptop[
  (stage == "adult" & deepTools_group %in% cl_bg["adult"]) |
  (stage == "gastrula" & deepTools_group %in% cl_bg["gastrula"])
, category := "other"]
dtools_exptop[, category_short := substr(category, 1, 1)]
dtools_exptop[, category_short := factor(category_short, levels = c("a", "g", "o"))]

# plot joint
gp_umi <- ggplot(dtools_exptop, aes(category_short, gene_expression_umifrac, fill = category, color = category)) +
  geom_boxplot(outlier.shape = 21) +
  ggpubr::stat_compare_means(
    label = "p.signif", hide.ns = TRUE, method = "wilcox", 
    comparisons = list(c("g", "o"), c("a", "o"))
  ) +
  scale_y_continuous(
    limits = c(NA, quantile(dtools_exptop$gene_expression_umifrac, 0.98, na.rm = TRUE)), oob = squish,
    expand = expansion(mult = c(0.1, 0.12)),
    breaks = scales::pretty_breaks(n = 4)
  ) +
  scale_fill_manual(values = c(k4me3_cols, "other" = "#757575ff")) +
  scale_color_manual(values = colorspace::darken(c(k4me3_cols, "other" = "#757575ff"), 0.5)) +
  labs(x = "", y = "gene\n expression UMI frac")
gp_fc <- ggplot(dtools_exptop, aes(category_short, gene_expression_fc, fill = category, color = category)) +
  geom_boxplot(outlier.shape = 21) +
  ggpubr::stat_compare_means(
    label = "p.signif", hide.ns = TRUE, method = "wilcox", 
    comparisons = list(c("g", "o"), c("a", "o"))
  ) +
  scale_y_continuous(
    expand = expansion(mult = c(0.1, 0.12)),
    breaks = scales::pretty_breaks(n = 4)
  ) +
  scale_fill_manual(values = c(k4me3_cols, "other" = "#757575ff")) +
  scale_color_manual(values = colorspace::darken(c(k4me3_cols, "other" = "#757575ff"), 0.5)) +
  labs(x = "", y = "gene\nexpression FC")
gp_tau <- ggplot(dtools_exptop, aes(category_short, gene_tau_index, fill = category, color = category)) +
  geom_boxplot(outlier.shape = 21) +
  ggpubr::stat_compare_means(
    label = "p.signif", hide.ns = TRUE, method = "wilcox", 
    comparisons = list(c("g", "o"), c("a", "o"))
  ) +
  scale_y_continuous(
    limits = c(NA, quantile(dtools_exptop$gene_tau_index, 0.98, na.rm = TRUE)), oob = squish, 
    expand = expansion(mult = c(0.1, 0.2)),
    breaks = scales::pretty_breaks(n = 4)
  ) +
  scale_fill_manual(values = c(k4me3_cols, "other" = "#757575ff")) +
  scale_color_manual(values = colorspace::darken(c(k4me3_cols, "other" = "#757575ff"), 0.5)) +
  labs(x = "", y = "Tau index")
gp_ncts <- ggplot(dtools_exptop, aes(category_short, n_cell_types, fill = category, color = category)) +
  geom_boxplot(outlier.shape = 21) +
  ggpubr::stat_compare_means(
    label = "p.signif", hide.ns = TRUE, method = "wilcox", 
    comparisons = list(c("g", "o"), c("a", "o"))
  ) +
  scale_y_continuous(
    expand = expansion(mult = c(0.1, 0.1)),
    breaks = scales::pretty_breaks(n = 4)
  ) +
  scale_fill_manual(values = c(k4me3_cols, "other" = "#757575ff")) +
  scale_color_manual(values = colorspace::darken(c(k4me3_cols, "other" = "#757575ff"), 0.5)) +
  labs(x = "", y = "# expression\ndomains")
gp_exp <- gp_umi + gp_fc + gp_tau + gp_ncts + 
  plot_layout(nrow = 1, guides = "collect") & theme(legend.position = "bottom")
ggsave(
  file.path(fig_dir, "deeptools", "broad_H3K4me3_genes_exp_joint.pdf"),
  gp_exp, width = 7, height = 3
)
```

Functional enrichment for different deeptools clusters of H3K4me3

```{r}
# add gene list info
dtools_gl <- merge.data.table(
  dtools_dt, gl_dt[, .(gene, genelist, genelist_full)],
  by = "gene", all.x = TRUE, sort = FALSE
)
dtools_gl[is.na(genelist), genelist:= ""]
dtools_gl <- unique(dtools_gl)

# plot
dtools_gl_gp <- ggplot(
    dtools_gl,
    aes(deepTools_group, fill = genelist)
  ) +
  geom_bar(position = "stack", color = "black") +
  scale_fill_manual(values = RColorBrewer::brewer.pal(n=9, "Blues")) +
  scale_y_continuous(trans = "log10") +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
  )

ggsave(
    file.path(fig_dir, "deeptools", sprintf("deeptools_groups_gene_list_annot.pdf")),
    dtools_gl_gp, width = 6, height = 4.5
)

# add gene promoter info
dtools_pr <- merge.data.table(
  dtools_dt, unique(pro_dt[, .(gene, gene_promoter)]),
  by = "gene", all.x = TRUE, sort = FALSE
)
dtools_pr <- dtools_pr[!is.na(gene_promoter)]
dtools_pr <- unique(dtools_pr)

# plot
dtools_pr_gp <- ggplot(
    dtools_pr,
    aes(deepTools_group, fill = gene_promoter)
  ) +
  scale_fill_manual(values = class_cols) +
  scale_y_continuous(trans = "log10") +
  geom_bar(position = "stack") +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
  )
ggsave(
    file.path(plot_dir, "deeptools", sprintf("deeptools_groups_gene_promoter_annot.pdf")),
    dtools_pr_gp, width = 6, height = 4.5
)
```

Are they CP or SP?

```{r}
dtools_pro <- merge.data.table(dtools_dt, pro_dt[, .(gene, gene_promoter, stage)], by = c("gene", "stage"))
dtools_pro <- dtools_pro[deepTools_group %in% c(cl_fg, cl_bg)]
dtools_pro[, category := paste0(stage, "_fg")]
dtools_pro[stage == "adult" & deepTools_group %in% cl_bg["adult"], category := "adult_bg"]
dtools_pro[stage == "gastrula" & deepTools_group %in% cl_bg["gastrula"], category := "gastrula_bg"]
dtools_pro <- dtools_pro[gene_promoter != "AP"]
dtools_sum <- dtools_pro[, .N, .(gene_promoter, category)]
dtools_sum[, stage := str_extract(category, "adult|gastrula")]
dtools_sum[, fgbg := str_extract(category, "fg|bg")]
dtools_sum[, category := str_remove(category, "_fg")]
dtools_sum[, category := factor(category, levels = rev(c("adult", "adult_bg", "gastrula", "gastrula_bg")))]
setorder(dtools_sum,stage,category,fgbg,gene_promoter)
setnames(dtools_sum, "N", "genes")

dtools_dcs <- dcast.data.table(dtools_sum, gene_promoter + stage ~ fgbg, value.var = "N")
dtools_dcs[, tot_fg := sum(fg), stage]
dtools_dcs[, tot_bg := sum(bg), stage]
dtools_dcs[, fg_frac := fg / sum(fg), stage]
dtools_dcs[, bg_frac := bg / sum(bg), stage]
dtools_dcs[, fc := fg_frac / bg_frac]
dtools_dcs[, pval := binom.test(
  fg, tot_fg, p = bg_frac, alternative = "greater"
)$p.value, by = c("gene_promoter", "stage")]
dtools_dcs[, logpval := -1 * log10(pval)]
dtools_dcs[, qval := p.adjust(pval)]

# Common limits
xmax <- max(dtools_sum$genes) + 0.05 * max(dtools_sum$genes) 

# Create CP plot (facing left)
gp_cp <- ggplot(dtools_sum[dtools_sum$gene_promoter == "CP", ], aes(x = genes, y = category, fill = category)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values = cat_cols) +
  scale_x_reverse(limits = c(xmax, NA), expand = expansion(mult = c(0, 0)), breaks = scales::pretty_breaks(4)) + 
  theme(legend.position = "none", axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) +
  labs(title = "CP", x = "Genes", y = "")

# Create SP plot (facing right)
gp_sp <- ggplot(dtools_sum[dtools_sum$gene_promoter == "SP", ], aes(x = genes, y = category, fill = category)) +
  geom_bar(stat = "identity") +
  scale_x_continuous(limits = c(NA, xmax), expand = expansion(mult = c(0, 0)), breaks = scales::pretty_breaks(4)) + 
  scale_fill_manual(values = cat_cols) +
  theme(legend.position = "none",  axis.ticks.y = element_blank(), axis.text.x = element_text(angle = -90, vjust = 0.5, hjust = 0)) +
  labs(title = "SP", x = "Genes", y = "")

# Combine the two plots with patchwork
gp_dtools_prom <- gp_cp + gp_sp

ggsave(
  file.path(fig_dir, "deeptools", "broad_H3K4me3_genes_promoters_joint.pdf"),
  gp_dtools_prom, width = 5.5, height = 2.5
)
```

For figure, we plot heatmap and profile for full gene models

```{bash}
# directories
scatac_dir=$(pwd)
chip_dir="/home/anamaria/cluster/aelek/proj/ChIPseq_nvec_v2"
plot_dir=${scatac_dir}"/plots/Peaks/deeptools"
resu_dir=${scatac_dir}"/results/Peaks/deeptools"

# inputs
genes_broad=${plot_dir}"/Nvec_v4_merged_annotation_sort_broad.bed"
genes_control=${plot_dir}"/Nvec_v4_merged_annotation_sort_control.bed"
bw_h3k4me3=${chip_dir}"/H3K4me3/alignments/H3K4me3.bw"
bw_h3k4me3_gastrula=${chip_dir}"/H3K4me3_gastrula/H3K4me3_gastrula_bwa.bw"

# H3K4me3 heatmap outputs
matrix=${resu_dir}"/deeptools.matrix.H3K4me3.broad.gz"
heatmap=${plot_dir}"/deeptools.heatmap.H3K4me3.broad.pdf"

# adult
computeMatrix scale-regions \
  -R ${genes_broad%%.bed}_adult.bed ${genes_control%%.bed}_adult.bed \
  -S ${bw_h3k4me3} \
  -b 3000 -a 3000 \
  --regionBodyLength 5000 \
  --skipZeros \
  -o ${matrix%%.gz}.adult.gz \
  --outFileNameMatrix ${matrix%%.gz}.adult.tab \
  -p 32

plotHeatmap -m ${matrix%%.gz}.adult.gz \
  -out ${heatmap%%.pdf}.adult.pdf \
  --colorMap Blues \
  --zMin 0 --zMax 30 \
  --legendLocation lower-center \
  --dpi 100 &

# gastrula
computeMatrix scale-regions \
  -R ${genes_broad%%.bed}_gastrula.bed ${genes_control%%.bed}_gastrula.bed \
  -S ${bw_h3k4me3_gastrula} \
  -b 3000 -a 3000 \
  --regionBodyLength 5000 \
  --skipZeros \
  -o ${matrix%%.gz}.gastrula.gz \
  --outFileNameMatrix ${matrix%%.gz}.gastrula.tab \
  -p 32

plotHeatmap -m ${matrix%%.gz}.gastrula.gz \
  -out ${heatmap%%.pdf}.gastrula.pdf \
  --colorMap Blues \
  --zMin 0 --zMax 30 \
  --legendLocation lower-center \
  --dpi 100 &

# joint
computeMatrix scale-regions \
  -R ${genes_broad%%.bed}_adult.bed \
     ${genes_broad%%.bed}_gastrula.bed \
     ${genes_control%%.bed}_adult.bed  \
     ${genes_control%%.bed}_gastrula.bed \
  -S ${bw_h3k4me3} ${bw_h3k4me3_gastrula} \
  -b 3000 -a 3000 \
  --regionBodyLength 5000 \
  --skipZeros \
  -o ${matrix} \
  --outFileNameMatrix ${matrix%%.gz}.tab \
  -p 32

plotHeatmap -m ${matrix} \
  -out ${heatmap} \
  --colorMap Blues \
  --zMin 0 --zMax 30 \
  --legendLocation lower-center \
  --dpi 100 &

```
