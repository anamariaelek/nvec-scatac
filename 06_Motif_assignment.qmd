---
title: "Motif enrichment in Nematostella scATAC"
author: "Anamaria Elek"
date: today
format: 
  html:
    code-fold: false
    code-tools: false
    embed-resources: true
    highlight-style: github
    toc: true 
    code-line-numbers: false 
execute:
  eval: false
  message: false
  warning: false
---

```{r}
#| label: initialize
#| echo: FALSE
knitr::opts_chunk$set(echo = TRUE, fig.width=7, fig.height=5) 
```

In this notebook, we assign motifs to TFs.  

## Setup

Load packages and functions.

```{r}
#| label: setup

# load in-house functions
source("metacell_downstream_functions/Downstream_functions.R")
source("metacell_downstream_functions/utils.R")
source("motif-analysis/mta_downstream_functions.R")
source("scripts/scatac_helper_functions.R")

# global settings
options(stringsAsFactors = FALSE)

# load packages
library(BSgenome.jaNemVect1.1.DToL.Assembly)
library(GenomicRanges)
library(data.table)
library(tidyr)
library(stringr)
library(ggplot2)
library(patchwork)
library(ggrepel)
library(ggside)
library(grid)
library(ArchR)
library(Seurat)
library(metacell)
library(universalmotif)

# set ggplot2 theme
theme_blank <- theme_minimal() + theme(
  axis.title.x = element_blank(),
  axis.title.y = element_blank(),
  panel.border = element_blank(),
  panel.grid=element_blank(),
  axis.ticks = element_blank(),
  text = element_text(size=20)
)
theme_py <- theme_light() + theme(
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  panel.border = element_rect(colour = "black", fill = NA),
  text = element_text(size=20),
  strip.placement = "outside", 
  strip.text = element_text(size=20, color="black"),
  strip.background = element_rect(fill="white")
)
theme_set(theme_py)
```

Define directories to save the results to.

```{r}
#| label: dirs

# define directories
adult_dir <- "ArchRProj_Nvec_TSS4_frag200"
gastr_dir <- "ArchRProj_Nvec_gastrula"
cisbp_dir <- "CisBP"
dap_dir <- "DAPseq"
ann_dir <- "annotation"
pks_dir <- "results/Peaks"
arc_dir <- "results/Archetypes"
mta_dir <- "results/Motifs"
fig_dir <- "plots/Motifs"

# load annotation
gnan <- fread(file.path(ann_dir, "Nematostella_DToL_FINAL.tsv"))
tfan <- fread(file.path(ann_dir, "Nematostella_DToL_TFs_FINAL.tsv"))
```

Project-specific variables:

```{r}
ct_cols <- c(
  "cnidocyte"                  = "#ff42ff",
  "cnidocyte_gastrula"         = "#f7abf7",
  "ecto_pharynx"               = "#5bc0e8",
  "ectoderm"                   = "#51a0be",
  "ecto_aboral"                = "#045170",
  "EMS"                        = "#bdf5bd",
  "EMS_ecto_boundary"          = "#93dbce",
  "gastro_circular_muscle_1"   = "#85c90e",
  "gastro_circular_muscle_2"   = "#73b009",
  "gastro_parietal_muscle"     = "#8ceb10",
  "gastro_IRF1_2"              = "#c1eb05",
  "gastro_somatic_gonad"       = "#bde314",
  "muscle_tentacle_retractor"  = "#ffd700",
  "muscle_mesentery_retractor" = "#f0e229",
  "digestive_filaments_1"      = "#e33d3d",
  "digestive_filaments_2"      = "#d10606",
  "digestive_filaments_3"      = "#ad0303",
  "epidermis_1"                = "#04ccd4",
  "epidermis_2"                = "#16bacc",
  "precursors_PGC"             = "#bebebe",
  "precursors_endoNPC"         = "#8a8686",
  "precursors_NPC"             = "#636363",
  "NPC_1"                      = "#808d91",
  "NPC_2"                      = "#758d92",
  "neuron_GATA_Islet_1"        = "#0c82f7",
  "neuron_GATA_Islet_2"        = "#1175f0",
  "neuron_Pou4_FoxL2_1"        = "#101cde",
  "neuron_Pou4_FoxL2_2"        = "#0b16bf",
  "neuron_Pou4_FoxL2_3"        = "#2e39dd",
  "neuronal_gastrula"          = "#063cb9",
  "gland"                      = "#ff6f08",
  "gland_mucin"                = "#ff8f12"
)
cell_types <- names(ct_cols)
adult_cell_types <- c(
  "cnidocyte",
  "gastro_circular_muscle_1", 
  "gastro_circular_muscle_2",
  "gastro_parietal_muscle",
  "gastro_IRF1_2",
  "gastro_somatic_gonad",
  "muscle_mesentery_retractor",
  "muscle_tentacle_retractor",
  "digestive_filaments_1",
  "digestive_filaments_2",
  "digestive_filaments_3",
  "epidermis_1",
  "epidermis_2",
  "precursors_PGC",
  "precursors_endoNPC",
  "precursors_NPC",
  "neuron_GATA_Islet_1",
  "neuron_GATA_Islet_2",
  "neuron_Pou4_FoxL2_1",
  "neuron_Pou4_FoxL2_2",
  "neuron_Pou4_FoxL2_3",
  "gland"
)
gastr_cell_types <- c(setdiff(cell_types, adult_cell_types))
bct_cols <- toupper(c(
  "cnidocyte"                 = "#FF42FF",
  "ecto"                      = "#51a0be",
  "EMS"                       = "#bdf5bd",
  "gastro_circular_muscle"    = "#73b009",
  "gastro_parietal_muscle"    = "#8ceb10",
  "gastro"                    = "#85c90e",  
  "muscle"                    = "#FFD700",
  "digestive_filaments"       = "#e33d3d",
  "precursors"                = "#BEBEBE",
  "NPC"                       = "#808d91",
  "epidermis"                 = "#04ccd4",
  "neuron_GATA_Islet"         = "#1175f0",
  "neuron_Pou4_FoxL2"         = "#101cde",
  "neuronal"                  = "#063cb9",
  "gland"                     = "#ff6f08"
))
bct_maps <- setDT(cbind.data.frame(
  cell_type = cell_types,
  broad_cell_type = str_extract(cell_types, paste(names(bct_cols), collapse = "|"))
))
```

## Assign motifs to genes

Load data.

```{r}
# peak to gene assignment
pksa <- fread(file.path(
  pks_dir, "Peaks_cell_type_mapped_gene_assignment_coaccess.tsv.gz"
))

# archetypes
arc_id <- "PPM-PCC-0.8-IC0.5-5bp"

# motifs
dict <- fread(file.path(
  arc_dir, sprintf("motif-archetypes-%s.dict", arc_id)
))

# pwms
mots_arc_lst <- readRDS(file.path(
  arc_dir,
   sprintf("motif-archetypes-%s-pwms.rds", arc_id)
))

# TFs with peaks assigned
tfan <- tfan[gene %in% pksa$gene]

# TFs with motifs assigned
for (x in colnames(tfan)[-1]) {
  if (x %in% colnames(dict)) dict[, I(x) := NULL]
}
tf_dict <- merge.data.table(
  tfan, dict,
  by = "gene", all.x = TRUE, allow.cartesian = TRUE
)

# gene scores matrix aggregated per seacells
gene_score_mat <- readRDS(file.path(
    "results", "GeneScoreMatrix",
    "Matrix-Gene-Scores-SEACell-FC.rds"
))

# motif scores aggregated per seacell
chromvar_mat <- readRDS(file.path(
  "results", "Archetypes",
  sprintf("ChromVAR-%s", arc_id), 
  "ArchetypesSEACellsMatrix",
  "Matrix-Archetypes-SEACells.rds"
))

# ATAC 2D coordinates
coord <- fread(file.path(
    "results", "Clustering", 
    "SEACells_adult_gastrula_UMAP_FC3_gastrula_FC5_adult_qnorm.tsv"
))
coord_df <- coord[, 2:3]
class(coord_df) <- "data.frame"
rownames(coord_df) <- coord[[1]]
coord_df <- coord_df[colnames(chromvar_mat), ]

# gene expression
ctfp_mat <- readRDS(file.path(
  "results", "Metacells", "metacell", 
  "gene_expression_fc_genes_exp_FC2_acc_FC4_spearman.rds"
))

# we need to subset gene expression matrix to the same seacells as in chromVAR matrix
stopifnot(all(colnames(chromvar_mat) %in% colnames(ctfp_mat)))
ctfp_mat <- ctfp_mat[, colnames(chromvar_mat)]
saveRDS(ctfp_mat, file.path("results", "Metacells", "metacell", "Matrix-Gene-Expression-SEACell-FC.rds"))

# mapping of metacells between RNA and ATAC
ctfp_dt <- rbindlist(lapply(c("adult", "gastrula"), function(x) {
  dt <- fread(file.path(
    "results", "Metacells", "metacell",
    sprintf("mapping_metacell_genes_exp_FC2_acc_FC4_spearman_%s.tsv", x)
  ))
  dt[, metacell := paste(x, metacell, sep = "_")][, .(SEACell, metacell)]
}))

# mapping to chromVAR ordered SEACells
stopifnot(all(colnames(chromvar_mat) %in% colnames(ctfp_mat)))
ctfp_mat <- ctfp_mat[, colnames(chromvar_mat)]
```

Calculate correlation of gene scores and motif deviation Z scores.

```{r}
# calculate correlations
all.equal(colnames(gene_score_mat), colnames(chromvar_mat))
mot_gen_cor <- cor(t(gene_score_mat), t(chromvar_mat))
saveRDS(
  mot_gen_cor,
  file.path(
    "results", "Archetypes",
    sprintf("ChromVAR-%s", arc_id),
    "correlation-seacells-archetype-motif-score-gene-score.rds"
  )
)
```

Calculate correlation of gene expression and motif deviation Z scores.

```{r}
# calculate correlations
all.equal(colnames(ctfp_mat), colnames(chromvar_mat))
mot_exp_cor <- cor(t(ctfp_mat), t(chromvar_mat))
saveRDS(
  mot_exp_cor,
  file.path(
    "results", "Archetypes",
    sprintf("ChromVAR-%s", arc_id),
    "correlation-seacells-archetype-motif-score-gene-expression-metacell.rds"
  )
)
```

For every TF gene, find best correlated motif (among assigned ones, or
among all for genes without any assigned motifs).

```{r}
# get all accessibility-motif pairwise correlation values in data frame
mot_gen_cor <- readRDS(
  file.path(
    "results", "Archetypes",
    sprintf("ChromVAR-%s", arc_id),
    "correlation-seacells-archetype-motif-score-gene-score.rds"
  )
)
mot_gen_cor_dt <- as.data.table(mot_gen_cor, keep.rownames = "gene")
mot_gen_cor_dt <- melt.data.table(
  mot_gen_cor_dt,
  id.vars = "gene",
  variable.name = "archetype_name",
  value.name = "gene_score_correlation"
)

# get all expression-motif pairwise correlation values in data frame
mot_exp_cor <- readRDS(
  file.path(
    "results", "Archetypes",
    sprintf("ChromVAR-%s", arc_id),
    "correlation-seacells-archetype-motif-score-gene-expression-metacell.rds"
  )
)
mot_exp_cor_dt <- as.data.table(mot_exp_cor, keep.rownames = "gene")
mot_exp_cor_dt <- melt.data.table(
  mot_exp_cor_dt,
  id.vars = "gene",
  variable.name = "archetype_name",
  value.name = "gene_expression_correlation"
)
mot_exp_cor_dt <- mot_exp_cor_dt[!grepl("orphan_peak", gene)]

# combine
cor_dt <- merge.data.table(
  mot_gen_cor_dt, mot_exp_cor_dt, by = c("gene", "archetype_name"),
  all = TRUE, sort = FALSE
)
cor_dt[is.na(gene_expression_correlation), gene_expression_correlation := 0]
cor_dt[is.na(gene_score_correlation), gene_score_correlation := 0]
setorder(cor_dt, gene, -gene_score_correlation, -gene_expression_correlation)
cor_dt[, rank := seq_len(nrow(.SD)), gene]

# indicate which gene-motif pairs were assigned
cor_dt[, pair := paste(gene, archetype_name, sep = "__")]
dict[, pair := paste(gene, archetype_name, sep = "__")]
cor_dt[, assigned := FALSE][pair %in% dict$pair, assigned := TRUE]
cor_dt[, pair := NULL]
dict[, pair := NULL]

# get motif structural class
tf_fam_dt <- unique(dict[, .(archetype_name, motif, tf_family, source)])

# for CisBP motifs, we retrieve the class of a gene they are assigned to in CisBP
cisbp_dt_all <- fread(file.path(cisbp_dir, "cisbp_nvec_motifs.tsv"))
cisbp_names = cisbp_dt_all[,.N, Family_Name][order(Family_Name)]$Family_Name
tf_names = tf_fam_dt[, .N, tf_family][order(tf_family)]$tf_family
cisbp_dt_all[, Family_Name := str_replace_all(Family_Name, c(
  "AP-2" = "AP2",
  "ARID/BRIGHT" = "ARID_BRIGHT",
  "C2H2 ZF$" = "zf-C2H2",
  "C2H2 ZF,Myb/SANT" = "zf-C2H2,Myb_SANT",
  "E2F" = "E2F_TDP",
  "Sox" = "HMGbox_Sox",
  "Homeodomain$" = "Homeodomains",
  "Homeodomains,POU" = "Pou/Homeodomain",
  "Homeodomain,POU" = "Pou/Homeodomain",
  "Homeodomain,Paired box" = "Pax/Homeodomain",
  "Homeodomains,Pax" = "Pax/Homeodomain",
  "MADS box" = "MADS-box_SRF",
  "Myb/SANT" = "Myb",
  "Paired box" = "Pax",
  "Runt" = "Runt_Runx",
  "SMAD" = "SMAD_MH1",
  "THAP finger" = "THAP_finger",
  "bZIP,C2H2 ZF" = "bZIP,zf-C2H2"
))]
cisbp_motifs <- unique(tf_fam_dt[grep("M\\d+_2.00", motif)]$motif)
for (x in cisbp_motifs) {
  fams <- cisbp_dt_all[Motif_ID == x]$Family_Name
  if (unique(length(fams)) >= 1) {
    fam <- unique(fams)
    if (length(fam) > 1) {
      sprintf("%s hits for x", length(fam))
    }
    tf_fam_dt[motif == x, tf_family := fam[1]]
  }
}
tf_fam_dt[, motif := NULL]
tf_fam_dt <- unique(tf_fam_dt)

# for Homer motifs, we have to guess structural class
tf_fam_dt[tf_family == "" & grepl("Ash1", archetype_name, ignore.case = TRUE), tf_family := "GATA"]
tf_fam_dt[tf_family == "" & grepl("GATA", archetype_name, ignore.case = TRUE), tf_family := "GATA"]
tf_fam_dt[tf_family == "" & grepl("E-box", archetype_name, ignore.case = TRUE), tf_family := "HLH"]
tf_fam_dt[tf_family == "" & grepl("Fox", archetype_name, ignore.case = TRUE), tf_family := "Forkhead"]
tf_fam_dt[tf_family == "" & grepl("Homeobox", archetype_name, ignore.case = TRUE), tf_family := "Homeodomains"]
tf_fam_dt[tf_family == "" & grepl("Hox", archetype_name, ignore.case = TRUE), tf_family := "Homeodomains"]
tf_fam_dt[tf_family == "" & grepl("Isl", archetype_name, ignore.case = TRUE), tf_family := "Homeodomains"]
tf_fam_dt[tf_family == "" & grepl("Pax", archetype_name, ignore.case = TRUE), tf_family := "Pax"]
tf_fam_dt[tf_family == "" & grepl("Pou", archetype_name, ignore.case = TRUE), tf_family := "Pou/Homeodomain"]
tf_fam_dt[tf_family == "" & grepl("Tbx", archetype_name, ignore.case = TRUE), tf_family := "T-box"]
tf_fam_dt[tf_family == "" & grepl("Run", archetype_name, ignore.case = TRUE), tf_family := "Runt_Runx"]
tf_fam_dt[tf_family == "" & grepl("Sox", archetype_name, ignore.case = TRUE), tf_family := "HMGbox_Sox"]
tf_fam_dt[tf_family == "" & grepl("Zic", archetype_name, ignore.case = TRUE), tf_family := "zf-C2H2"]
tf_fam_dt[tf_family == "" & grepl("ZNF", archetype_name, ignore.case = TRUE), tf_family := "zf-C2H2"]
for (fm in sort(unique(tf_fam_dt$tf_family))) {
  tf_fam_dt[tf_family == "" & grepl(fm, archetype_name, ignore.case = TRUE), tf_family := fm]
}

# after all this, we still don't have class for these archetypes
# unique(sort(str_remove(tf_fam_dt[tf_family==""]$archetype_name,"ARCH\\d+_")))

# add this info to dataframe
tf_fam_dt <- unique(tf_fam_dt)
setnames(tf_fam_dt, c("tf_family"), c("archetype_family"))
tf_fam_dt[, source := factor(source, levels = c("CisBP_D","CisBP_I","CisBP_N","Homer_known","Homer_denovo"))]
setorder(tf_fam_dt, source)
tf_fam_dt <- tf_fam_dt[, .SD[1], archetype_name]
cor_dt <- merge.data.table(
  cor_dt, tf_fam_dt, by = "archetype_name",
  all.x = TRUE, sort = FALSE
)
cor_dt[is.na(archetype_family), archetype_family := ""]

# add gene metadata
tf_fam_dt <- tfan[, .(gene, og, pfam)]
tf_fam_dt[, tf_family := str_remove(str_extract(og, ".+(?=.HG)"), "^tfs.")]
tf_fam_dt[grep("PAX$", pfam), tf_family := "Pax"]
tf_fam_dt[grep("PAX/Homeodomain$", pfam), tf_family := "Pax/Homeodomain"]
tf_fam_dt[grep("Pou", pfam), tf_family := "Pou/Homeodomain"]
tf_fam_dt[, tf_family := str_replace_all(tf_family, c("AP-2" = "AP2"))]
tf_fam_dt[, c("og", "pfam") := NULL]
cor_dt <- merge.data.table(
  cor_dt, tf_fam_dt, by = "gene",
  all.x = TRUE, sort = FALSE, allow.cartesian = TRUE
)
cor_dt[is.na(tf_family), tf_family := ""]

# keep only true TFs
cor_dt <- cor_dt[gene %in% tfan$gene]
unique(cor_dt[, .(gene, tf_family)])[, .N, tf_family]

# keep info if any motif is assigne to TF from CisBP
cor_dt[, any_assigned := sum(assigned) > 0, gene]

# save
fwrite(
  cor_dt,
  file.path(
    "results", "Archetypes",
    sprintf("ChromVAR-%s", arc_id),
    "correlation-seacells-archetype-motif-score-gene.tsv.gz"
  ),
  sep = "\t"
)
```

Plot distribution of gene score - motif deviation Z score correlations.

```{r}
cor_dt <- fread(file.path(
  "results", "Archetypes", sprintf("ChromVAR-%s", arc_id),
  "correlation-seacells-archetype-motif-score-gene.tsv.gz"
))

gp_top_cor <- ggplot(
    cor_dt[order(-gene_score_correlation)][, .SD[1], gene],
    aes(gene_score_correlation)
  ) +
  geom_density() +
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  scale_x_continuous(limits = c(0, 1), expand = expansion(mult = c(0, 0))) +
  theme(
    panel.grid.major = element_line(size = 0.1)
  ) +
  labs(x = "top gene score-motif correlation")

ggsave(
  file.path(fig_dir, "tfs_accessibility_motifs_top_correlations.pdf"),
  gp_top_cor,
  width = 8, height = 4
)
```

Plot distribution of gene expression - motif deviation Z score
correlations.

```{r}
gp_top_cor <- ggplot(
    cor_dt[order(-gene_expression_correlation)][, .SD[1], gene],
    aes(gene_expression_correlation)
  ) +
  geom_density() +
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  scale_x_continuous(limits = c(0, 1), expand = expansion(mult = c(0, 0))) +
  theme(
    panel.grid.major = element_line(size = 0.1)
  ) +
  labs(x = "top gene expression-motif correlation")
ggsave(
  file.path(fig_dir, "tfs_expression_motifs_top_correlations.pdf"),
  gp_top_cor,
  width = 8, height = 4
)
```

Classify motif to gene matches.

```{r}
cor_dt <- fread(file.path(
  "results", "Archetypes",
  sprintf("ChromVAR-%s", arc_id),
  "correlation-seacells-archetype-motif-score-gene.tsv.gz"
))

# # replace as many of these as possible
# setdiff(sort(unique(cor_dt$tf_family)), sort(unique(cor_dt$archetype_family)))
# # with these
# sort(unique(cor_dt$archetype_family))

# select motifs
cor_thr <- 0.3
class_dt <- cor_dt[
  (gene_score_correlation > cor_thr |
  gene_expression_correlation > cor_thr) &
  archetype_family == tf_family
]

# add best assigned motifs for genes that are not included above
miss_dt <- cor_dt[!gene %in% class_dt$gene & assigned == TRUE][
  order(-gene_score_correlation)][
    , .SD[1], gene]
class_dt <- merge.data.table(
  class_dt, miss_dt,
  by = intersect(colnames(class_dt), colnames(miss_dt)),
  all = TRUE, sort = FALSE
)

# add best motifs regardless of correlation threshold for genes that are not included above
miss_dt <- cor_dt[!gene %in% class_dt$gene & archetype_family == tf_family][
  order(-gene_score_correlation)][
    , .SD[1], gene]
class_dt <- merge.data.table(
  class_dt, miss_dt,
  by = intersect(colnames(class_dt), colnames(miss_dt)),
  all = TRUE, sort = FALSE
)

# add best motifs for genes that are not included above
miss_dt <- cor_dt[!gene %in% class_dt$gene][
  order(-gene_score_correlation)][
    , .SD[1], gene]
class_dt <- merge.data.table(
  class_dt, miss_dt,
  by = intersect(colnames(class_dt), colnames(miss_dt)),
  all = TRUE, sort = FALSE
)

# classify
classify_motifs_assignment <- function(dt, cor_thr = 0.5) {
  dt[, class := "X"]
  dt[gene_score_correlation >= cor_thr &
    gene_expression_correlation >= cor_thr, class := "A1"]
  dt[class == "A1" & archetype_family != tf_family, class := "A2"]
  dt[gene_score_correlation >= cor_thr &
    gene_expression_correlation < cor_thr, class := "B1"]
  dt[class == "B1" & archetype_family != tf_family, class := "B2"]
  dt[gene_score_correlation < cor_thr &
    gene_expression_correlation >= cor_thr, class := "C1"]
  dt[class == "C1" & archetype_family != tf_family, class := "C2"]
  dt[gene_score_correlation < cor_thr &
    gene_expression_correlation < cor_thr, class := "D1"]
  dt[class == "D1" & archetype_family != tf_family, class := "D2"]
  dt
}
class_dt <- classify_motifs_assignment(class_dt, cor_thr)

# sanity check - this needs to be empty
class_dt[class == "X"]

# genes for which we can map TF and motif family
gns_map <- unique(
  class_dt[tf_family != "" & archetype_family != ""][
    tf_family == archetype_family
  ]$gene
)
# genes for which we cannot map TF and motif family
gns_unm <- unique(setdiff(class_dt$gene, gns_map))
gns_unm_orp <- unique(class_dt[gene %in% gns_unm][tf_family == ""]$gene)
gns_unm_oth <- setdiff(gns_unm, gns_unm_orp)

# select best motifs based on accessibility correlation
class_cor_access <- rbindlist(list(
    class_dt[gene %in% gns_map][
      order(-gene_score_correlation)][
        tf_family == archetype_family][, .SD[1], gene],
    class_dt[gene %in% gns_unm_orp][
      order(-gene_score_correlation)][
        tf_family == ""][, .SD[1], gene],
    class_dt[gene %in% gns_unm_oth][
      order(-gene_score_correlation)][
        archetype_family == ""][, .SD[1], gene]
))[, .(
  gene, archetype_name, rank, class,
  gene_score_correlation, gene_expression_correlation,
  archetype_family, tf_family, source, assigned, any_assigned
)]

# select best motifs based on expression correlation
class_cor_express <- rbindlist(list(
    class_dt[gene %in% gns_map][
      order(-gene_expression_correlation)][
        tf_family == archetype_family][, .SD[1], gene],
    class_dt[gene %in% gns_unm_orp][
      order(-gene_expression_correlation)][
        archetype_family == ""][, .SD[1], gene],
    class_dt[gene %in% gns_unm_oth][
      order(-gene_expression_correlation)][
        archetype_family == ""][, .SD[1], gene]
))[, .(
  gene, archetype_name, rank, class,
  gene_score_correlation, gene_expression_correlation,
  archetype_family, tf_family, source, assigned, any_assigned
)]

# cobine best motifs
class_dt <- merge.data.table(
  class_cor_access, class_cor_express,
  by = c(
    "gene", "archetype_name", "rank", "class",
    "gene_score_correlation", "gene_expression_correlation",
    "archetype_family", "tf_family", "source", "assigned", "any_assigned"
  ),
  all = TRUE
)

# one archetype per class for each gene
# if there are multiple, choose best correlated with accessibility (A, B, D),
# unless it was saved by expression (C), then choose best corr with expression
class_top_dt <- rbindlist(list(
  class_dt[
    grepl("C", class)][
      order(-gene_expression_correlation)][
        , .SD[1], .(gene, class)],
  class_dt[
    !grepl("C", class)][
      order(-gene_score_correlation)][
        , .SD[1], .(gene, class)]
))

# sanity check - this needs to be empty
class_top_dt[, .N, .(gene, class)][N > 1]

# one archetype per gene
# select best correlated class (A > B > C > D)
class_top_dt[, class := factor(
  class, levels = c("A1", "A2", "B1", "B2", "C1", "C2", "D1", "D2")
)]
class_top_dt <- class_top_dt[, .SD[order(class)][1], gene]

# also include top pre-assigned motif per gene
cor_class_dt <- merge.data.table(
  cor_dt, unique(class_dt[, .(gene, archetype_name, class)]),
  by = c("gene", "archetype_name"), all.x = TRUE, sort = FALSE
)
cor_class_dt <- classify_motifs_assignment(cor_class_dt, cor_thr)
cor_top_dt <- rbindlist(list(
  cor_class_dt[assigned == TRUE][
    grepl("C", class)][
      order(-gene_expression_correlation)][
        , .SD[1], .(gene, class)],
  cor_class_dt[assigned == TRUE][
    !grepl("C", class)][
      order(-gene_score_correlation)][
        , .SD[1], .(gene, class)]
))
cor_top_dt[, class := factor(
  class,
  levels = c("A1", "A2", "B1", "B2", "C1", "C2", "D1", "D2")
)]
cor_top_dt <- cor_top_dt[order(gene, class)][, .SD[1], gene]

# combine top correlated motifs and assigned motifs
cols <- colnames(class_top_dt)
class_all <- unique(rbindlist(
  list(class_top_dt, cor_top_dt[, ..cols]),
  use.names = TRUE)[order(gene)]
)
class_all[, class := factor(
  class,
  levels = c("A1", "A2", "B1", "B2", "C1", "C2", "D1", "D2")
)]
setorder(class_all, gene, class)

# when there are two motifs per gene, are they of the same family?
class_all[, same_family := ifelse(
  length(unique(.SD$archetype_family)) > 1, FALSE, TRUE
), gene]

# if top correlated motif is different family, keep both assigned motif and top motif
class_top_diff <- class_all[same_family == FALSE]

# if top correlated motif and assigned motif are the same family, keep top motif
class_top_same_ids <- class_all[same_family == TRUE][
  grepl("C", class), gene_expression_correlation := 0][
    order(class, -gene_score_correlation, -gene_expression_correlation)][
      , .SD[1], gene][, id := paste(gene, archetype_name)]$id
class_top_same <- class_all[same_family == TRUE][
  , id := paste(gene, archetype_name)][id %in% class_top_same_ids][
    , id := NULL]

# combine
class_top_all <- rbindlist(list(class_top_diff, class_top_same))
class_top_all[, same_family := NULL]

# inspect genes with multiple motifs
class_top_all[gene %in% class_top_all[,.N,gene][N>1]$gene]

# we keep top correlated one
class_top_all <- class_top_all[, .SD[1], gene]

# CisBP initial assignment metadata
class_top_all[, CisBP_assignment := "none"]
class_top_all[assigned == TRUE, CisBP_assignment := "assigned"]
class_top_all[assigned == FALSE & any_assigned == TRUE, CisBP_assignment := "other"]
class_top_all[, CisBP_assignment := factor(
  CisBP_assignment, levels = c("assigned", "other", "none")
)]

# add gene annotation
class_top_all <- merge.data.table(
  class_top_all, tfan, by = "gene", 
  all.x = TRUE, sort = FALSE
)
setcolorder(class_top_all, c(
  colnames(tfan), "tf_family",
  "archetype_name", "archetype_family", "source", "rank", 
  "gene_score_correlation", "gene_expression_correlation",
  "class"
))

# keep only TFs with motif of same family
class_top_asg <- class_top_all[tf_family == archetype_family]

# save
fwrite(
  class_top_asg,
  file.path(
    "results", "Archetypes",
    sprintf("motif-assignment-archetypes-%s.tsv.gz", arc_id)
  ),
  sep = "\t"
)
```

We now load the correlation data to plot the correlations of ranked motifs, used for motif assignment.

```{r}
# load all ranked motifs per TF
cor_dt <- fread(file.path(
  "results", "Archetypes",
  sprintf("ChromVAR-%s", arc_id),
  "correlation-seacells-archetype-motif-score-gene.tsv.gz"
))

# load assigned motifs per TF
class_top_asg <- fread(
  file.path(
    "results", "Archetypes",
    sprintf("motif-assignment-archetypes-%s.tsv.gz", arc_id)
  )
)

# motif logos
mta_pwm <- unlist(lapply(c(
  file.path("results", "Archetypes", sprintf("motif-archetypes-%s-pwms.rds", arc_id)),
  file.path("results", "Motifs", "motifs.rds")
), readRDS))
names(mta_pwm) <- sapply(mta_pwm, function(m) m@name)
```

For the selected gene, plot a detailed plot for inspection.

```{r}
g <- "Nvec_vc1.1_XM_001632929.3" # shox2
g <- "Nvec_vc1.1_XM_001641129.3" # znf845, no assigned motifs
g <- "Nvec_vc1.1_XM_032363992.2" # pou4, agrees with direct motif assignment

gene_cor_dt <- cor_dt[gene == g]
gene_top_dt <- class_top_asg[gene == g]
nm <- gnan[gene == g]$common_name
if (is.na(nm)) nm <- gnan[gene == g]$gene_name
if (is.na(nm)) nm <- ""
nm <- str_replace_all(nm, "/", "_")

# indicate selected motif
gene_cor_dt[,selected := FALSE][archetype_name == gene_top_dt$archetype_name, selected := TRUE]

# subset all ranked motifs
best_rank <- gene_cor_dt[archetype_name == gene_top_dt$archetype_name]$rank
show_ranks <- seq(pmax(1, best_rank - 10), best_rank + 150)
plot_cor_dt <- gene_cor_dt[rank %in% show_ranks]

# transform for plotting
plot_cor_dt <- melt.data.table(plot_cor_dt, measure.vars = c("gene_score_correlation", "gene_expression_correlation"))
plot_cor_dt[, same_family := archetype_family == tf_family]

# detailed plot
gp_cor <- ggplot(plot_cor_dt, aes(rank, value)) +
  geom_line(aes(color = variable)) +
  geom_point(
    aes(color = variable, fill = same_family), 
    size = 2, shape = 21
  ) +
  scale_y_continuous() +
  scale_x_reverse(
    expand = expansion(mult = c(0, 0)),
    breaks = plot_cor_dt$rank,
    sec.axis = sec_axis(
      ~ ., 
      name = "motif", 
      breaks = plot_cor_dt$rank,
      labels = paste(
        ifelse (plot_cor_dt$archetype_family != "", sprintf("[%s]", plot_cor_dt$archetype_family), ""),
        plot_cor_dt$archetype_name
      )
    )
  ) +
  scale_color_manual(values = c(
    "gene_score_correlation" = "darkgreen", 
    "gene_expression_correlation" = "darkred"
  )) +
  scale_fill_manual(values = c(
    "TRUE" = "black", 
    "FALSE" = "grey"
  )) +
  theme(
    legend.position = "bottom",
    legend.box = "horizontal",
    legend.box.just = "center",
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
    axis.text.x.top = element_text(angle = 90, hjust = 0, vjust = 0.5),
    axis.text.y = element_text(size = 7),
    panel.grid.major = element_line(size = 0.1)
  ) +
  guides(
    color = guide_legend(nrow = 2),
    fill = guide_legend(nrow = 2)
  ) +
  coord_flip() +
  labs(
    x = "rank", y = "correlation",
    title = sprintf("%s %s", g, nm)
  )
ggsave(
  file.path(fig_dir, sprintf("tfs_motifs_assignment_%s_%s.pdf", g, nm)),
  gp_cor, width = 8, height = 18
)
```

Minimal plot for figures.

```{r}
gs <- c(
  "Nvec_vc1.1_XM_032363992.2", # pou4, agrees with direct motif assignment
  "Nvec_vc1.1_XM_001641129.3", # znf845, no assigned motifs
  "Nvec_vc1.1_XM_001632929.3", # shox2, does not agree with direct motif assignment
  "Nvec_vc1.1_XM_032378021.2" # brachyury, agrees with ChIP motif
)
gls <- list()
gns <- c()
for (g in gs) {

  # select all ranked motifs
  gene_cor_dt <- cor_dt[gene == g]
  gene_top_dt <- class_top_asg[gene == g]
  nm <- gnan[gene == g]$common_name
  if (nm=="") nm <- gnan[gene == g]$gene_name
  if (nm=="") nm <- gnan[gene == g]$og
  nm <- str_replace_all(nm, "/", "_")
  gns[g] <- nm

  # subset all ranked motifs
  best_rank <- gene_cor_dt[archetype_name == gene_top_dt$archetype_name]$rank
  show_ranks <- unique(c(c(1, 2), seq(pmax(1, best_rank - 3), best_rank + 10)[1:8]))
  g_dt <- gene_cor_dt[rank %in% show_ranks]
  g_dt[, selected := FALSE][rank == best_rank, selected := TRUE]
  g_dt[, rank := as.factor(rank)]
  g_dt[, gene_name := nm]
  gls[[g]] <- g_dt

}
plot_cor_dt <- rbindlist(gls)

# transform for plotting
plot_cor_dt <- melt.data.table(
  plot_cor_dt, 
  measure.vars = c("gene_score_correlation", "gene_expression_correlation")
)
plot_cor_dt[, same_family := archetype_family == tf_family]
plot_cor_dt[, gene := factor(gene, levels = gs)]

# small plot
gp_cor_minimal <- ggplot(plot_cor_dt, aes(rank, value)) +
  geom_line(aes(group = variable, linetype = variable)) +
  geom_point(
    aes(fill = same_family, color = selected), 
    size = 2, shape = 21
  ) +
  scale_y_continuous() +
  scale_x_discrete(
    expand = expansion(mult = c(0.05, 0.05)),
    breaks = plot_cor_dt$rank
  ) +
  scale_color_manual(values = c(
    "TRUE" = "red", 
    "FALSE" = "grey60"
  )) +
  scale_fill_manual(values = c(
    "TRUE" = "black", 
    "FALSE" = "grey"
  )) +
  scale_linetype_manual(values = c(
    "gene_score_correlation" = 2, 
    "gene_expression_correlation" = 3
  )) +
  facet_grid(
    . ~ gene, 
    scales = "free_x", space = "free_x",
    labeller = labeller(gene = structure(gns, names = gs))
  ) +
  theme(
    legend.position = "bottom",
    legend.box = "vertical",
    legend.box.just = "center",
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
    axis.text.x.top = element_text(angle = 90, hjust = 0, vjust = 0.5),
    panel.grid.major = element_line(size = 0.1)
  ) +
  guides(
    color = guide_legend(nrow = 2),
    fill = guide_legend(nrow = 2)
  ) +
  labs(
    x = "rank", y = "correlation"
  )

# plot motif logos
archs <- unique(plot_cor_dt[, .(gene, archetype_name)])
archs_logo <- lapply(archs$archetype_name, function(x) {
  mot <- mta_pwm[[x]]@motif
  ggseqlogo::ggseqlogo(mot) + theme_void() + coord_flip()
})
gp_mot <- patchwork::wrap_plots(archs_logo, ncol = length(archs_logo))

gp_fig <- gp_cor_minimal / gp_mot + plot_layout(
    guides = "collect",
    heights = c(1, 0.2)
  )

# save figure
ggsave(
  file.path(fig_dir, "tfs_motifs_assignment_figure.pdf"),
  gp_fig, width = 16, height = 4
)

```

For experimental validations, we want to keep also CisBP motifs that
didn't make it to correlation based assignments.

```{r}
# all initially assigned archetypes from CiSBP
asign_mta <- cor_dt[assigned==TRUE][order(rank)]
asign_oth_mta <- asign_mta[!gene %in% class_top_asg[assigned == TRUE]$gene]
asign_oth_mta <- asign_oth_mta[,.SD[1],gene]

# TFs with no archetypes assigned (CisBP nor correlation)
asign_non_mta <- cor_dt[!gene %in% c(class_top_asg$gene, asign_oth_mta$gene)]
asign_non_mta_1 <- asign_non_mta[archetype_family==tf_family][,.SD[1],gene]
asign_non_mta_2 <- asign_non_mta[!gene %in% asign_non_mta_1$gene][,.SD[1],gene]
asign_non_mta <- rbindlist(list(asign_non_mta_1, asign_non_mta_2))

# combine all TFs
cols <- intersect(colnames(class_top_asg),colnames(cor_dt))
class_oth_all <- rbindlist(list(
  "correlation" = class_top_asg[,..cols][, correlation := TRUE],
  "cisbp" = asign_oth_mta[,..cols][, correlation := FALSE],
  "none" = asign_non_mta[,..cols][, correlation := FALSE]
), idcol = "selected_by")

# sumarize groups
class_oth_all[, group := "none"]
class_oth_all[assigned == TRUE, group := "assigned"]
class_oth_all[correlation == TRUE, group := "correlation"]
class_oth_all[, group := paste(sort(unique(.SD$group)), collapse = "+"), gene]
class_oth_all[assigned == TRUE & correlation == TRUE, group := "assigned+correlation"]

# add gene annotation
class_oth_all <- merge.data.table(
  class_oth_all, tfan, by = "gene", 
  all.x = TRUE, sort = FALSE
)
setcolorder(class_oth_all, colnames(tfan))
setcolorder(class_oth_all, c(cols, "correlation", "selected_by"))
setorder(class_oth_all, gene, selected_by)

# add top similarity to any other archetype
sim_mat <- readRDS(
  file.path(
    "results", "Archetypes",
    sprintf("motif-similarity-archetypes-%s.rds", arc_id)
  )
)
diag(sim_mat) <- NA
sim_dat <- rbindlist(apply(sim_mat, 1, function(x) {
  sim <- x[which.max(x)]
  mta <- colnames(sim_mat)[which.max(x)]
  data.table(archetype_archetype_similarity = sim, most_similar_archetype = mta)
}))
sim_dat[, archetype_name := rownames(sim_mat)]

# source for most similar archetype
arch_sim_dt <- unique(dict[,.(archetype_name, source)])
arch_sim_dt[, source := factor(source, levels = c("CisBP_D", "CisBP_I", "CisBP_N", "Homer_known", "Homer_denovo"))]
setorder(arch_sim_dt, source)
arch_sim_dt <- arch_sim_dt[, .SD[1], archetype_name]
setnames(
  arch_sim_dt, 
  c("archetype_name", "source"), 
  c("most_similar_archetype", "most_similar_archetype_source")
)
sim_dat <- merge.data.table(
  sim_dat, arch_sim_dt, by = "most_similar_archetype",
  all.x = TRUE, sort = FALSE
)

# add to TFs table
arch_source_dt <- merge.data.table(
  class_oth_all, sim_dat,
  by = "archetype_name",
  all.x = TRUE, sort = FALSE
)
setnames(arch_source_dt, "source", "archetype_source")
setcolorder(arch_source_dt, c(
  "gene", "gene_name", "common_name", "og", "pfam", "tf_family",
  "archetype_name", "archetype_family", "archetype_source", 
  "most_similar_archetype", "most_similar_archetype_source", "archetype_archetype_similarity",
  "rank", "gene_score_correlation", "gene_expression_correlation", 
  "assigned", "any_assigned", "correlation", "selected_by", "group"
))

# order for selecting candidates
g1_dt <- arch_source_dt[group=="assigned+correlation"]
g1_gn <- unique(g1_dt[order(-gene_score_correlation)]$gene)
g1_dt[,gene := factor(gene, levels = g1_gn)]
setorder(g1_dt, gene)

g2_dt <- arch_source_dt[group=="correlation"]
g2_gn <- unique(g2_dt[order(-gene_score_correlation)]$gene)
g2_dt[,gene := factor(gene, levels = g2_gn)]
setorder(g2_dt, gene)

g3_dt <- arch_source_dt[group=="none"]
g3_gn <- unique(g3_dt[order(-gene_score_correlation)]$gene)
g3_dt[,gene := factor(gene, levels = g3_gn)]
setorder(g3_dt, gene)

g_dt <- rbindlist(list(g1_dt, g2_dt, g3_dt))

fwrite(g_dt, file.path(
  "results", "Archetypes",
  sprintf("motif-assignment-plus-cisbp-archetypes-%s.tsv.gz", arc_id)
), sep = "\t")

```

Final table for Supplementary materials.

```{r}
cols <- c(
  "gene", "gene_name", "common_name", "og", "pfam", "tf_family",
  "archetype_name", "archetype_family", "rank", 
  "gene_score_correlation","gene_expression_correlation"
)

arc_id <- "PPM-PCC-0.8-IC0.5-5bp"

dt1 <- fread(file.path(
  "results", "Archetypes", 
  sprintf("motif-assignment-archetypes-%s.tsv.gz", arc_id)
))

# TFs with assigned motifs
dt1a <- dt1[!(gene_score_correlation<0.4 & gene_expression_correlation<0.4), ..cols]

# TFs with CisBP motifs
dt1b <- dt1[  gene_score_correlation<0.4 & gene_expression_correlation<0.4 & CisBP_assignment=="assigned", ..cols]

# other TFs
dt2 <- fread(file.path(
  "results", "Archetypes", 
  sprintf("motif-assignment-plus-cisbp-archetypes-%s.tsv.gz", arc_id)
))
dt2a <- dt2[!gene %in% c(dt1a$gene, dt1b$gene)][, ..cols]

# combine
dt <- rbindlist(list(
  dt1a[, assignment := "assigned_correlation"],
  dt1b[, assignment := "assigned_CisBP"],
  dt2a[, assignment := "not_assigned"]
))

# add similarity to other archetypes
dt2b <- unique(
  dt2[, .(archetype_name, archetype_source, most_similar_archetype, most_similar_archetype_source, archetype_archetype_similarity)]
)
dt <- merge.data.table(dt, dt2b, by = "archetype_name", all.x = TRUE, sort = FALSE)

# save
fwrite(dt, file.path("results", "Archetypes", "motif-assignment.tsv.gz"), sep = "\t")
```

Inspect motif assignment.

```{r}
# for plotting
assign_cols <- c(
  "assigned" = "seagreen", 
  "correlation" = "lightgreen", 
  "none" = "orange",
  "assigned+correlation" = "seagreen"
)
assign_expressed_cols <- c(
  "assigned+correlation_not_expressed" = colorspace::lighten("seagreen", 0.5),
  "assigned+correlation_expressed" = "seagreen", 
  "correlation_not_expressed" = colorspace::lighten("lightgreen", 0.5),
  "correlation_expressed" = "lightgreen", 
  "none_not_expressed" = colorspace::lighten("orange", 0.5),
  "none_expressed" = "orange"
)

# assignments
g_dt <- fread(
  file.path(
    "results", "Archetypes",
    sprintf("motif-assignment-plus-cisbp-archetypes-%s.tsv.gz", arc_id)
  )
)

# only expressed TFs 
expressed_genes <- rownames(ctfp_mat)[apply(ctfp_mat, 1, max) > 1.4]
expressed_tfs <- expressed_genes[expressed_genes %in% tfan$gene]
g_dt[, expressed_gene := gene %in% expressed_tfs]
g_dt[, group_expressed := paste(group, ifelse(expressed_gene, "expressed", "not_expressed"), sep = "_")]
g_dt[, group_expressed := factor(group_expressed, levels = names(assign_expressed_cols))]

# euler diagram of motif assignment per TF
euler_dt <- unique(g_dt[,.(gene, assigned, correlation)])
euler_dt[, assigned := any(.SD$assigned), gene]
euler_dt[, correlation := any(.SD$correlation), gene]
euler_dt <- unique(euler_dt)
euler_dt[, none := FALSE][assigned == FALSE & correlation == FALSE, none := TRUE]
require(eulerr)
fit <- euler(euler_dt[,-1])
pdf(file.path(fig_dir, "motif-assignment-stats-euler.pdf"), width = 4, height = 4)
plot(fit, quantities = TRUE, fills = assign_cols)
dev.off()

# summarise assignment groups per TF as barplots
dt_b1 <- unique(g_dt[, .(gene, expressed_gene, group, group_expressed)])
gp_b1 <- ggplot(
    dt_b1,
    aes(group, fill = group_expressed)
  ) +
  geom_bar(color = "black") +
  geom_text(
    aes(label = ..count..),
    stat = "count",
    position = position_stack(vjust = 0.5)
  ) +
  scale_fill_manual(values = assign_expressed_cols) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
  labs(y = "number of TFs", x = "") +
  theme(
    legend.position = "none",
    axis.title.x = element_blank(),
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
    panel.grid.major.y = element_line(size = 0.2)
  )

# for genes that have both CisBP and correlation-selected motif, are they the same motifs?
dt_b2 <- unique(g_dt[, .(gene, expressed_gene, group, group_expressed, archetype_name)][
  group == "assigned+correlation"])[
    , .N, .(gene, expressed_gene, group_expressed)][
      , archetype := ifelse(N==1, "same archetype", "different archetype")]
gp_b2 <- ggplot(
    dt_b2,
    aes(archetype, fill = group_expressed)
  ) +
  geom_bar(color = "black") +
  geom_text(
    aes(label = ..count..),
    stat = "count",
    position = position_stack(vjust = 0.5)
  ) +  
  scale_fill_manual(values = assign_expressed_cols) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
  labs(y = "number of TFs", x = "") +
  theme(
    legend.position = "none",
    axis.title.x = element_blank(),
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
    panel.grid.major.y = element_line(size = 0.2)
  )

# for genes that have no CisBP nor correlation-selected motif, are the motif and best archetype the same famiily?
dt_b3 <- g_dt[, .(gene, group, group_expressed, archetype_name, archetype_family, tf_family)][
  group == "none"][
    , .(same_class = archetype_family == tf_family), group_expressed][
      , structural_class := ifelse(same_class==TRUE, "same class", "different class")]
gp_b3 <- ggplot(
    dt_b3,
    aes(structural_class, fill = group_expressed)
  ) +
  geom_bar(color = "black") +
  geom_text(
    aes(label = ..count..),
    stat = "count",
    position = position_stack(vjust = 0.5)
  ) +  
  scale_fill_manual(values = assign_expressed_cols) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
  labs(y = "", x = "") +
  theme(
    legend.position = "none",
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
    panel.grid.major.y = element_line(size = 0.2)
  )

# save plots
gp_b <- gp_b1 / (gp_b2 + gp_b3) + plot_layout(guides = "collect")
ggsave(
  file.path(fig_dir, "motif-assignment-stats-barplots.pdf"), 
  gp_b, width = 4, height = 10
)

# save counts per assignment group and TF structural class
gp_fam <- ggplot(g_dt, aes(tf_family, fill = group)) +
  geom_bar() +
  geom_text(
    aes(label = ..count..),
    stat = "count",
    vjust = -0.5,
    hjust = 0.5
  ) +
  scale_fill_manual(values = assign_cols) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.2))) +
  facet_wrap("group", ncol = 1) +
  labs(y = "number of TFs") +
  theme(
    legend.position = "none",
    axis.title.x = element_blank(),
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
    panel.grid.major = element_line(size = 0.2)
  )
ggsave(
  file.path(fig_dir, "motif-assignment-stats-family.pdf"), 
  gp_fam, width = 12, height = 8
)
```

Plot motifs logos for assigned motifs.

```{r}
require(ggseqlogo)
require(universalmotif)
require(monaLisa)

# archetypes assignment
class_top_all <- fread(file.path(
  "results", "Archetypes",
  sprintf("motif-assignment-archetypes-%s.tsv.gz", arc_id)
))

# archetypes pwms
mots_arc_lst <- readRDS(file.path(
  "results", "Archetypes",
  sprintf("motif-archetypes-%s-pwms.rds", arc_id)
))
names(mots_arc_lst) <- sapply(mots_arc_lst, function(m) m@name)

# subset only archetypes assigned to any TF
mots_arc_plt <- mots_arc_lst[unique(class_top_all$archetype_short)]

# plot
genes <- unique(class_top_all$gene)
pdf(file.path(fig_dir, "archetypes-genes-logos.pdf"), width = 8, height = 3)
for (x in seq_along(genes)) {
    message(sprintf("%s / %s", x, length(genes)))
    gn <- class_top_all[x]$gene
    pf <- class_top_all[x]$pfam
    og <- class_top_all[x]$og
    cn <- class_top_all[x]$common_name
    ac <- class_top_all[x]$archetype_name
    af <- class_top_all[x]$archetype_family
    tf <- ifelse(cn!="", sprintf("%s (%s)", gn, cn), gn)
    ttl <-  sprintf(
      "%s\nOG: %s\nPFAM: %s\narchetype: %s\narchetype family: %s",
      tf, og, pf, ac, af
    )
    tryCatch({
        print(ggseqlogo(mots_arc_lst[[ac]]@motif) +
            labs(title = ttl)
        )
    }, error = function (e) 
        message(sprintf("Failed to plot %s\n%s", ac, e))
    )
}
dev.off()
```

We look at some of the assignment stats:

-   number of TFs that each archetype gets assigned to

```{r}
# archetypes assignment
class_top_all <- fread(file.path(
  "results", "Archetypes",
  sprintf("motif-assignment-archetypes-%s.tsv.gz", arc_id)
))

# count number of TFs that each archetype gets assigned to
dt_num_tfs <- copy(class_top_all)
dt_num_tfs[, num_tfs := length(unique(.SD$gene)), archetype_name]

# order archetypes by number of TFs they are assigned to
setorder(dt_num_tfs, num_tfs)
dt_num_tfs[, archetype_name := factor(archetype_name, levels = unique(dt_num_tfs$archetype_name))]

# total counts of TFs and archetypes
num_arc <- length(unique(dt_num_tfs$archetype_name))
num_tfs <- length(unique(dt_num_tfs$gene))

# plot
gp_num_tfs <- ggplot(dt_num_tfs, aes(archetype_name)) +
  geom_bar() +
  geom_text(
    aes(label = ..count..),
    stat = "count",
    vjust = 0.5,
    hjust = -0.5
  ) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
    panel.grid.major.x = element_line(size = 0.2)
  ) +
  coord_flip() +
  labs(
    x = "archetypes",
    y = "number of TFs",
    title = sprintf("%s archetypes assigned to %s TFs", num_arc, num_tfs)
  )
ggsave(
  file.path(fig_dir, "motif-assignment-num-tfs.pdf"), 
  gp_num_tfs, width = 12, height = 46
)
```

-   per assignment class, how many TFs got archetypes that were already
    assigned (CisBP) vs how many had a different archetype assigned, vs
    how many had no archetype assigned

```{r}
# assignmnet types
assign_cols <- c("assigned" = "seagreen", "other" = "seagreen3", "none" = "lightgreen")
assign_lvls <- names(assign_cols)
dt_assign <- copy(class_top_all)
dt_assign[, assignment := factor(CisBP_assignment, levels = assign_lvls)]

# number of different assignments types in each assignment class
gp_class <- ggplot(dt_assign, aes(class, fill = assignment)) +
  geom_bar() +
  scale_y_continuous(
    expand = expansion(mult = c(0, 0.05))
  ) +
  scale_fill_manual(
    values = assign_cols
  ) +
  theme(
    panel.grid.major.y = element_line(size = 0.2),
    legend.position = "bottom"
  )

# assignmets piechart
class_assign <- dt_assign[, .N, assignment][order(-N)][,prop := N / sum(N)]
gp_class_pie <- ggplot(class_assign, aes("", N, fill = assignment)) +
  geom_bar(stat = "identity", width = 1, color = "black") +
  coord_polar("y", start = 0) +
  scale_fill_manual(
    values = assign_cols
  ) +
  geom_text(
    aes(label = sprintf(
      "%s (%s)", scales::percent(prop), N
    ), x = 1.1),
    position = position_stack(vjust = 0.5),
    color = "black"
  ) +
  theme_void()

# class groups piechart
class_group <- dt_assign[
  , class_group := str_extract(class, "A|B|C|D")][
    , .N, class_group][order(-N)][, prop := N / sum(N)]
gp_group_pie <- ggplot(class_group, aes("", N, fill = class_group)) +
  geom_bar(stat = "identity", width = 1, color = "black") +
  coord_polar("y", start = 0) +
  scale_fill_brewer(direction = -1) +
  geom_text(
    aes(label = sprintf(
      "%s (%s)", scales::percent(prop), N
    ), x = 1.1),
    position = position_stack(vjust = 0.5),
    color = "black"
  ) +
  theme_void()

# save
ggsave(
  file.path(
    fig_dir,
    sprintf("motif-assignment-classes-type-cor%s.pdf", cor_thr)
  ),
  (gp_group_pie + gp_class_pie) / gp_class + plot_annotation(title = "Initial assignments"),
  width = 10, height = 8
)

ggsave(
  file.path(
    fig_dir,
    sprintf("motif-assignment-classes-cor%s.pdf", cor_thr)
  ),
  gp_class_pie + labs(title = "Initial assignments"),
  width = 5, height = 6
)
```

-   per assignment class, how many TFs from each structural family are
    there

```{r}
# number of different TF families in each assignment class
gp_class_tf <- ggplot(
    class_top_all[
      , .N, .(tf_family, class)][
        , tf_family_label := ifelse(N > 10, tf_family, "")][
          tf_family == "", tf_family_label := "-"][
            , tf_family_label := str_replace_all(tf_family_label, c(
              "Homeodomains" = "Homeo",
              "zf-C4_Nuclear_receptors" = "zf-C4-NR",
              "NFYB_NFYC" = "NFYB-C",
              "HMGbox_Sox" = "SOX",
              "Forkhead" = "FOX"
            ))],
    aes(class, N, fill = tf_family, label = tf_family_label)
  ) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(
    position = position_stack(vjust = 0.5)
  ) +
  scale_y_continuous(
    expand = expansion(mult = c(0, 0.05))
  ) +
  theme(
    panel.grid.major.y = element_line(size = 0.2),
    legend.position = "none"
  ) +
  labs(title = "TF family")

# plot
gp_class_archetype <- ggplot(
    dt_assign[
      , .N, .(archetype_family, class)][
        , archetype_family_label := ifelse(N > 10, archetype_family, "")][
          archetype_family == "", archetype_family_label := "-"][
            , archetype_family_label := str_replace_all(
              archetype_family_label, c(
                "Homeodomains" = "Homeo",
                "zf-C4_Nuclear_receptors" = "zf-C4-NR",
                "NFYB_NFYC" = "NFYB-C",
                "HMGbox_Sox" = "SOX",
                "Forkhead" = "FOX"
              )
            )
          ],
    aes(class, N, fill = archetype_family, label = archetype_family_label)
  ) +
  geom_bar(stat = "identity", position = "stack") +
  geom_text(
    position = position_stack(vjust = 0.5)
  ) +
  scale_y_continuous(
    expand = expansion(mult = c(0, 0.05))
  ) +
  theme(
    panel.grid.major.y = element_line(size = 0.2),
    legend.position = "none"
  ) +
  labs(title = "Archetype family")

# save
ggsave(
  file.path(
    fig_dir,
    sprintf("motif-assignment-classes-structural-family-cor%s.pdf", cor_thr)
  ),
  gp_class_tf + gp_class_archetype,
  width = 12, height = 5
)
```

## Experimentally determined motifs

Besides archetypes, we will include motifs for TFs that we determined
experimentally:

- directly determined motifs from CiSBP
   
```{r}
#| label: cisbp_direct_motifs

 # TF and motif info
cisbp_dt_all <- fread(file.path(cisbp_dir, "cisbp_nvec_motifs.tsv"))
cisbp_dt <- cisbp_dt_all[TF_Status == "D" & Motif_Species == "Nematostella_vectensis" & TF_Name != ""]

# add tf annotations
cisbp_dt[, c("PFAM", "name") := NULL]
cisbp_dt <- merge.data.table(
  cisbp_dt, tfan, by.x = "TF_Name", by.y = "gene",
  all.x = TRUE, sort = FALSE
)
cisbp_dt[, TF_Common_Name := TF_Name]
cisbp_dt[gene_name != "", TF_Common_Name := gene_name]
cisbp_dt[common_name != "", TF_Common_Name := common_name]

# genes vector
genes_cisbp <- structure(
  cisbp_dt$TF_Name,
  names = cisbp_dt$TF_Common_Name
)

# TF family vector - we replace CIsBP family names with the ones we use in TF annotations
fam_replace <- c(
  "Homeodomain,POU" = "Pou/Homeodomain",
  "Homeodomain" = "Homeodomains"
)
for (i in names(fam_replace)) {
  cisbp_dt[Family_Name == i, Family_Name := fam_replace[i]]
}
tffam_cisbp <- cisbp_dt[, setNames(Family_Name, TF_Common_Name)]

# motif PWMs
motifs_cisbp <- readRDS(file.path(cisbp_dir, "cisbp_nvec_motifs.rds"))
names(motifs_cisbp) <- sapply(motifs_cisbp, function(m) m@name)
motifs_cisbp <- motifs_cisbp[cisbp_dt$Motif_ID]

# motifs vector
#names(motifs_cisbp) <- cisbp_dt$TF_Common_Name
#motifs_cisbp <- sapply(names(motifs_cisbp), function(x) {
#  mta <- motifs_cisbp[[x]]
#  mta@name <- x
#  mta
#}, simplify = FALSE, USE.NAMES = TRUE)
```

- motifs we determined with DAPseq

```{r}
#| label: exp_motifs
dapseq_dt <- fread(file.path(dap_dir, "dapseq-results-summary-v3.tsv.gz"))
dapseq_dt <- dapseq_dt[success == "success"]
dapseq_dt[common_name != "", gene_name := common_name]
dapseq_dt[gene_name == "", gene_name := paste(gene, og, sep = "_"), by = .I]
dapseq_dt[, tf_family := str_remove(og, "\\..+")]
dapseq_dt <- rbindlist(list(
  dapseq_dt[, .(sample, gene, gene_name, tf_family)],
  data.table(
    sample = "FoxQ_S5",
    gene = "Nvec_vc1.1_XM_032385706.2", 
    gene_name = "FoxQ2d",
    tf_family = "Forkhead"
  )
))

# genes vector
# genes_dapseq <- structure(dapseq_dt$gene, names = dapseq_dt$gene_name)

# tf family vector
# tffam_dapseq <- structure(dapseq_dt$tf_family, names = dapseq_dt$gene_name)

# motifs vector
motifs_dapseq <- sapply(
  dapseq_dt$sample,
  function(x) {
    m_name <- dapseq_dt[sample == x]$sample
    m_altname <- dapseq_dt[sample == x]$gene

    dreme_fn <- file.path("../../DAPseq", x, "streme", "streme.txt")
    ms <- tryCatch(read_meme(dreme_fn)[[1]], error = function(e) NULL)
    if (!is.null(ms)) {
      ms@name <- paste(m_name, "streme", sep = "_")
      ms@altname <- m_altname
    }
    
    dimont_fn <- file.path("../../DAPseq", x, "dimont", "example-pwm-1.xml")
    md <- tryCatch(mta_read_xml(dimont_fn), error = function(e) NULL)
    if (!is.null(md)) {
      md@name <- paste(m_name, "dimont", sep = "_")
      md@altname <- m_altname
    }
    
    homer_fn <- file.path("../../DAPseq", x, "homer", "homerResults", "motif1.motif")
    mh <- tryCatch(read_homer(homer_fn), error = function(e) NULL)
    if (!is.null(mh)) {
      mh@name <- paste(m_name, "homer", sep = "_")
      mh@altname <- m_altname
    }

    c(streme = ms, dimont = md, homer = mh)[!sapply(c(ms, md, mh), is.null)]
    
  },
  simplify = FALSE, USE.NAMES = TRUE
)

motifs_dapseq <- unlist(motifs_dapseq)
names(motifs_dapseq) <- sapply(motifs_dapseq, function(m) m@name)
saveRDS(motifs_dapseq, file.path(mta_dir, "dapseq-motifs.rds"))

# update data frame
genes_dt <- CJ(
  gene = unique(dapseq_dt$gene), 
  motif_type = c("dimont", "streme", "homer")
)
dapseq_dt <- merge.data.table(
  dapseq_dt, genes_dt, by = "gene", sort = FALSE, all.x = TRUE
)
dapseq_dt[, motif := sprintf("%s_%s", sample, motif_type)]
dapseq_dt <- dapseq_dt[motif %in% names(motifs_dapseq)]

# save
fwrite(
  dapseq_dt,
  file.path(mta_dir, "dapseq-motifs.tsv.gz"),
  sep = "\t", quote = FALSE
)
```

First we will recalculate motif stats.

```{r}
# convert to monaLisa format
mots_lst <- c(motifs_dapseq, motifs_cisbp)
mona_mta_lst <- mta_convert_umot_to_monalisa(mots_lst)
```

-   motif scores in peaks

```{r}
# load peaks
peaks <- fread(file.path(pks_dir, "Peaks_cell_type_mapped.bed"))
setnames(peaks, c("seqnames", "start", "end", "peak", "score", "strand"))
peaks <- unique(peaks[, .(seqnames, start, end, strand, peak)])

# remove MT peaks
peaks <- peaks[seqnames != "ENA|OW052000|OW052000.1"]
peaks_gr <- makeGRangesFromDataFrame(peaks, keep.extra.columns = TRUE)

# load genome
genome <- Biostrings::readDNAStringSet("genome/Nvec_vc1.1_gDNA.fasta")
seqdt <- fread("genome/Nvec_vc1.1_gDNA.fasta.fai")[, 1:2]
seqlvl <- seqdt[[1]]

# trim out-of-range peaks
peaks_gr <- mta_trim_granges(peaks_gr, seqdt)

# scanning motifs
q <- 0.95
mta_scores_mona <- mta_gw_motif_score_monalisa(
  motifs = mona_mta_lst,
  genome_object = genome,
  index_object = seqdt,
  bin_width = 250,
  subsample_fraction = 0.10,
  score_quantiles = c(0, 0.05, 0.1, 0.25, 0.5, 0.75, 0.80, 0.90, 0.95, 0.98, 0.99, 0.999, 1.0),
  score_quantile_thr = q,
  do_gw_scan = TRUE,
  given_gr = peaks_gr,
  nthreads = 12
)

# save
saveRDS(
  mta_scores_mona,
  file.path(mta_dir, sprintf("motif-scores-mona-q%s.rds", q))
)

# map motifs back to peaks
mta_hits <- mta_scores_mona$gw_scan
mta_cent <- narrow(mta_hits, start = width(mta_hits) / 2, width = 1)
mta_ovls <- findOverlaps(query = mta_hits, subject = peaks_gr)
mta_scor <- mta_hits[queryHits(mta_ovls)]
pmt_scor <- peaks_gr[subjectHits(mta_ovls)]
mcols(mta_scor) <- cbind(mcols(mta_scor), mcols(pmt_scor))
mta_data <- as.data.table(mta_scor)

# get max possible score for each motif
maxs_mta <- sapply(
  names(mots_lst),
  function(x) maxScore(convert_type(mots_lst[[x]], "PWM")@motif)
)
names(maxs_mta) <- sapply(mots_lst, function(m) m@name)
stopifnot(all(mta_data$motif %in% names(maxs_mta)))
mta_data[, max_motif_score := maxs_mta[motif]]
mta_data[, max_motif_score := pmax(.SD$max_motif_score, .SD$motif_score), motif]

# save
fwrite(
  mta_data,
  file.path(mta_dir, sprintf("motif-scores-mona-q%s.tsv.gz", q)),
  sep = "\t"
)
```

-   motif enrichment in cell type specific peaks

```{r}
# motif scores in peaks
mta_scores_mona <- readRDS(
  file.path(mta_dir, sprintf("motif-scores-mona-q%s.rds", q))
)
mta_gr <- mta_scores_mona$gw_scan
names(mcols(mta_gr))[1] <- str_replace(names(mcols(mta_gr))[1], "motif", "name")

# all peaks
peaks <- fread(file.path(pks_dir, "Peaks_cell_type_mapped.bed"), select = 1:3)
setnames(peaks, c("seqnames", "start", "end"))
peaks <- unique(peaks)
peaks_gr <- makeGRangesFromDataFrame(unique(peaks))

# enrichment per cell type
enr_list <- vector("list", length = length(cell_types))
names(enr_list) <- cell_types
for (ct in cell_types) {

  message(sprintf("\nCalculating enrichment for %s", ct))
  
  # cell type peaks
  stg_dir <- ifelse(ct %in% adult_cell_types, adult_dir, gastr_dir)
  pks_fn <- file.path(
    stg_dir, "ArchRProj", "PeakDifferential", "cell_type_filtered",
    sprintf("Peaks-%s-vs-others.tsv", ct)
  )
  pks_dt <- fread(pks_fn, select = 1:3)
  setnames(pks_dt, c("seqnames", "start", "end"))
  pks_gr <- makeGRangesFromDataFrame(pks_dt)

  # background peaks
  pks_ovl <- findOverlaps(peaks_gr, pks_gr)
  pks_nov <- setdiff(seq_len(length(peaks_gr)), queryHits(pks_ovl))
  pks_bg <- peaks_gr[pks_nov]
  
  # enrichment motifs
  mta_dt <- mta_motif_enrichment_test(
    sites_object = mta_gr,
    fg_object = pks_gr,
    bg_object = pks_bg,
    thresholds_vector = NULL,
    label = ct,
    nthreads = 2,
    pval_adjust = "fdr"
  )

  # all enrichment results
  enr_list[[ct]] <- mta_dt

}

# combine results from all cell types
enr_dt <- rbindlist(enr_list, idcol = "cell_type")

# save results
fwrite(
  enr_dt,
  file.path(mta_dir, sprintf("motif-enrichment-cell-type-mona-q%s.tsv.gz", q)),
  sep = "\t"
)
```

-   motif deviation score with chromVAR

```{r}
source("scripts/chromvar_utils.R")

# load peak counts matrix aggregated per SEACells, normalized across the stages
peaks_mat_seacells <- readRDS(file.path(
  pks_dir, "Sum_Adult_Gastrula_Peaks_SEACell_qnorm.rds"
))

peaks_mat_seacells <- as(peaks_mat_seacells, "dgCMatrix")

# background peaks 
bgd_peaks <- readRDS(file.path(
  pks_dir, "Adult_Gastrula_Background_Peaks_SEACell.rds"
))

# create binary matrix of motif hits in peaks
arc_hits <- unique(fread(
  file.path(mta_dir, sprintf("motif-scores-mona-q%s.tsv.gz", q))
)[, .(motif, peak, motif_score)])
setorder(arc_hits, -motif_score)
arc_hits <- arc_hits[, .SD[1], .(motif, peak)]
arc_data <- dcast.data.table(arc_hits, peak ~ motif, value.var = "motif_score")

# include in binary matrix peaks that have no hits
pks_miss <- setdiff(rownames(peaks_mat_seacells), arc_data[[1]])
pks_miss <- data.table("peak" = cbind(pks_miss))
setnames(pks_miss, "peak")
arc_data <- rbindlist(list(
  arc_data, pks_miss
), fill = TRUE, use.names = TRUE)

# convert to matrix
arc_matx <- data.matrix(arc_data[, -1, drop = FALSE])
arc_matx[!is.na(arc_matx)] <- 1
arc_matx[is.na(arc_matx)] <- 0
rownames(arc_matx) <- arc_data[[1]]
arc_matx <- as(arc_matx, "dgCMatrix")
arc_matx <- arc_matx[
  match(rownames(peaks_mat_seacells), rownames(arc_matx)), , drop = FALSE
]

# sanity check
all.equal(rownames(arc_matx), as.character(rownames(peaks_mat_seacells)))

# calculate chromVAR deviations (this takes a while)
chromvar_deviations <- .customDeviations(
  countsMatrix = peaks_mat_seacells,
  annotationsMatrix = arc_matx,
  backgroudPeaks = bgd_peaks,
  expectation = rowSums(peaks_mat_seacells) / sum(rowSums(peaks_mat_seacells)),
  prefix = "SEACells",
  out = c("deviations", "z"),
  threads = 1,
  verbose = TRUE
)

# save matrix
mat_dir <- file.path(
  mta_dir,
  "ChromVAR",
  "MotifsSEACellsMatrix"
)
dir.create(mat_dir, recursive = TRUE, showWarnings = FALSE)
chromvar_mat <- chromvar_deviations@assays@data$z
chromvar_mat[is.na(chromvar_mat)] <- 0
chromvar_mat <- as(chromvar_mat, "dgCMatrix")
Matrix::writeMM(
  chromvar_mat,
  file.path(mat_dir, "matrix.mtx")
)
writeLines(colnames(chromvar_mat), file.path(mat_dir, "cells"))
writeLines(rownames(chromvar_mat), file.path(mat_dir, "motifs"))

saveRDS(chromvar_mat, file.path(mat_dir, "Matrix-Motifs-SEACells.rds"))
saveRDS(chromvar_deviations, file.path(mat_dir, "chromvar_deviations.rds"))
```

-   correlation of gene scores and motif deviation Z scores

```{r}
# gene scores matrix aggregated per seacells
gene_score_mat <- readRDS(file.path(
    "results", "GeneScoreMatrix",
    "Matrix-Gene-Scores-SEACell-FC.rds"
))

# calculate correlations
all.equal(colnames(gene_score_mat), colnames(chromvar_mat))
mot_gen_cor <- cor(t(gene_score_mat), t(chromvar_mat))
saveRDS(
  mot_gen_cor,
  file.path(
    mta_dir, "ChromVAR",
    "correlation-seacells-motif-score-gene-score.rds"
  )
)
```

-   correlation of gene expression and motif deviation Z scores.

```{r}
# gene expression matrix aggregated per SEACell
ctfp_mat <- readRDS(
  file.path(
    "results", "Metacells", "metacell", 
    "gene_expression_fc_genes_exp_FC2_acc_FC4_spearman.rds"
  )
)
ctfp_mat <- ctfp_mat[, colnames(chromvar_mat)]

# calculate correlations
all.equal(colnames(ctfp_mat), colnames(chromvar_mat))
mot_exp_cor <- cor(t(ctfp_mat), t(chromvar_mat))
saveRDS(
  mot_exp_cor,
  file.path(
    mta_dir, "ChromVAR",
    "correlation-seacells-motif-score-gene-expression-metacell.rds"
  )
)
```

We next compare cell type TF activity for direct and assigned motifs. First we need to pull together gene expression and motif deviation scores (activity).

```{r}
# load motif-to-gene assignment
arc_id <- "PPM-PCC-0.8-IC0.5-5bp"
mta_gen_dt <- fread(file.path(
  "results", "Archetypes",
  sprintf("motif-assignment-archetypes-%s.tsv.gz", arc_id)
))

# gene expression
exp_mt <- readRDS(file.path(
  "results", "Metacells", "metacell", 
  "gene_expression_fc_genes_exp_FC2_acc_FC4_spearman.rds"
))

# gene scores
acc_mt <- readRDS(file.path(
    "results", "GeneScoreMatrix",
    "Matrix-Gene-Scores-SEACell-FC.rds"
))

# motif deviation scores
chromvar_mat_arc <- readRDS(file.path(
  "results", "Archetypes",
  sprintf("ChromVAR-%s", arc_id), 
  "ArchetypesSEACellsMatrix",
  "Matrix-Archetypes-SEACells.rds"
))
chromvar_mat_mta <- readRDS(file.path(
  "results", "Motifs", "ChromVAR", "MotifsSEACellsMatrix",
  "Matrix-Motifs-SEACells.rds"
))
stopifnot(all.equal(colnames(chromvar_mat_arc), colnames(chromvar_mat_mta)))
chromvar_mat <- rbind(chromvar_mat_arc, chromvar_mat_mta)

# genes
genes <- c(genes_dapseq)
genes <- genes[genes %in% rownames(exp_mt) & genes %in% rownames(acc_mt)]

# genes - motif mapping
dapseq_dt <- fread(
  file.path(mta_dir, "dapseq-motifs.tsv.gz"),
)
genes_dt <- CJ(
  gene_name = unique(dapseq_dt$gene_name), 
  motif_type = c("dimont", "streme", "homer")
)
genes_dt[, motif_name := paste(gene_name, motif_type, sep = "_"), by = .I]
genes_dt <- merge.data.table(dapseq_dt, genes_dt, by = "gene_name")
genes_dt <- genes_dt[motif_name %in% rownames(chromvar_mat), .(gene, motif_name)]

# gene - selected archetype mapping
archs_dt <- mta_gen_dt[, .(gene, archetype_name)]
setnames(archs_dt, "archetype_name", "motif_name")

# combine
dr_dt <- rbindlist(list(
  "archetype" = archs_dt,
  "direct_motif" = genes_dt
), idcol = "motif_assignment")
setorder(dr_dt, gene, motif_assignment)

# subset matrices
exp_tfs <- exp_mt[unname(genes), ]
acc_tfs <- acc_mt[unname(genes), ]
dev_tfs <- chromvar_mat[dr_dt$motif_name, ]

# combine expression and accessibility
acc_exp_dt <- merge.data.table(
  melt.data.table(
    as.data.table(
      as.matrix(acc_tfs), keep.rownames = "gene"
    ),
    id.vars = "gene",
    variable.name = "metacell",
    value.name = "accessibility"
  ),
  melt.data.table(
    as.data.table(
      as.matrix(exp_tfs), keep.rownames = "gene"
    ),
    id.vars = "gene",
    variable.name = "metacell",
    value.name = "expression"
  ),
  by = c("gene", "metacell"),
  sort = FALSE
)

# motif deviation scores
mta_dev_dt <- melt.data.table(
  as.data.table(
    as.matrix(dev_tfs), keep.rownames = "motif_name"
  ),
  id.vars = "motif_name",
  variable.name = "metacell",
  value.name = "motif_deviation"
)
#mta_dev_dt[, motif_name := sapply(strsplit(id, "__"), function(x) x[1])]
#mta_dev_dt[, id := NULL]

# combine all
mta_acc_exp_dt <- merge.data.table(
  dr_dt, acc_exp_dt, by = c("gene"), allow.cartesian = TRUE
)
mta_acc_exp_dt <- merge.data.table(
  mta_acc_exp_dt, mta_dev_dt, by = c("motif_name", "metacell")
)
setcolorder(
  mta_acc_exp_dt, c(
    "gene", "expression", "accessibility", "motif_assignment", "motif_name"
))

# load cell type annotations for SEACells
annot_dt <- fread(file.path(
  "results", "Clustering", "Annotation_Adult_Gastrula_SEACell.tsv"
))
annot_dt <- unique(annot_dt[, .(SEACell, cell_type)])
setnames(annot_dt, "SEACell", "metacell")

# keep gastrula differentiated cell types separately
annot_dt[grepl("SEACell", metacell) & cell_type=="cnidocyte", cell_type := "cnidocyte_gastrula"]

# add cell type annotations to combined table
mta_acc_exp_dt[, metacell := as.character(metacell)]
mta_acc_exp_dt <- merge.data.table(
  mta_acc_exp_dt, annot_dt, by = "metacell",
  all = TRUE, allow.cartesian = TRUE
)

# add stage annotation
mta_acc_exp_dt[, stage := ifelse(cell_type %in% adult_cell_types, "adult", "gastrula")]

# aggregate for cell types
mta_acc_exp_dt <- mta_acc_exp_dt[, .(
  expression = mean(expression),
  accessibility = mean(accessibility),
  motif_deviation = mean(motif_deviation)
), by = c("gene", "motif_assignment", "motif_name", "cell_type", "stage")]

# order
setorder(mta_acc_exp_dt, gene, motif_assignment, cell_type, stage)

# pwms
mta_pwm <- unlist(lapply(c(
  file.path("results", "Archetypes", sprintf("motif-archetypes-%s-pwms.rds", arc_id)),
  file.path("results", "Motifs", "motifs.rds")
), readRDS))
names(mta_pwm) <- sapply(mta_pwm, function(m) m@name)

```

Then we plot pairs of expression-activity scaterplots for each gene and it's direct and assigned motif.

```{r}
# where to save the plot
pdf(
  file.path(fig_dir, "tf-expression-activity-scatter-plots-direct-vs-assigned.pdf"), 
  height = 15, width = 14
)

gns <- intersect(genes_dapseq, mta_acc_exp_dt$gene)

for (gn in gns) {
  
  # gene annotation
  smp <- dapseq_dt[gene == gn]$sample
  pf <- tfan[gene==gn]$pfam
  og <- tfan[gene==gn]$og
  cn <- tfan[gene==gn]$common_name
  tf <- ifelse(cn!="", sprintf("%s (%s)", gn, cn), gn)
  tl <- sprintf("%s\n%s\nOG: %s\nPFAM: %s", smp, tf, og, pf)
  print(tl)

  # data to plot
  tf_dt <- mta_acc_exp_dt[gene == gn]
  mt <- unique(tf_dt$motif_name)

  # motif annotation
  if (length(mt) == 1) {

    next

  } else {

    mt_list <- lapply(mt, function(mm) {
      
      # title
      mt_mod <- as.character(unique(tf_dt[motif_name == mm]$motif_assignment))

      # motif logo
      mt_gp <- ggseqlogo::ggseqlogo(mta_pwm[[mm]]@motif) + 
        theme_void() +
        labs(title = str_replace(str_extract(mm, "ARCH|dimont|homer|streme"), "ARCH", "archetype"))

      # assemble scatter plot
      tf_gp <- ggplot(tf_dt[motif_name == mm], aes(
              expression, motif_deviation, 
              label = cell_type,
              fill = cell_type, 
              color = cell_type,
              shape = stage
          )
        ) +
        geom_point(size = 4) +
        ggrepel::geom_text_repel(size = 4, alpha = 0.6) +
        scale_fill_manual(values = ct_cols) +
        scale_color_manual(
          values = c(
            structure(
              colorspace::darken(ct_cols, 0.5),
              names = names(ct_cols)
            ),
            structure(
              colorspace::lighten(ct_cols, 0.5),
              names = paste0(names(ct_cols), "_sc")
            )
          )
        ) +
        # scale_x_continuous(limits = c(0, NA)) +
        scale_shape_manual(
            values = c("adult" = 21, "gastrula" = 24)
        ) +
        labs(
            x = "TF expression",
            y = "TF activity"
        ) +
        theme(legend.position = "none")
      
      #list("motif" = mt_gp, "scatterplot" = tf_gp)
      mt_gp + tf_gp + plot_layout(ncol = 1, heights = c(1, 5))

    })
    
    # patchwork
    patch <- wrap_plots(mt_list) + plot_annotation(title = tl)
      
    print(patch)
  }
}
dev.off()
```

Next we will update motif-to-gene assignment.

```{r}
# load archetype dictionary
# dict <- fread(file.path(arc_dir, sprintf("motif-archetypes-%s.dict", arc_id)))
# dict[, archetype_num := paste0("ARCH", archetype_num)]

# load motif-to-gene assignment
mta_gen_fn <- file.path(
  "results", "Archetypes",
  sprintf("motif-assignment-archetypes-%s.tsv.gz", arc_id)
)
mta_gen_dt <- fread(mta_gen_fn)

# load correlations
mot_exp_cor <- readRDS(file.path(
  mta_dir, "ChromVAR",
  "correlation-seacells-motif-score-gene-expression-metacell.rds"
))
mot_gen_cor <- readRDS(file.path(
  mta_dir, "ChromVAR",
  "correlation-seacells-motif-score-gene-score.rds"
))

# update existing motif assignments 
# genes <- c(genes_dapseq, genes_cisbp)
genes <- genes_dapseq
genes_assigned <- intersect(genes, mta_gen_dt$gene)
if (length(genes_assigned) > 0) {
  names(genes_assigned) <- names(genes)[match(genes_assigned, genes)]
  genes_names <- structure(names(genes_assigned), names = genes_assigned)
  # select best correlated motif per gene
  motif_names <- sapply(genes_assigned, function(g) {
    g_cors <- mot_exp_cor[g, grepl(genes_names[g], colnames(mot_exp_cor))]
    m <- names(sort(g_cors, decreasing = TRUE)[1])
    m
  }, USE.NAMES = FALSE, simplify = TRUE)
  names(motif_names) <- genes_assigned
  # update info
  mta_gen_dt[match(genes_assigned, gene), ':='(
    archetype_name = motif_names[.SD$gene],
    archetype_family = .SD$tf_family,
    source = "experiment",
    rank = 0,
    class = "NA"
  ), by = .I]
  #mta_gen_dt[gene %in% genes_assigned & gene %in% genes_cisbp, CisBP_assignment := "assigned"]
  #mta_gen_dt[gene %in% genes_assigned & gene %in% genes_cisbp, source := "CisBP_D"]
  for (g in genes_assigned) {
    gsc <- tryCatch(
      mot_gen_cor[g, genes_names[g]],
      error = function(e) NA
    )
    mta_gen_dt[gene == g, gene_score_correlation := gsc]
    gec <- tryCatch(
      mot_exp_cor[g, genes_names[g]],
      error = function(e) NA
    )
    mta_gen_dt[gene == g, gene_expression_correlation := gec]
  }
} 

genes_unassigned <- setdiff(genes, mta_gen_dt$gene)

# add motif assignments for genes with no previously assigned motifs
if (length(genes_unassigned) > 0) {
  names(genes_unassigned) <- names(genes)[match(genes_unassigned, genes)]
  genes_names <- structure(names(genes_unassigned), names = genes_unassigned)
  # select best correlated motif per gene
  motif_names <- sapply(genes_unassigned, function(g) {
    g_cors <- mot_exp_cor[g, grepl(genes_names[g], colnames(mot_exp_cor))]
    m <- names(sort(g_cors, decreasing = TRUE)[1])
    m
  }, USE.NAMES = FALSE, simplify = TRUE)
  names(motif_names) <- genes_unassigned
  # make gene info table
  genes_data <- data.table(
    gene = genes_unassigned, source = "experiment", rank = 0, class = "NA"
  )
  # gene info
  genes_data <- merge.data.table(genes_data, tfan, by = "gene", all.x = TRUE, sort = FALSE)
  genes_data[, tf_family := str_remove(str_extract(og, ".+(?=.HG)"), "^tfs.")]
  genes_data[grep("PAX$", pfam), tf_family := "Pax"]
  genes_data[grep("PAX/Homeodomain$", pfam), tf_family := "Pax/Homeodomain"]
  genes_data[grep("Pou", pfam), tf_family := "Pou/Homeodomain"]
  # motif info
  genes_data[, archetype_name := motif_names[.SD$gene]]
  genes_data[, archetype_family := tf_family]
  genes_data[, assigned := TRUE]
  genes_data[, any_assigned := .SD$gene %in% genes_cisbp]
  genes_data[, CisBP_assignment := ifelse(any_assigned, "other", "none")]
  #genes_data[gene %in% genes_cisbp, CisBP_assignment := "assigned"]
  #genes_data[gene %in% genes_cisbp, source := "CisBP_D"]
  # correlation info
  for (g in genes_data$gene) {
    gsc <- tryCatch(
      mot_gen_cor[g, genes_names[g]],
      error = function(e) NA
    )
    genes_data[gene == g, gene_score_correlation := gsc]
    gec <- tryCatch(
      mot_exp_cor[g, genes_names[g]],
      error = function(e) NA
    )
    genes_data[gene == g, gene_expression_correlation := gec]
  }
  # match columns
  setcolorder(genes_data, colnames(mta_gen_dt))
  # merge with existing assignments
  mta_gen_dt <- rbindlist(list(mta_gen_dt, genes_data), use.names = TRUE)
}

# save
fwrite(
  mta_gen_dt,
  file.path(mta_dir, sprintf("motif-assignment-archetypes-%s.tsv.gz", arc_id)),
  sep = "\t"
)
```

Save motif pwms

```{r}
# load archetypes
arc_id <- "PPM-PCC-0.8-IC0.5-5bp"
arch_fn <- file.path(arc_dir, sprintf("motif-archetypes-%s-pwms.meme", arc_id))
arch_lst <- universalmotif::read_meme(arch_fn)
arch_nms <- sapply(arch_lst, function(m) str_extract(m@name, "ARCH\\d+"))
names(arch_lst) <- arch_nms

# save all motifs
all_list <- c(arch_lst, mots_lst)
names(all_list) <- sapply(all_list, function(m)  m@name)
stopifnot(all(mta_gen_dt$archetype_name %in% names(all_list)))
all_list <- all_list[mta_gen_dt$archetype_name]
all_list <- unique(all_list)
write_meme(all_list, file.path(mta_dir, "motifs.meme"), overwrite = TRUE)
saveRDS(all_list, file.path(mta_dir, "motifs.rds"))

# save logo
genes <- unique(mta_gen_dt$gene)
pdf(file.path(fig_dir, "motifs-genes-logos.pdf"), width = 8, height = 3)
for (x in seq_along(genes)) {
    message(sprintf("%s / %s", x, length(genes)))
    gn <- genes[x]
    pf <- mta_gen_dt[gene == gn]$pfam
    og <- mta_gen_dt[gene == gn]$og
    cn <- mta_gen_dt[gene == gn]$common_name
    ac <- mta_gen_dt[gene == gn]$archetype_name
    af <- mta_gen_dt[gene == gn]$archetype_family
    tf <- ifelse(cn!="", sprintf("%s (%s)", gn, cn), gn)
    ttl <-  sprintf(
      "%s\nOG: %s\nPFAM: %s\narchetype: %s\narchetype family: %s",
      tf, og, pf, ac, af
    )
    tryCatch({
        print(ggseqlogo(all_list[[ac]]@motif) +
            labs(title = ttl)
        )
    }, error = function (e) 
        message(sprintf("Failed to plot %s\n%s", ac, e))
    )
}
dev.off()
```

We have many redundant motifs, we will calculate similarity between all pairs.

```{r}
# load motifs
mta_pwm <- read_meme(file.path(mta_dir, "motifs.meme"))
names(mta_pwm) <- sapply(mta_pwm, function(m) m@name)

# motifs pairwise similarities
similarity <- "PPM"
method <- "PCC"
sim_mat <- compare_motifs(
  motifs = mta_pwm,
  use.type = similarity,
  method = method,
  normalise.scores = FALSE,
  min.position.ic = 0,
  min.mean.ic = 0,
  nthreads = 0
)

# ordering
hclust_method <- "complete"
ord <- rownames(sim_mat)
hc <- hclust(tgs_dist(sim_mat), method = hclust_method)
ord <- hc$labels[hc$order]
sim_mat <- sim_mat[ord, ord]

# save
saveRDS(
  sim_mat, 
  file.path(mta_dir, sprintf(
    "motifs-similarity-%s-%s.rds", 
    similarity, method
  ))
)

```

## Combine motif metrics with other gene metrics

Here we will combine and compare motif scores with motif enrichment,
gene expression and accessibility.

```{r}
# TF annotation
tfan <- fread(file.path(
  ann_dir, "Nematostella_DToL_TFs_FINAL.tsv"
))

# archetypes to use
arc_id <- "PPM-PCC-0.8-IC0.5-5bp"

# archetypes assignment
assign_dt <- fread(file.path(
  "results", "Motifs",
  sprintf("motif-assignment-archetypes-%s.tsv.gz", arc_id)
))

# gene-archetype correlations
cor_dt <- fread(file.path(
  "results", "Archetypes",
  sprintf("ChromVAR-%s", arc_id),
  "correlation-seacells-archetype-motif-score-gene.tsv.gz"
))

# archetype similarities
sim_mat <- readRDS(
  file.path(
    "results", "Archetypes",
    sprintf("motif-similarity-archetypes-%s.rds", arc_id)
  )
)

# motif enrichments
q <- 0.98
enr_dt <- rbindlist(lapply(c(
  # archetypes
  file.path(arc_dir, sprintf("motif-enrichment-cell-type-archetypes-%s-mona-q%s.tsv.gz", arc_id, q)),
  # experimental motifs
  file.path(mta_dir, sprintf("motif-enrichment-cell-type-mona-q%s.tsv.gz", q))
), fread))

# motif deviation scores
chromvar_mat_arc <- readRDS(file.path(
  arc_dir,
  sprintf("ChromVAR-%s", arc_id), 
  "ArchetypesSEACellsMatrix",
  "Matrix-Archetypes-SEACells.rds"
))
chromvar_mat_mta <- readRDS(file.path(
  "results", "Motifs", "ChromVAR", "MotifsSEACellsMatrix",
  "Matrix-Motifs-SEACells.rds"
))

# sanity scheck
stopifnot(all.equal(colnames(chromvar_mat_arc), colnames(chromvar_mat_mta)))
chromvar_mat <- rbind(chromvar_mat_arc, chromvar_mat_mta)

# gene expression
exp_mt <- readRDS(file.path(
  "results", "Metacells", "metacell", 
  "gene_expression_fc_genes_exp_FC2_acc_FC4_spearman.rds"
))

# gene scores
acc_mt <- readRDS(file.path(
    "results", "GeneScoreMatrix",
    "Matrix-Gene-Scores-SEACell-FC.rds"
))

# motif-to-gene assignment supplementary table
dt <- fread(file.path("results", "Archetypes", "motif-assignment.tsv.gz"))
length(unique(dt$gene)) # 569

```

First, we look at Venn diagram of the number of assigned TFs ussing different approaches

```{r}
# all annotated TFs
length(tfan$gene) # 654

# accessibile TFs
tfan_acc <- tfan[gene %in% rownames(acc_mt)]
length(unique(tfan_acc$gene)) # 632

# accessible and expressed TFs
tfan_exp <- tfan_acc[gene %in% rownames(exp_mt)]
length(unique(tfan_exp$gene)) # 599

# TFs with CisBP infered motifs
cisbp_dt_all <- fread(file.path(cisbp_dir, "cisbp_nvec_motifs.tsv"))
cisbp_dt <- unique(cisbp_dt_all[, .(TF_Name, TF_Status)])

# TFs with motif assigned
length(unique(assign_dt$gene)) # 574

# data for venn diagram
venn_dt <- copy(tfan_exp)
venn_dt[, expressed := gene %in% rownames(exp_mt)]
venn_dt[, direct := gene %in% cisbp_dt[TF_Status == "D"]$TF_Name]
venn_dt[, CisBP_inferred := gene %in% cisbp_dt[TF_Status %in% c("I", "N")]$TF_Name]
venn_dt[, assigned := gene %in% assign_dt$gene]

require(eulerr)
venn_df <- venn_dt[, .(expressed, direct, CisBP_inferred, assigned)]
class(venn_df) <- "data.frame"
rownames(venn_df) <- venn_dt$gene
fit <- euler(venn_df)
pdf(file.path(fig_dir, "TF-assignment-venn-diagram.pdf"), height = 6, width = 6)
plot(
  fit, 
  quantities = TRUE,
  fills = list(fill = c("grey", "red", "steelblue4"), alpha = 0.5)
)
dev.off()
```

Plot motif enrichment, indicating assigned TFs

```{r}
# gene info for archetypes
agn_dt <- assign_dt[archetype_family==tf_family][,.(gene, archetype_name)]

# add TF gene info to motif enrichment
setnames(enr_dt, "motif", "archetype_name")
arc_ann_dt <- merge.data.table(
  enr_dt, agn_dt,
  by = "archetype_name", 
  all.x = TRUE, sort = FALSE, allow.cartesian = TRUE
)

# add archetype family
arc_fam_dt_1 <- unique(assign_dt[, .(archetype_name, archetype_family)])
arc_fam_dt_2 <- unique(cor_dt[, .(archetype_name, archetype_family)])
arc_fam_dt_2 <- arc_fam_dt_2[!archetype_name %in% arc_fam_dt_1$archetype_name]
arc_fam_dt <- rbindlist(list(arc_fam_dt_1, arc_fam_dt_2))
arc_ann_dt <- merge.data.table(
  arc_ann_dt, arc_fam_dt,
  by = "archetype_name", 
  all.x = TRUE, sort = FALSE, allow.cartesian = TRUE
)

# add gene info
arc_ann_dt <- merge.data.table(
  arc_ann_dt, tfan, 
  by = "gene",
  all.x = TRUE, sort = FALSE
)
arc_ann_dt[is.na(gene), gene := ""]
arc_ann_dt[is.na(common_name), common_name := ""]
arc_ann_dt[is.na(og), og := ""]
arc_ann_dt[is.na(pfam), pfam := ""]

# clusters of archetypes based on pairwise similarities
hc <- hclust(
  tgs_dist(sim_mat), method = "complete"
)
ord <- hc$labels[hc$order]
sim_mat <- sim_mat[ord, ord]
k <- 400
ctr <- cutree(hc, k = k)

# add cluster info to datatable and select representative archetype for each cluster
arc_ann_dt[, cluster := ctr[archetype_name]]
# experimental motifs "clusters"
arc_ann_dt[!archetype_name %in% rownames(sim_mat), cluster := k + as.integer(as.factor(archetype_name))]

# select representative archetypes for each cluster
# first take those archetypes that are assigned to marker genes
arc_rep_1 <- unique(arc_ann_dt[common_name != "", .(archetype_name, cluster)])[order(cluster)]
# for the rest of clusters, take the archetype with highest FC and cluster family assigned
arc_rep_2 <- unique(arc_ann_dt[!cluster %in% arc_rep_1$cluster][archetype_family != ""][order(-fc), .SD[1], cluster][, .(archetype_name, cluster)][order(cluster)])
arc_rep <- rbindlist(list(arc_rep_1, arc_rep_2))

# combine
arc_clu_dt <- arc_ann_dt[archetype_name %in% arc_rep$archetype_name]

# cluster motifs for plot
arc_clu_dt[, cell_type := factor(cell_type, levels = cell_types)]
arc_clu_dt[, minuslog10padj := -1 * log10(padj)]
padj_dt <- unique(arc_clu_dt[, .(archetype_name, cell_type, minuslog10padj)])
padj_dt <- dcast.data.table(padj_dt, archetype_name ~ cell_type, value.var = "minuslog10padj")
padj_mt <- as.matrix(padj_dt[, -1])
rownames(padj_mt) <- padj_dt[[1]]
arc_ord <- order(apply(padj_mt, 1, which.max))
arc_lvl <- rownames(padj_mt)[arc_ord]
arc_clu_dt[, archetype_name := factor(archetype_name, levels = arc_lvl)]
setorder(arc_clu_dt, archetype_name)

# significant archetypes
fc_thr <- 1
pa_thr <- 0.001
arc_sig <- unique(arc_clu_dt[fc>fc_thr & padj<pa_thr]$archetype_name)
length(arc_sig)

# non-significant archetypes assigned to marker genes
arc_non_sig <- unique(arc_clu_dt[!archetype_name %in% arc_sig][padj<0.05][,.(archetype_name,common_name)])
arc_mks <- arc_non_sig[common_name != ""]$archetype_name

# subset data
arc_plt_dt <- arc_clu_dt[archetype_name %in% c(arc_sig, arc_mks)]

# transform data to plot
arc_plt_dt[, fc_scaled := pmin(fc, 6)]
arc_plt_dt[, minuslog10padj_scaled := pmin(minuslog10padj, 30)]
arc_plt_dt[, gene_label := ""]
arc_plt_dt[gene_label == "" & gene != "" & common_name != "", gene_label := common_name]
arc_plt_dt[gene_label == "" & gene != "" & common_name == "" & gene_name != "", gene_label := gene_name]
arc_plt_dt[gene_label == "" & gene != "" & common_name == "" & og != "", gene_label := ifelse(nchar(og)>80, paste0(substr(og, 1, 77), "..."), og)]
arc_plt_dt[gene_label == "" & gene != "" & common_name == "" & og == "" & pfam != "", gene_label := ifelse(nchar(pfam)>25, paste0(substr(pfam, 1, 22), "..."), pfam)]
arc_plt_dt[gene_label == "" & gene != "", gene_label := str_remove(gene, "Nvec_(vc1.1_)*")]
arc_plt_dt[, gene_label := ifelse(
  any(.SD$common_name != ""), 
  paste(sort(unique(.SD[gene_label != "" & common_name != ""]$common_name)), collapse = ", "),
  paste(sort(unique(.SD[gene_label != "" & common_name == ""]$gene_label)), collapse = ", ")
), archetype_name]
arc_plt_dt[nchar(gene_label) > 80, gene_label := paste0(substr(gene_label, 1, 77), "...")]
arc_plt_dt[, c("gene", "og", "pfam", "common_name") := NULL]
arc_plt_dt <- unique(arc_plt_dt)

# save data for plot
fwrite(
  arc_plt_dt,
  file.path(mta_dir, sprintf("motif-enrichment-mona-q%s-FC-%s-padj-%s.tsv.gz", q, fc_thr, pa_thr)),
  sep = "\t"
)

# plot motif enrichment dotmap
hm_gp <- ggplot(
    arc_plt_dt, 
    aes(cell_type, archetype_name)
  ) +
  geom_point(
    aes(size = minuslog10padj_scaled, fill = fc_scaled),
    shape = 21
  ) +
  geom_text(
    data = unique(arc_plt_dt[,.(archetype_name, archetype_family, gene_label)]),
    aes(y = archetype_name, label = archetype_family),
    x = length(unique(arc_plt_dt$cell_type)) + 1, 
    hjust = 0, 
    size = 2,
    inherit.aes = FALSE
  ) +
  scale_y_discrete(
    breaks = arc_plt_dt$archetype_name[arc_plt_dt$gene_label != ""],
    labels = arc_plt_dt$gene_label[arc_plt_dt$gene_label != ""]
  ) +
  scale_x_discrete(
    expand = expansion(mult = c(0.02, 0.42))
  ) +
  scale_fill_gradientn(
    name = "motif enrichment\nfold change",
    breaks = c(0, 2, 4, 6, 8),
    colours = c(
      "white", "#fee5d9", "#fcae91", "#fb6a4a", "#de2d26", "#a50f15", "#7a0105"
    )
  ) +
  scale_size_continuous(
    name = "-log10(padj)",
    range = c(0, 4)
  ) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 8),
    axis.text.y = element_text(size = 6),
    panel.grid.major = element_line(linewidth = 0.25),
    axis.title = element_blank(),
    plot.margin = margin(5.5, 40, 5.5, 40)
  )

# plot tf family annotation bar
tfam_dt <- unique(arc_plt_dt[, .(archetype_name, archetype_family)])
tfam_dt[archetype_family == "bHLH", archetype_family := "HLH"]
tfam_top <- tfam_dt[,.N,archetype_family][order(-N)][N>10]$archetype_family
tfam_cols <- structure(
  RColorBrewer::brewer.pal(length(tfam_top), "Set1"),
  names = tfam_top
)
fm_gp <- ggplot(tfam_dt, aes(
    x = "family", 
    y = archetype_name, 
    fill = archetype_family
  )) +
  scale_fill_manual(values = tfam_cols, na.value = "white") +
  geom_tile(stat = "identity", color = "white") +
  theme(
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  )

# combine plots
require(patchwork)
layout <- "
BBBBBBBBBBBBC
BBBBBBBBBBBBC
BBBBBBBBBBBBC
BBBBBBBBBBBBC
BBBBBBBBBBBBC
BBBBBBBBBBBBC
BBBBBBBBBBBBC
BBBBBBBBBBBBC
BBBBBBBBBBBBC
BBBBBBBBBBBBC
BBBBBBBBBBBBC
BBBBBBBBBBBBC
BBBBBBBBBBBBC
BBBBBBBBBBBBC
"
arc_ann_gp <- hm_gp + fm_gp + 
  plot_layout(design = layout, guides = "collect")

# save
ggsave(
  file.path(fig_dir, sprintf("motif-enrichment-mona-q%s-FC-%s-padj-%s.pdf", q, fc_thr, pa_thr)),
  arc_ann_gp,
  height = 19, width = 16, limitsize = FALSE
)
  
```

Next we will combine accessibility and expression for TF genes with
motif deviation Z scores from chromAR.

```{r}
# map motifs to genes
assign_id <- unique(assign_dt[, .(archetype_name, gene)])
assign_id <- assign_id[archetype_name %in% rownames(chromvar_mat)]
stopifnot(all(assign_id$archetype_name %in% rownames(chromvar_mat)))
stopifnot(nrow(assign_id[archetype_name %in% rownames(chromvar_mat)][,.N,gene][N>1]) == 0)
archts <- assign_id$archetype_name
tfgens <- assign_id$gene 
dev_tfs <- chromvar_mat[archts, ]
rownames(dev_tfs) <- tfgens

# how many of TFs with assigned motifs are expressed genes
mean(tfan[gene %in% rownames(exp_mt)]$gene %in% unique(assign_dt$gene))

# how many of TFs with assigned motifs are accessible genes
mean(tfan[gene %in% rownames(acc_mt)]$gene %in% unique(assign_dt$gene))

# subset only expressed and accessible TFs
tfs <- unique(assign_dt$gene)
tfs <- tfs[tfs %in% rownames(exp_mt) & tfs %in% rownames(acc_mt)]
exp_tfs <- exp_mt[tfs, ]
acc_tfs <- acc_mt[tfs, ]

# combine
acc_exp_dt <- merge.data.table(
  melt.data.table(
    as.data.table(
      as.matrix(acc_tfs), keep.rownames = "gene"
    ),
    id.vars = "gene",
    variable.name = "metacell",
    value.name = "accessibility"
  ),
  melt.data.table(
    as.data.table(
      as.matrix(exp_tfs), keep.rownames = "gene"
    ),
    id.vars = "gene",
    variable.name = "metacell",
    value.name = "expression"
  ),
  by = c("gene", "metacell"),
  sort = FALSE
)

# motif deviation scores
mta_dev_dt <- melt.data.table(
  as.data.table(
    as.matrix(dev_tfs), keep.rownames = "gene"
  ),
  id.vars = "gene",
  variable.name = "metacell",
  value.name = "motif_deviation"
)
mta_dev_dt <- merge.data.table(
  mta_dev_dt, assign_id, by = "gene", 
  all.x = TRUE, sort = FALSE
)
stopifnot(!any(is.na(mta_dev_dt$archetype_name)))

# combine all
acc_exp_dt <- merge.data.table(
  acc_exp_dt, mta_dev_dt, by = c("gene", "metacell")
)
acc_exp_dt <- melt.data.table(
  acc_exp_dt, 
  id.vars = c("gene", "archetype_name", "metacell"),
  variable.name = "assay",
  value.name = "value"
)
setorder(acc_exp_dt, assay, gene, -value)

```

Next we will add cell type annotations and save combined data.

```{r}
# load cell type annotations for SEACells
annot_dt <- fread(file.path(
  "results", "Clustering", "Annotation_Adult_Gastrula_SEACell.tsv"
))
annot_dt <- unique(annot_dt[, .(SEACell, cell_type)])
setnames(annot_dt, "SEACell", "metacell")

# keep gastrula differentiated cell types separately
annot_dt[grepl("SEACell", metacell) & cell_type=="cnidocyte", cell_type := "cnidocyte_gastrula"]

# add cell type annotations to combined table
acc_exp_dt[, metacell := as.character(metacell)]
acc_exp_dt <- merge.data.table(
  acc_exp_dt, annot_dt, by = "metacell",
  all = TRUE, allow.cartesian = TRUE
)

# add stage annotation
acc_exp_dt[, stage := ifelse(cell_type %in% adult_cell_types, "adult", "gastrula")]

# cast data per metacell
acc_exp_mc <- dcast.data.table(
  acc_exp_dt,
  gene + archetype_name + metacell + cell_type + stage ~ assay,
  value.var = "value", fun.aggregate = mean
)

# save
dir.create(file.path(mta_dir, sprintf("ChromVAR-DAPseq-%s", arc_id)))
fwrite(acc_exp_mc, file.path(
  mta_dir,
  "gene-expression-accessibility-archetype-motif-deviation-metacell.tsv.gz"
), sep = "\t")

# cast data per cell type
acc_exp_ct <- dcast.data.table(
  acc_exp_dt,
  gene + archetype_name + cell_type + stage ~ assay,
  value.var = "value", fun.aggregate = mean
)

# add motif enrichment
enr_mta_dt <- enr_dt[, .(archetype_name, cell_type, fc, pval, padj)]
setnames(enr_mta_dt, colnames(enr_mta_dt)[-c(1:2)], paste0("motif_enrichment_", colnames(enr_mta_dt)[-c(1:2)]))
acc_exp_ct <- merge.data.table(
  acc_exp_ct, enr_mta_dt, 
  by = c("archetype_name", "cell_type"), 
  all.x = TRUE, sort = FALSE
)

# add correlations
acc_exp_ct[, motif_enrichment_gene_expression_correalton := cor(
  .SD$motif_enrichment_fc, .SD$expression, 
  use = "pairwise.complete.obs"
), .(archetype_name, gene)]
acc_exp_ct[, motif_enrichment_gene_accessibility_correalton := cor(
  .SD$motif_enrichment_fc, .SD$accessibility, 
  use = "pairwise.complete.obs"
), .(archetype_name, gene)]
acc_exp_ct[, motif_deviation_gene_expression_correalton := cor(
  .SD$motif_deviation, .SD$expression,
  use = "pairwise.complete.obs"
), .(archetype_name, gene)]
acc_exp_ct[, motif_deviation_gene_accessibility_correalton := cor(
  .SD$motif_deviation, .SD$accessibility,
  use = "pairwise.complete.obs"
), .(archetype_name, gene)]

# save
fwrite(acc_exp_ct, file.path(
  mta_dir,
  "gene-expression-accessibility-archetype-motif-deviation-cell-type.tsv.gz"
), sep = "\t")

```

Plot per-TF scatterplots of expression vs activity (deviation Z score).

```{r}
# combined data
acc_exp_ct <- fread(file.path(
  mta_dir,
  "gene-expression-accessibility-archetype-motif-deviation-cell-type.tsv.gz"
))

# archetypes pwms
mots_arc_lst <- readRDS(file.path(mta_dir, "motifs.rds"))
names(mots_arc_lst) <- sapply(mots_arc_lst, function(m) m@name)

# loop over TFs-motifs pairs
genes <- unique(acc_exp_ct$gene)
marks <- genes[genes %in% tfan[common_name!=""]$gene]
iters <- c(marks, setdiff(genes, marks))

# what to show on y axis
require(ggseqlogo)
y_value <- "motif_enrichment_fc"
y_value <- "motif_deviation"
for (y_value in c("motif_enrichment_fc", "motif_deviation")) {
  
  y_label <- switch(y_value,
    "motif_enrichment_fc" = "motif enrichment fold change",
    "motif_deviation" = "TF activity"
  )
  f_label <- switch(y_value,
    "motif_enrichment_fc" = "motif-enrichment-fc",
    "motif_deviation" = "activity"
  )
  
  # where to save the plot
  pdf(
    file.path(fig_dir, sprintf("tf-expression-%s-scatter-plots-%s.pdf", f_label, arc_id)), 
    height = 10, width = 6
  )
  
  for (i in seq_along(iters)) {
    
    # gene annotation
    gn <- iters[i]
    pf <- tfan[gene==gn]$pfam
    og <- tfan[gene==gn]$og
    cn <- tfan[gene==gn]$common_name
    tf <- ifelse(cn!="", sprintf("%s (%s)", gn, cn), gn)
    mt <- unique(assign_dt[gene==gn]$archetype_name)
    
    print(sprintf("%s/%s: %s", i, length(iters), tf))
    
    # motif annotation
    for (mm in mt) {
      mm_dt <- assign_dt[gene==gn & archetype_name==mm]
      tfam <- unique(mm_dt$tf_family)
      afam <- unique(mm_dt$archetype_family)
      rasg <- unique(mm_dt$assigned)
      ranm <- unique(mm_dt$rank)
      
      tf_dt <- acc_exp_ct[gene==gn & archetype_name==mm]
      tf_dt[, motif_metric := get(y_value)]
      ecor <- switch(
        y_value,
        "motif_enrichment_fc" = unique(tf_dt$motif_enrichment_gene_expression_correalton),
        "motif_deviation" = unique(tf_dt$motif_deviation_gene_expression_correalton)
      )
      acor  <- switch(
        y_value,
        "motif_enrichment_fc" = unique(tf_dt$motif_enrichment_gene_accessibility_correalton),
        "motif_deviation" = unique(tf_dt$motif_deviation_gene_accessibility_correalton)
      )
      ttl <-  sprintf(
          "%s\nOG: %s\nPFAM: %s\nmotif: %s\nTF family: %s\narchetype family: %s\nCisBP assigned: %s\nrank: %s\ngene expression correlation: %.4f\ngene score correlation: %.4f",
          tf, og, pf, mm, tfam, afam, rasg, ranm, ecor, acor
      )
      
      # motif logo
      mt_gp <- ggseqlogo(mots_arc_lst[[mm]]@motif) +
        theme_void()
      
      # assemble scatter plot
      tf_gp <- ggplot(tf_dt, aes(
              expression, motif_metric, 
              label = cell_type,
              fill = cell_type, 
              color = cell_type,
              shape = stage
          )
        ) +
        geom_point(size = 4) +
        ggrepel::geom_text_repel(size = 4, alpha = 0.6) +
        scale_fill_manual(values = ct_cols) +
        scale_color_manual(
          values = c(
            structure(
              colorspace::darken(ct_cols, 0.5),
              names = names(ct_cols)
            ),
            structure(
              colorspace::lighten(ct_cols, 0.5),
              names = paste0(names(ct_cols), "_sc")
            )
          )
        ) +
        scale_x_continuous(limits = c(0, NA)) +
        scale_shape_manual(
            values = c("adult" = 21, "gastrula" = 24)
        ) +
        labs(
            x = "TF expression",
            y = y_label
        ) +
        theme(
          # strip.text = element_text(size = 8),
          # axis.text = element_text(size = 8),
          # axis.title = element_text(size = 8),
          # title = element_text(size = 8),
          legend.position = "none"
        )
      
      # patchwork
      patch <- mt_gp + tf_gp + 
        plot_layout(ncol = 1, heights = c(1, 5)) +
        plot_annotation(title = ttl)
      print(patch)    
    }
  
  }
  dev.off()
}
```

Plot per TF scatterplots of expression vs activity (deviation Z score) for selected genes.

```{r}
# combined data
acc_exp_ct <- fread(file.path(
  mta_dir,
  "gene-expression-accessibility-archetype-motif-deviation-cell-type.tsv.gz"
))

# archetypes pwms
mots_arc_lst <- readRDS(file.path(mta_dir, "motifs.rds"))
names(mots_arc_lst) <- sapply(mots_arc_lst, function(m) m@name)

#selected genes
gs <- c(
  "Pou4" = "Nvec_vc1.1_XM_032363992.2",
  "PaxA" = "Nvec_vc1.1_XM_001631763.3",
  "Brachyury" = "Nvec_vc1.1_XM_032378021.2",
  "Hes2" = "Nvec_vc1.1_XM_032384889.2",
  "SnailA" = "Nvec_vc1.1_XM_032387186.2",
  "Six4/5" = "Nvec_vc1.1_XM_001623084.3",
  "FoxA" = "Nvec_vc1.1_XM_001634505.3",
  "FoxQ2d" = "Nvec_vc1.1_XM_032385706.2",
  "Islet" = "Nvec_vc1.1_XM_032362713.2",
  "GATA" = "Nvec_vc1.1_XM_032367288.2",
  "FoxL2" = "Nvec_vc1.1_XM_032364887.2",
  "Insm1" = "Nvec_vc1.1_XM_032375602.2"
)

patch_list <- lapply(seq_along(gs), function(x) {
  
  # gene annotation
  gn <- gs[x]
  cn <- names(gs)[x]
  pf <- tfan[gene==gn]$pfam
  og <- tfan[gene==gn]$og
  tf <- ifelse(cn!="", sprintf("%s\n%s", cn, str_remove(gn, "Nvec_vc1.1_")), gn)
  mm <- unique(assign_dt[gene==gn]$archetype_name)
  print(tf)

  # motif annotation
  mm_dt <- assign_dt[gene==gn & archetype_name==mm]
  tfam <- unique(mm_dt$tf_family)
  afam <- unique(mm_dt$archetype_family)
  rasg <- unique(mm_dt$assigned)
  ranm <- unique(mm_dt$rank)
  
  # data for gene
  tf_dt <- acc_exp_ct[gene==gn & archetype_name==mm]
  ecor <- unique(tf_dt$motif_deviation_gene_expression_correalton)
  acor  <- unique(tf_dt$motif_deviation_gene_accessibility_correalton)

  # motif logo
  mt_gp <- ggseqlogo::ggseqlogo(mots_arc_lst[[mm]]@motif) +
    theme_void() +
    labs(title = tf)
  
  # assemble scatter plot
  tf_gp <- ggplot(tf_dt, aes(
          expression, motif_deviation, 
          label = cell_type,
          fill = cell_type, 
          color = cell_type,
          shape = stage
      )
    ) +
    geom_point(size = 4) +
    ggrepel::geom_text_repel(size = 4, alpha = 0.6) +
    scale_fill_manual(values = ct_cols) +
    scale_color_manual(
      values = c(
        structure(
          colorspace::darken(ct_cols, 0.5),
          names = names(ct_cols)
        ),
        structure(
          colorspace::lighten(ct_cols, 0.5),
          names = paste0(names(ct_cols), "_sc")
        )
      )
    ) +
    scale_x_continuous(limits = c(0, NA)) +
    scale_shape_manual(
        values = c("adult" = 21, "gastrula" = 24)
    ) +
    labs(x = "", y = "") +
    theme(
      # strip.text = element_text(size = 8),
      # axis.text = element_text(size = 8),
      # axis.title = element_text(size = 8),
      # title = element_text(size = 8),
      legend.position = "none"
    )
  
  # patchwork
  patch <- mt_gp + tf_gp + 
    plot_layout(ncol = 1, heights = c(1, 5))
  
  patch

})

patch <- wrap_plots(patch_list, ncol = 3)

ggsave(
  file.path(fig_dir, sprintf("tf-expression-activity-scatter-plots-%s-figure.pdf", arc_id)), 
  patch, height = 16, width = 10
)

```

Plot dotmap of TF expression vs activity (deviation Z score).

```{r}
# combined data
acc_exp_ct <- fread(file.path(
  mta_dir,
  "gene-expression-accessibility-archetype-motif-deviation-cell-type.tsv.gz"
))

# archetypes pwms
mots_arc_lst <- readRDS(file.path(mta_dir, "motifs.rds"))
names(mots_arc_lst) <- sapply(mots_arc_lst, function(m) m@name)

# add TF annotations
acc_exp_ct <- merge.data.table(
  acc_exp_ct, tfan, by = "gene", all.x = TRUE, sort = FALSE
)

# cluster motifs
acc_exp_ct[, cell_type := factor(cell_type, levels = cell_types)]
zscore_dt <- unique(acc_exp_ct[, .(gene, cell_type, motif_deviation)])
zscore_dt <- dcast.data.table(zscore_dt, gene ~ cell_type, value.var = "motif_deviation")
zscore_mt <- as.matrix(zscore_dt[, -1])
rownames(zscore_mt) <- zscore_dt[[1]]
gen_ord <- order(apply(zscore_mt, 1, which.max))
gen_lvl <- rownames(zscore_mt)[gen_ord]
acc_exp_ct[, gene := factor(gene, levels = rev(gen_lvl))]
setorder(acc_exp_ct, gene)

# significant archetypes
zs_thr <- 2
fc_thr <- 1.5
gen_sig <- unique(acc_exp_ct[expression>fc_thr & motif_deviation>zs_thr]$gene)
length(gen_sig)

# non-significant archetypes assigned to marker genes
gen_non_sig <- unique(acc_exp_ct[!gene %in% gen_sig][,.(gene,common_name)])
gen_mks <- unique(acc_exp_ct[common_name != ""]$gene)

# subset data
gen_plt_dt <- acc_exp_ct[gene %in% c(gen_sig, gen_mks)]

# transform data to plot
gen_plt_dt[, expression_scaled := pmin(expression, 8)]
gen_plt_dt[, motif_deviation_scaled := pmax(pmin(motif_deviation, 20), 0)]
gen_plt_dt[, gene_label := ""]
gen_plt_dt[, gene_label := str_remove(gene, "Nvec_(vc1.1_)*")]
gen_plt_dt[common_name != "", gene_label := common_name]
gen_plt_dt[common_name == "" & og != "", gene_label := ifelse(nchar(og)>40, paste0(substr(og, 1, 37), "..."), og)]
gen_plt_dt[gene != "" & common_name == "" & og == "" & pfam != "", gene_label := ifelse(nchar(pfam)>40, paste0(substr(pfam, 1, 37), "..."), pfam)]

# motif enrichment dotmap
gp_dotmap <- ggplot(
  gen_plt_dt, 
  aes(cell_type, gene)
  ) +
  geom_point(
    aes(size = motif_deviation_scaled, fill = expression_scaled),
    shape = 21
  ) +
  scale_y_discrete(
    breaks = gen_plt_dt$gene,
    labels = gen_plt_dt$gene_label,
    expand = expansion(mult = c(0.005, 0.005))
  ) +
  scale_x_discrete(expand = expansion(mult = c(0.02, 0.02))) +
  scale_fill_gradientn(
    name = "TF expression\nfold change",
    breaks = c(0, 2, 4, 6, 8),
    colours = c(
      "gray99", "#ffd195", "orange", "orangered2", "#a71414", "#68093d", "#470447"
    )
  ) +
  scale_size_continuous(
    name = "TF motif activity",
    range = c(0, 4)
  ) +
  labs(y = sprintf("%s marker TFs", length(unique(gen_plt_dt$gene)))) +
  theme(
    #axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 8),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.x = element_blank(),
    #axis.text.y = element_text(size = 6),
    panel.grid.major = element_line(linewidth = 0.25),
    axis.title.x = element_blank(),
    plot.margin = margin(5.5, 40, 5.5, 40)
  )

# plot annotation rectangle below the plot
gen_plt_ct <- gen_plt_dt[
  order(gene, -motif_deviation)
][, .SD[1, .(cell_type, gene_label)], gene]

gp_ctbar_v <- ggplot(
        gen_plt_ct,
        aes(gene, fill = cell_type)
    ) +
    geom_bar(position = "stack", width = 1) +
    coord_flip() +
    scale_x_discrete(
      breaks = gen_plt_ct$gene,
      labels = gen_plt_ct$gene_label,
      expand = expansion(mult = c(0.005, 0.005))
    ) +
    scale_y_continuous(expand = c(0, 0)) +
    scale_fill_manual(values = ct_cols) +
    theme_void() +
    theme(
        legend.position = "none",
        axis.text.x = element_blank(),
        axis.text.y = element_text(size = 6, vjust = 0.5, hjust = 1),
        plot.margin = unit(c(0, 0, 0, 0), "cm")
    )

gp_ctbar_h <- ggplot(
        gen_plt_dt[, .N, .(cell_type)],
        aes(cell_type, 1, fill = cell_type)
    ) +
    geom_bar(stat = "identity", width = 1) +
    scale_y_continuous(expand = c(0, 0)) +
    scale_fill_manual(values = ct_cols) +
    theme_void() +
    theme(
        legend.position = "none",
        axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5, hjust = 1),
        plot.margin = unit(c(0, 0, 0, 0), "cm")
    )


design <- "ABBBBBBB
           ABBBBBBB
           ABBBBBBB
           ABBBBBBB
           ABBBBBBB
           ABBBBBBB
           ABBBBBBB
           ABBBBBBB
           ABBBBBBB
           #CCCCCCC"

gp_acc_exp_ann <- gp_ctbar_v + gp_dotmap + gp_ctbar_h +
  plot_layout(design = design, widths = c(1, 10), heights = c(20, 1))

# save
ggsave(
  file.path(fig_dir, sprintf("motif-activity-gene-expression-FC-%s-zscore-%s.pdf", fc_thr, zs_thr)),
  gp_acc_exp_ann,
  height = 14, width = 10, limitsize = FALSE
)
```


