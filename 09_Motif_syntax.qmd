---
title: "Motif syntax"
author: "Anamaria Elek"
date: today
format: 
  html:
    code-fold: false
    code-tools: false
    embed-resources: true
    highlight-style: github
    toc: true 
    code-line-numbers: false 
execute:
  eval: false
  message: false
  warning: false
---

```{r}
#| label: initialize
#| echo: FALSE
knitr::opts_chunk$set(echo = TRUE, fig.width=7, fig.height=5) 
```

In this notebook, we will explore motif syntax.

## Setup

Load packages and functions.

```{r}
#| label: setup

# load in-house functions
source("metacell_downstream_functions/Downstream_functions.R") 
source("metacell_downstream_functions/Gene_module_functions.R")
source("metacell_downstream_functions/utils.R")
source("motif-analysis/mta_downstream_functions.R")
source("scripts/scatac_helper_functions.R")

# global settings
options(stringsAsFactors = FALSE)

# load packages
library(RColorBrewer)
library(BSgenome.jaNemVect1.1.DToL.Assembly)
library(GenomicRanges)
library(data.table)
library(tidyr)
library(stringr)
library(ggplot2)
library(patchwork)
library(ggrepel)
library(ggside)
library(ggseqlogo)
library(universalmotif)
library(grid)
library(ArchR)
library(Seurat)
library(metacell)

# set ggplot2 theme
theme_blank <- theme_minimal() + theme(
  axis.title.x = element_blank(),
  axis.title.y = element_blank(),
  panel.border = element_blank(),
  panel.grid=element_blank(),
  axis.ticks = element_blank(),
  text = element_text(size=20)
)
theme_py <- theme_light() + theme(
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  panel.border = element_rect(colour = "black", fill = NA),
  text = element_text(size=20),
  strip.placement = "outside", 
  strip.text = element_text(size=20, color="black"),
  strip.background = element_rect(fill="white")
)
theme_set(theme_py)
```

Define directories to read the data from and save the results to.

```{r}
#| label: dirs

adult_dir <- "ArchRProj_Nvec_TSS4_frag200"
gastr_dir <- "ArchRProj_Nvec_gastrula"
pks_dir <- "Results/Peaks"
mta_dir <- "Results/Motifs"
arc_dir <- "Results/Archetypes"
map_dir <- "Results/Metacells"
grn_dir <- "Results/GRN"
mod_dir <- "Results/Modules"
syn_dir <- "Results/Syntax"
dir.create(syn_dir, showWarnings = FALSE)
fig_dir <- "Plots/Syntax"
dir.create(fig_dir, showWarnings = FALSE)
ann_dir <- "annotation"
```

Load gene annotations.

```{r}
# gene annotation
gnan <- fread(file.path(
  ann_dir, "Nematostella_DToL_FINAL.tsv"
))

# TF annotation
tfan <- fread(file.path(
  ann_dir, "Nematostella_DToL_TFs_FINAL.tsv"
))

# golden markers
gold <- fread(file.path(
  ann_dir, "golden-marks-231124.tsv"
), header = FALSE)
setnames(gold, c("common_name", "gene", "remark"))
```

Project-specific variables:

```{r}
ct_cols <- c(
  "cnidocyte"                  = "#ff42ff",
  "cnidocyte_gastrula"         = "#f7abf7",
  "ecto_pharynx"               = "#5bc0e8",
  "ectoderm"                   = "#51a0be",
  "ecto_aboral"                = "#045170",
  "EMS"                        = "#bdf5bd",
  "EMS_ecto_boundary"          = "#93dbce",
  "gastro_circular_muscle_1"   = "#85c90e",
  "gastro_circular_muscle_2"   = "#73b009",
  "gastro_parietal_muscle"     = "#8ceb10",
  "gastro_IRF1_2"              = "#c1eb05",
  "gastro_somatic_gonad"       = "#bde314",
  "muscle_tentacle_retractor"  = "#ffd700",
  "muscle_mesentery_retractor" = "#f0e229",
  "digestive_filaments_1"      = "#e33d3d",
  "digestive_filaments_2"      = "#d10606",
  "digestive_filaments_3"      = "#ad0303",
  "epidermis_1"                = "#04ccd4",
  "epidermis_2"                = "#16bacc",
  "precursors_PGC"             = "#bebebe",
  "precursors_endoNPC"         = "#8a8686",
  "precursors_NPC"             = "#636363",
  "NPC_1"                      = "#808d91",
  "NPC_2"                      = "#758d92",
  "neuron_GATA_Islet_1"        = "#0c82f7",
  "neuron_GATA_Islet_2"        = "#1175f0",
  "neuron_Pou4_FoxL2_1"        = "#101cde",
  "neuron_Pou4_FoxL2_2"        = "#0b16bf",
  "neuron_Pou4_FoxL2_3"        = "#2e39dd",
  "neuronal_gastrula"          = "#063cb9",
  "gland"                      = "#ff6f08",
  "gland_mucin"                = "#ff8f12"
)
cell_types <- names(ct_cols)
adult_cell_types <- c(
  "cnidocyte",
  "gastro_circular_muscle_1", 
  "gastro_circular_muscle_2",
  "gastro_parietal_muscle",
  "gastro_IRF1_2",
  "gastro_somatic_gonad",
  "muscle_mesentery_retractor",
  "muscle_tentacle_retractor",
  "digestive_filaments_1",
  "digestive_filaments_2",
  "digestive_filaments_3",
  "epidermis_1",
  "epidermis_2",
  "precursors_PGC",
  "precursors_endoNPC",
  "precursors_NPC",
  "neuron_GATA_Islet_1",
  "neuron_GATA_Islet_2",
  "neuron_Pou4_FoxL2_1",
  "neuron_Pou4_FoxL2_2",
  "neuron_Pou4_FoxL2_3",
  "gland"
)
gastr_cell_types <- c(setdiff(cell_types, adult_cell_types))
bct_cols <- toupper(c(
  "cnidocyte"                 = "#ff42ff",
  "ecto"                      = "#51a0be",
  "EMS"                       = "#bdf5bd",
  "gastro_circular_muscle"    = "#73b009",
  "gastro_parietal_muscle"    = "#8ceb10",
  "gastro"                    = "#85c90e",  
  "muscle"                    = "#ffd700",
  "digestive_filaments"       = "#e33d3d",
  "precursors"                = "#bebebe",
  "NPC"                       = "#808d91",
  "epidermis"                 = "#04ccd4",
  "neuron_GATA_Islet"         = "#1175f0",
  "neuron_Pou4_FoxL2"         = "#101cde",
  "neuronal"                  = "#063cb9",
  "gland"                     = "#ff6f08"
))
bct_maps <- setDT(cbind.data.frame(
  cell_type = cell_types,
  broad_cell_type = str_extract(cell_types, paste(names(bct_cols), collapse = "|"))
))
```

## Reduce overlapping motifs (top-down approach)

We will derive motif lexicons by starting from motif hits in all peaks.  
First, get locations of all hits (motif scores above the 95th quantile of 
genomic binding energy) for cell-type enriched motifs. Then we identify groups 
of overlapping motif hits, and select the best scoring motifs as representative 
motif hit per group. 

Load the motifs hits input data.

```{r}
# load motif scores
arc_id <- "PPM-PCC-0.8-IC0.5-5bp"
q <- 0.95
mta_dt <- rbindlist(lapply(c(
  # archetypes
  file.path(arc_dir, sprintf("motif-scores-archetypes-%s-mona-q%s.tsv.gz", arc_id, q)),
  # experimental motifs
  file.path(mta_dir, sprintf("motif-scores-mona-q%s.tsv.gz", q))
), fread))

# calculate relative motif scores (independent of the motif length)
mta_dt[, relative_motif_score := motif_score / max(motif_score)]
mta_dt <- unique(mta_dt)

# subset enriched motifs
mta_en <- fread(file.path(mta_dir, "motif-enrichment-mona-q0.98-FC-1-padj-0.001.tsv"))
mta_en[, cell_type := factor(cell_type, levels = cell_types)]
mta_dt <- mta_dt[motif %in% mta_en$archetype_name]

# save input motifs hits
fwrite(
  mta_dt, 
  file.path(syn_dir, "motif-hits-all.tsv.gz"),
  sep = "\t"
)

```

We will reduce sets of overlapping motif hits in peaks to one best scoring 
motif per set. To speed things up, we will run this parallelized across 
chromosomes.

```{bash}
ovl=0.5
mkdir logs

for chr in "NW_026019277.1" "NW_026019278.1" "NW_026019279.1" "NW_026019251.1" "NW_026019260.1" "NW_026019264.1" "NW_026019267.1" "NW_026019271.1" "NW_026019272.1" "NW_026019275.1"
do
Rscript 09_Motif_syntax_top_down.R $chr $ovl > logs/09_Motif_syntax_$chr.log 2>&1 &
done

for chr in "NC_064034.1" "NC_064035.1" "NC_064036.1" "NC_064037.1" "NC_064038.1" "NC_064039.1" "NC_064040.1" "NC_064041.1" "NC_064042.1" "NC_064043.1" "NC_064044.1" "NC_064045.1" "NC_064046.1" "NC_064047.1" "NC_064048.1"
do
Rscript 09_Motif_syntax_top_down.R $chr $ovl > logs/09_Motif_syntax_$chr.log 2>&1 &
done
```

Parse and save results from chromosome iterations.

```{r}
# load results
res_fns <- list.files(
  syn_dir, 
  pattern = "motif-hits-reduced-N[WC].*.rds", 
  full.names = TRUE
)
res_lst <- lapply(res_fns, function(x) readRDS(x))
select_hits_lst <- unlist(lapply(res_lst, function(x) x$select_hits))
reduce_hits_lst <- unlist(lapply(res_lst, function(x) x$reduce_hits))
inputs_hits_lst <- unlist(lapply(res_lst, function(x) x$inputs_hits))

# input motifs hits
inputs_hits <- rbindlist(lapply(inputs_hits_lst, as.data.table))

# save input motifs hits
fwrite(
  inputs_hits, 
  file.path(syn_dir, "motif-hits-all.tsv.gz"),
  sep = "\t"
)

# reduced groups hits list
reduce_hits <- rbindlist(lapply(reduce_hits_lst, as.data.table))

# save reduced groups hits
fwrite(
  reduce_hits, 
  file.path(syn_dir, "motif-hits-reduced.tsv.gz"),
  sep = "\t"
)

# selected motifs hits
select_hits <- rbindlist(lapply(select_hits_lst, as.data.table))

# save selected hits
fwrite(
  select_hits, 
  file.path(syn_dir, "motif-hits-selected.tsv.gz"),
  sep = "\t"
)
```

Plot motif hits for inspection.

```{r}
# plot motif hits for inspection
p_gr_all <- do.call("c", inputs_hits_lst)
p_gr_sel <- do.call("c", select_hits_lst)
pks <- intersect(unique(p_gr_all$peak), unique(p_gr_sel$peak))

# # randomly subset peaks because there's just too many
# set.seed(1950)
# pks <- sample(pks, 10)
# pks <- c(
#   "peak111660", "peak111529", "peak110544", "peak109265", "peak107739",
#   "peak108885", "peak107214", "peak110551", "peak112033", "peak109951"
# )

# check peaks with top scores of enriched motifs
pks_mt <- unique(mta_en[fc > 2 & padj < 1e-5][,.(cell_type, archetype_name)])[order(cell_type)]
pks_gm <- p_gr_all[p_gr_all$motif %in% pks_mt[cell_type=="cnidocyte"]$archetype_name]
pks_dm <- as.data.table(pks_gm)
setorder(pks_dm, -relative_motif_score)
mtn <- "ARCH56_POU4F1"
pks <- unique(pks_dm[motif == mtn]$peak)
if (length(pks) > 20) {
  pks <- sample(pks, 20)
}

# where to save the results
plot_hits_lst <- vector("list", length(pks)); names(plot_hits_lst) <- pks
for (pk in pks) {
  
  # all motif hits
  pgr_all <- p_gr_all[p_gr_all$peak == pk]
  gpp_all <- mta_plot_granges(
    pgr_all, 
    label = "motif", 
    color = "relative_motif_score"
  ) +
    labs(title = "Input motif hits") +
    theme(
      axis.text.x = element_blank(),
      axis.title.x = element_blank()
    )
  # reduced motif hits
  pgr_sel <- p_gr_sel[p_gr_sel$peak == pk]
  gpp_sel <- mta_plot_granges(
    pgr_sel, 
    label = "motif", 
    color = "relative_motif_score",
    xlims = c(min(start(pgr_all)), max(end(pgr_all)))
  ) + 
    labs(title = "Non-overlapping motif hits")
  # assemble the plots
  gpp <- gpp_all / gpp_sel + 
    plot_layout(ncol = 1, guides = "keep") +
    plot_annotation(title = sprintf("%s (%s)", pk, mtn))
  # add to plots list
  plot_hits_lst[[pk]] <- gpp
}

# save plots
pdf(
  file.path(fig_dir, "motif-hits-ranges-reduced.pdf"), 
  width = 24, height = 18
)
print(plot_hits_lst)
dev.off()

```

Per cell type lexicons: merge cell type specific peaks with reduced hits info.

```{r}
# load motifs hits
select_hits <- fread(file.path(syn_dir, "motif-hits-selected.tsv.gz"))
select_hits[, strand := NULL]
setnames(
  select_hits, 
  c("seqnames", "start", "end", "width"),
  c("motif_seqnames", "motif_start", "motif_end", "motif_width")
)

# all peaks
peaks <- fread(file.path(pks_dir, "Peaks_cell_type_mapped.bed"))
setnames(peaks, c("seqnames", "start", "end", "peak", "score", "strand"))
peaks <- unique(peaks)
peaks_gr <- makeGRangesFromDataFrame(peaks, keep.extra.columns = TRUE)

  
# load per cell type peaks
pks_list <- vector("list", length = length(cell_types))
names(pks_list) <- cell_types
for (ct in cell_types) {

  message(sprintf("Peaks for %s", ct))
  
  # cell type peaks
  stg_dir <- ifelse(ct %in% adult_cell_types, adult_dir, gastr_dir)
  pks_fn <- file.path(
    stg_dir, "ArchRProj", "PeakDifferential", "cell_type_filtered",
    sprintf("Peaks-%s-vs-others.tsv", ct)
  )
  pks_dt <- fread(pks_fn, select = 1:3)
  setnames(pks_dt, c("seqnames", "start", "end"))
  
  pks_gr <- makeGRangesFromDataFrame(pks_dt)
  
  # overlp peaks (to map per-stage peak ids to final peak set ids)
  pks_ovl <- findOverlaps(query = peaks_gr, subject = pks_gr)
  pks_dat <- peaks_gr[queryHits(pks_ovl)]
  
  # add to list
  pks_list[[ct]] <- as.data.table(pks_dat)

}
pks_ct <- rbindlist(pks_list, idcol = "cell_type")
pks_ct[, c("score", "strand") := NULL]

# merge with selected motif hits
stopifnot(all(unique(pks_ct$peak) %in% select_hits$peak))
mts_ct <- merge(
  pks_ct, select_hits, 
  by = "peak", 
  allow.cartesian = TRUE
)

# save
fwrite(
  mts_ct, 
  file.path(syn_dir, "motif-hits-selected-cell-type.tsv.gz"),
  sep = "\t"
)
```

Add motifs similarity clusters info to motifs hits

```{r}
# archetype pairwise similarities
sim_mat <- readRDS(
  file.path(arc_dir, "motif-similarity-archetypes-PPM-PCC-0.8-IC0.5-5bp.rds")
)

# clusters of archetypes based on pairwise similarities
hc <- hclust(
  tgs_dist(sim_mat), method = "complete"
)
ord <- hc$labels[hc$order]
sim_mat <- sim_mat[ord, ord]
k <- 400
ctr <- cutree(hc, k = k)

# add experimental motifs
ets <- unique(mts_ct[!motif %in% names(ctr)]$motif)
ctr <- c(ctr, structure(
  max(ctr) + seq_along(ets),
  names = ets
))

# add to motif hits info
mts_ct[, motif_cluster := ctr[motif]]
stopifnot(nrow(mts_ct[is.na(motif_cluster)])==0)

# save
fwrite(
  mts_ct, 
  file.path(syn_dir, "motif-hits-selected-cell-type.tsv.gz"),
  sep = "\t"
)
```

## Reduce overlapping motifs (bottom-up approach)

We will derive motif lexicons by starting from motif hits in cell type specific 
peaks. First, get locations of all hits (motif scores above the 95th quantile of 
genomic binding energy) for cell-type enriched motifs. Then we identify groups 
of overlapping motif hits, and select the most enriched motif as representative 
motif hit per group. 

Load the motifs hits input data.

```{r}
# load motif scores
arc_id <- "PPM-PCC-0.8-IC0.5-5bp"
q <- 0.95
mta_dt <- rbindlist(lapply(c(
  # archetypes
  file.path(arc_dir, sprintf("motif-scores-archetypes-%s-mona-q%s.tsv.gz", arc_id, q)),
  # experimental motifs
  file.path(mta_dir, sprintf("motif-scores-mona-q%s.tsv.gz", q))
), fread))

# calculate relative motif scores (independent of the motif length)
mta_dt[, relative_motif_score := motif_score / max(motif_score)]
mta_dt <- unique(mta_dt)

# subset enriched motifs
mta_en <- fread(file.path(mta_dir, "motif-enrichment-mona-q0.98-FC-1-padj-0.001.tsv"))
mta_en[, cell_type := factor(cell_type, levels = cell_types)]
mta_en <- unique(mta_en[,.(cell_type, archetype_name, fc, pval, padj)])
setnames(mta_en, "archetype_name", "motif")
mta_dt <- mta_dt[motif %in% mta_en$motif]

# save input motifs hits
fwrite(
  mta_dt, 
  file.path(syn_dir, "motif-hits-all.tsv.gz"),
  sep = "\t"
)

```

For each cell type, get specific peaks and reduce overlapping motifs in each 
peak, selecting the top enriched one per group.

```{r}
# all peaks
peaks <- fread(file.path(pks_dir, "Peaks_cell_type_mapped.bed"))
setnames(peaks, c("seqnames", "start", "end", "peak", "score", "strand"))
peaks <- unique(peaks)
peaks_gr <- makeGRangesFromDataFrame(peaks, keep.extra.columns = TRUE)

# overlap to merge peaks
reciprocal_overlap <- 0.5

# load per cell type peaks
pks_list <- 
  select_hits_list <- 
    reduce_hits_list <-
      inputs_hits_list <- 
        vector("list", length = length(cell_types))
names(pks_list) <- 
  names(select_hits_list) <- 
    names(reduce_hits_list) <- 
      names(inputs_hits_list) <- 
        cell_types

for (ct in cell_types) {

  message(sprintf("%s | Reducingp peaks for %s", Sys.time(), ct))
  
  # cell type peaks
  stg_dir <- ifelse(ct %in% adult_cell_types, adult_dir, gastr_dir)
  pks_fn <- file.path(
    stg_dir, "ArchRProj", "PeakDifferential", "cell_type_filtered",
    sprintf("Peaks-%s-vs-others.tsv", ct)
  )
  pks_dt <- fread(pks_fn, select = 1:3)
  setnames(pks_dt, c("seqnames", "start", "end"))
  
  pks_gr <- makeGRangesFromDataFrame(pks_dt)
  
  # overlap peaks (to map per-stage peak ids to final peak set ids)
  pks_ovl <- findOverlaps(query = peaks_gr, subject = pks_gr)
  pks_dat <- peaks_gr[queryHits(pks_ovl)]
  
  # add to list
  pks_list[[ct]] <- pks_dat
  
  # peaks in cell type
  mta_ct_dt <- mta_dt[peak %in% pks_dat$peak]
  
  # motif enrichment in cell type
  mta_ct_en <- mta_en[cell_type == ct]
  
  # combine
  mta_ct <- merge.data.table(mta_ct_dt, mta_ct_en, by = "motif", all.x = TRUE)
  
  # make ranges
  mta_gr <- makeGRangesFromDataFrame(mta_ct, keep.extra.columns = TRUE)
  
  # reduce motif hits
  red_res <- mta_reduce_motif_hits(
    mta_gr, 
    reciprocal_overlap = reciprocal_overlap,
    order_col = "padj",
    order_decrease = FALSE
  )
  
  # add to list
  select_hits_list[[ct]] <- red_res$select_hits
  reduce_hits_list[[ct]] <- red_res$reduce_hits
  inputs_hits_list[[ct]] <- red_res$inputs_hits
  
}

message(sprintf("%s | All done", Sys.time()))

# save input motifs hits
inputs_hits <- do.call("c", unname(inputs_hits_list))
inputs_hits <- as.data.table(inputs_hits)
fwrite(
  inputs_hits, 
  file.path(syn_dir, "motif-hits-all.tsv.gz"),
  sep = "\t"
)

# save reduced groups hits
reduce_hits <- do.call("c", unname(reduce_hits_list))
reduce_hits <- as.data.table(reduce_hits)
fwrite(
  reduce_hits, 
  file.path(syn_dir, "motif-hits-reduced.tsv.gz"),
  sep = "\t"
)

# save selected motifs hits
select_hits <- do.call("c", unname(select_hits_list))
select_hits <- as.data.table(select_hits)
fwrite(
  select_hits, 
  file.path(syn_dir, "motif-hits-selected.tsv.gz"),
  sep = "\t"
)
```

To speed things up, we will run this parallelized across cell types.

```{bash}
ovl=0.5
mkdir logs
for ct in cnidocyte cnidocyte_gastrula ecto_pharynx ectoderm ecto_aboral EMS EMS_ecto_boundary gastro_circular_muscle_1 gastro_circular_muscle_2 gastro_parietal_muscle gastro_IRF1_2 gastro_somatic_gonad muscle_tentacle_retractor muscle_mesentery_retractor digestive_filaments_1 digestive_filaments_2 digestive_filaments_3 epidermis_1 epidermis_2 precursors_PGC precursors_endoNPC precursors_NPC NPC_1 NPC_2 neuron_GATA_Islet_1 neuron_GATA_Islet_2 neuron_Pou4_FoxL2_1 neuron_Pou4_FoxL2_2 neuron_Pou4_FoxL2_3 neuronal_gastrula gland gland_mucin
do
Rscript 09_Motif_syntax_bottom_up.R $ct $ovl > logs/09_Motif_syntax_$ct.log 2>&1 &
done
```

Parse and save results from cell type iterations.

```{r}
# load results
res_fns <- list.files(
  syn_dir, 
  pattern = "motif-hits-reduced-.*.rds", 
  full.names = TRUE
)
res_lst <- lapply(res_fns, function(x) readRDS(x))
select_hits_lst <- unlist(lapply(res_lst, function(x) x$select_hits))
reduce_hits_lst <- unlist(lapply(res_lst, function(x) x$reduce_hits))
inputs_hits_lst <- unlist(lapply(res_lst, function(x) x$inputs_hits))

# input motifs hits
inputs_hits <- rbindlist(lapply(inputs_hits_lst, as.data.table))

# save input motifs hits
fwrite(
  inputs_hits, 
  file.path(syn_dir, "motif-hits-all.tsv.gz"),
  sep = "\t"
)

# reduced groups hits list
reduce_hits <- rbindlist(lapply(reduce_hits_lst, as.data.table))

# save reduced groups hits
fwrite(
  reduce_hits, 
  file.path(syn_dir, "motif-hits-reduced.tsv.gz"),
  sep = "\t"
)

# selected motifs hits
select_hits <- rbindlist(lapply(select_hits_lst, as.data.table))

# save selected hits
fwrite(
  select_hits, 
  file.path(syn_dir, "motif-hits-selected.tsv.gz"),
  sep = "\t"
)
```

Plot motif hits for inspection.

```{r}
plot_hits_lst <- vector("list", length = length(cell_types))
names(plot_hits_lst) <- cell_types

for (ct in cell_types) {
  
  p_gr_all <- inputs_hits[inputs_hits$cell_type == ct, ]
  p_gr_sel <- select_hits[select_hits$cell_type == ct, ]
  
  pks <- intersect(unique(p_gr_all$peak), unique(p_gr_sel$peak))
  message(sprintf("%s peaks for %s", length(pks), ct))
  
  # randomly subset peaks because there's just too many
  if (length(pks) > 10) {
    set.seed(1950)
    pks <- sample(pks, 10)
  }
  
  # where to save the results
  plot_hits_lst[[ct]] <- vector("list", length(pks))
  names(plot_hits_lst[[ct]]) <- pks
  
  for (pk in pks) {
    
    # all motif hits
    pgr_all <- p_gr_all[p_gr_all$peak == pk]
    gpp_all <- mta_plot_granges(
      pgr_all, 
      label = "motif", 
      color = "fc"
    ) +
      labs(title = "Input motif hits") +
      theme(
        axis.text.x = element_blank(),
        axis.title.x = element_blank()
      )
    # reduced motif hits
    pgr_sel <- p_gr_sel[p_gr_sel$peak == pk]
    gpp_sel <- mta_plot_granges(
      pgr_sel, 
      label = "motif", 
      color = "fc",
      xlims = c(min(pgr_all$start), max(pgr_all$end))
    ) + 
      labs(title = "Non-overlapping motif hits")
    # assemble the plots
    gpp <- gpp_all / gpp_sel + 
      plot_layout(ncol = 1, guides = "keep") +
      plot_annotation(title = sprintf("%s %s", ct, pk))
    # add to plots list
    plot_hits_lst[[ct]][[pk]] <- gpp
  }
}


# save plots
pdf(
  file.path(fig_dir, "motif-hits-ranges-reduced.pdf"), 
  width = 24, height = 18
)
print(plot_hits_lst)
dev.off()

```

## Summaries

Load results

```{r}
syn_sub_dir <- "fcenrassignovl0.5"
mts_ct <- fread(file.path(syn_dir, syn_sub_dir, "motif-hits-selected.tsv.gz"))
amt_ct <- fread(file.path(syn_dir, syn_sub_dir, "motif-hits-all.tsv.gz"))
```

Compare number of motif hits per peak before and after reducing motif hits.

```{r}
# how many (different or same) motifs hits per peak?
all_hits <- rbindlist(list("all" = amt_ct, "reduced" = mts_ct), idcol = "set")
mta_pks_mts_diff <- unique(all_hits[,.(motif, peak, set)])[, .N, .(peak, set)]
mta_pks_mts_same <- unique(all_hits[, .N, .(motif, peak, set)])

ggp_pks_mts_same <- ggplot(mta_pks_mts_same, aes(N)) + 
  geom_histogram(bins = 50, color = "white") +
  scale_y_continuous(expand = expansion(mult = c(0, 0.1)), trans = "log10") +
  facet_grid(set ~ ., scales = "free_y") +
  labs(x = "Number of same motif hits per peak", y = "Number of peaks") +
  theme(panel.grid.major = element_line())
  
ggp_pks_mts_diff <- ggplot(mta_pks_mts_diff, aes(N)) + 
  geom_histogram(bins = 50, color = "white") +
  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
  facet_grid(set ~ ., scales = "free_y") +
  labs(x = "Number of different motifs hits per peak", y = "Number of peaks") +
  theme(panel.grid.major = element_line())

ggp_pks_mts <- ggp_pks_mts_same / ggp_pks_mts_diff + plot_layout(ncol = 1)
ggsave(
  file.path(fig_dir, "motif-hits-per-peak.pdf"), 
  ggp_pks_mts, width = 8, height = 6
)
```

Count number of motifs per cell types.

```{r}
# order peaks and cell types
peaks <- paste0(
  "peak",
  unique(sort(as.integer(str_extract(mts_ct$peak, "\\d+"))))
)
mts_ct[, cell_type := factor(cell_type, levels = cell_types)]

# unique motif hits per cell type
mts_ct_uniq <- unique(mts_ct[, .(cell_type, motif)])

# counts
mts_ct_uniq_n <- mts_ct_uniq[, .(n_motifs = .N), .(cell_type)]

# plot
gp_mts <- ggplot(
  mts_ct_uniq_n,
  aes(
    cell_type, n_motifs, 
    fill = cell_type,
    color = cell_type
  )
) + 
  geom_bar(stat = "identity") +
  geom_text(
    aes(label = n_motifs), 
    vjust = -0.5, hjust = 0.5, size = 4, color = "black"
  ) +
  scale_fill_manual(
    values = ct_cols, 
    guide = "none"
  ) +
  scale_color_manual(values = structure(
    colorspace::darken(ct_cols, 0.5),
    names = names(ct_cols)
  ), guide = "none") +  
  scale_y_continuous(
    expand = expansion(mult = c(0, 0.15))
  ) +
  labs(x = "cell type", y = "motifs") +
  theme(
    legend.position = "none",
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    panel.grid.major.y = element_line(colour = "grey", size = 0.25)
  )

ggsave(
  file.path(fig_dir, "motif-hits-per-cell-type.pdf"), 
  gp_mts, width = 10, height = 5
)
```

Count number of motif hits per peak for all cell types.

```{r}
# order peaks and cell types
peaks <- paste0(
  "peak",
  unique(sort(as.integer(str_extract(mts_ct$peak, "\\d+"))))
)
mts_ct[, cell_type := factor(cell_type, levels = cell_types)]
mts_ct[, peak := factor(peak, levels = peaks)]
setorder(mts_ct, cell_type, peak)

# unique motif hits in peaks per cell type
mts_ct_uniq <- unique(mts_ct[, .(cell_type, peak, motif)])

# counts
mts_ct_uniq_n <- mts_ct_uniq[, .(n_motifs = .N), .(cell_type, peak)][, .(n_peaks = .N), .(cell_type, n_motifs)]

# plot
gp_pks_mts <- ggplot(
  mts_ct_uniq_n,
  aes(
    cell_type, n_motifs, 
    size = n_peaks, 
    label = n_peaks,
    fill = cell_type,
    color = cell_type
  )
) + 
  geom_point(shape = 22) +
  geom_text(vjust = 0.5, hjust = 0.5, size = 2, color = "black") +
  scale_fill_manual(
    values = ct_cols, 
    guide = "none"
  ) +
  scale_color_manual(values = structure(
    colorspace::darken(ct_cols, 0.5),
    names = names(ct_cols)
  ), guide = "none") +  
  scale_size_continuous(
    range = c(2, 8),
    name = "number of peaks"
  ) +
  scale_y_continuous(
    breaks = seq(1, max(mts_ct_uniq_n$n_motifs), by = 1),
    expand = expansion(mult = c(0.05, 0.05))
  ) +
  labs(x = "cell type", y = "motifs per peak") +
  theme(
    legend.position = "right",
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    panel.grid.major.y = element_line(colour = "grey", size = 0.25)
  )

ggsave(
  file.path(fig_dir, "motif-hits-per-peak-per-cell-type.pdf"), 
  gp_pks_mts, width = 10, height = 8
)
```

Peaks per cell type

```{r}
unique(mts_ct[, .(peak,cell_type)])[,.N,cell_type][order(-N)]
```

Annotate motifs and peaks with metadata.

```{r}
# # # # # # # # # # # # #
#  motifs hits results  #
# # # # # # # # # # # # #

# reduced motif hits
mts_ct[, archetype_name := motif]

# # # # # # # # # # # # # #
#  peaks classification   #
# # # # # # # # # # # # # #

# load peaks classification
pks_dt <- fread(file.path(pks_dir, "Peaks_cell_type_promoter_annotation.tsv"))

# cell type entries into separate rows
pks_dt <- separate_rows(pks_dt, "cell_types", sep = ",")
setDT(pks_dt)
setnames(pks_dt, "cell_types", "cell_type")

# annotations for each peak: CP > SP > AP > NO
pks_dt <- unique(pks_dt[, .(peak, promoter, cell_type)])
pks_dt[promoter == "AP+", promoter := "AP"]
pks_dt[, promoter := factor(promoter, levels = c("CP", "SP", "AP", "NO"))]
setorder(pks_dt, peak, promoter)
setnames(pks_dt, "cell_type", "broad_cell_type")
pks_dt <- pks_dt[, .SD[1], .(peak, broad_cell_type)]
pks_dt <- unique(pks_dt)
stopifnot(!any(pks_dt[,.N,.(peak, broad_cell_type)]$N > 1))

# merge hits results with peaks classification
mts_ct <- merge.data.table(
  mts_ct, bct_maps,
  by = "cell_type", all.x = TRUE
)
mts_ct <- merge.data.table(
  mts_ct, pks_dt,
  by = c("peak", "broad_cell_type"), 
  all.x = TRUE
)
mts_ct[is.na(promoter), promoter := "NO"]

# # # # # # # # # # # #
#  archetype family   #
# # # # # # # # # # # #

# load archetype family info
cor_dt <- fread(file.path(
  "Results", 
  sprintf("ChromVAR-%s", arc_id), 
  "correlation-seacells-archetype-motif-score-gene.tsv.gz"
))

# add archetype family info
mts_ct <- merge.data.table(
  mts_ct, 
  unique(cor_dt[, .(archetype_name, archetype_family)]),
  by = "archetype_name",
  sort = FALSE, all.x = TRUE
)
mts_ct[archetype_name == "FoxQ2d", archetype_family := "Forkhead"]

# # # # # # # # # # # # # # #
#  motif to TF assignment   #
# # # # # # # # # # # # # # #

# load motif-to-TF assignments
arc_id <- "PPM-PCC-0.8-IC0.5-5bp"
arc_as <- fread(file.path(arc_dir, sprintf(
  "motif-assignment-archetypes-%s.tsv", arc_id
)))

# merge hits results with motif assignments
mts_ct <- merge.data.table(
  mts_ct, unique(arc_as[, .(
    gene, gene_name, common_name, og, pfam, tf_family, 
    archetype_name, CisBP_assignment
  )]),
  by = c("archetype_name"),
  all.x = TRUE, sort = FALSE, allow.cartesian = TRUE
)
mts_ct[is.na(mts_ct)] <- ""

# how many archetypes assigned to TFs are among the selected motifs?
arc_sl <- unique(arc_as[, .(archetype_name)])
arc_sl[, selected := archetype_name %in% mts_ct$archetype_name]
arc_sl[, .N, selected]

# how many of the selected motifs are assigned to TFs?
arc_tf <- unique(mts_ct[, .(archetype_name)])
arc_tf[, assigned := archetype_name %in% arc_as$archetype_name]
arc_tf[, .N, assigned]

# make gene labels
mts_ct[gene_name == "" & common_name != "", gene_name := common_name]
mts_ct[, gene_label := common_name]
mts_ct[gene_label == "", gene_label := ifelse(nchar(gene_name) > 45, paste0(substr(gene_name, 1, 43), "..."), gene_name)]
mts_ct[gene_label == "", gene_label := ifelse(nchar(og) > 45, paste0(substr(og, 1, 43), "..."), og)]
mts_ct[gene_label == "", gene_label := ifelse(nchar(pfam) > 45, paste0(substr(pfam, 1, 43), "..."), pfam)]
stopifnot(nrow(mts_ct[gene != "" & gene_label == ""]) == 0)

# count motif hits per cell type
mts_ct[, cell_type := factor(cell_type, levels = cell_types)]
mts_ct[, n_peaks := length(unique(.SD$peak)), .(cell_type)]
mts_ct[, n_peaks_motif := length(unique(.SD$peak)), .(cell_type, archetype_name)]
mts_ct[, frac_peaks_motif := n_peaks_motif / n_peaks]
```

Plot motif occurrences together on dotmap with motif enrichment FC.

```{r}
# we will order data for plotting by motif enrichment FC

# load enrichment data (significant, non-redundant)
# mta_en <- fread(file.path(mta_dir, "motif-enrichment-mona-q0.98-FC-1-padj-0.001.tsv"))
# mta_en[, cell_type := factor(cell_type, levels = cell_types)]
# mta_en[, archetype_name := factor(archetype_name, levels = unique(mta_en$archetype_name))]

# load enrichment data (all)
mta_en <- rbindlist(lapply(c(
  file.path(mta_dir, "motif-enrichment-cell-type-mona-q0.98.tsv"),
  file.path(arc_dir, "motif-enrichment-cell-type-archetypes-PPM-PCC-0.8-IC0.5-5bp-mona-q0.95.tsv")
), fread))
mta_en <- unique(mta_en[,.(cell_type, motif, fc, pval, padj)])

# cluster enrichment data for plot
mta_en[, cell_type := factor(cell_type, levels = cell_types)]
mta_en[, minuslog10padj := -1 * log10(padj)]
padj_dt <- unique(mta_en[, .(motif, cell_type, minuslog10padj)])
padj_dt <- dcast.data.table(padj_dt, motif ~ cell_type, value.var = "minuslog10padj")
padj_mt <- as.matrix(padj_dt[, -1])
rownames(padj_mt) <- padj_dt[[1]]
arc_ord <- order(apply(padj_mt, 1, which.max))
arc_lvl <- rownames(padj_mt)[arc_ord]
mta_en[, motif := factor(motif, levels = arc_lvl)]
setorder(mta_en, motif)
setnames(mta_en, "motif", "archetype_name")

# select significant archetypes
# fc_thr <- 1
# pa_thr <- 0.001
# arc_sig <- unique(mta_en[fc>fc_thr & padj<pa_thr]$motif)
# length(arc_sig)
# mta_en <- mta_en[archetype_name %in% arc_sig]

# count motif hits data for plotting
mts_ns <- unique(mts_ct[, .(
  cell_type, archetype_name, archetype_family,
  gene, gene_label,
  n_peaks, n_peaks_motif, frac_peaks_motif,
  fc, pval, padj
)])
stopifnot(!any(mts_ns[,.N,.(cell_type, archetype_name, gene)]$N > 1))
mts_ns[, gene_archetype := paste(gene, archetype_name, sep = " | ")]

# transform for plotting
mts_ns[, cell_type := factor(cell_type, levels = cell_types)]
mts_ns[, archetype_name := factor(archetype_name, levels = unique(mta_en$archetype_name))]
setorder(mts_ns, archetype_name, cell_type)
mts_ns[, gene_archetype := factor(gene_archetype, levels = unique(mts_ns$gene_archetype))]
mts_ns[, fc_scaled := pmin(fc, 6)]
mts_ns[, minuslog10padj := -1 * log10(padj)]
mts_ns[, minuslog10padj_scaled := pmin(minuslog10padj, 30)]

# archetype family colors
arc_fam_vec <- sort(unique(mts_ns$archetype_family))
arc_fam_col <- structure(
  colorRampPalette(RColorBrewer::brewer.pal(8, "Dark2"))(length(arc_fam_vec)),
  names = arc_fam_vec
)
arc_fam_col[names(arc_fam_col)==""] <- "white"

# plot motif enrichment dotmap
mts_gp_occ <- ggplot(
  mts_ns, 
  aes(cell_type, gene_archetype)
  ) +
  geom_point(
    aes(size = frac_peaks_motif, fill = fc_scaled),
    shape = 21
  ) +
  geom_text(
    data = unique(mts_ns[,.(gene_archetype, archetype_name)]),
    aes(y = gene_archetype, label = archetype_name),
    x = length(unique(mts_ns$cell_type)) + 1,
    hjust = 0,
    size = 2,
    inherit.aes = FALSE
  ) +
  scale_y_discrete(
    breaks = mts_ns[gene_label != ""]$gene_archetype,
    labels = mts_ns[gene_label != ""]$gene_label
  ) +
  scale_x_discrete(
    expand = expansion(mult = c(0.02, 0.5))
  ) +
  scale_fill_gradientn(
    name = "motif enrichment\nfold change",
    breaks = c(0, 2, 4, 6, 8),
    colours = c(
      "white", "#fee5d9", "#fcae91", "#fb6a4a", "#de2d26", "#a50f15", "#7a0105"
    )
  ) +
  scale_size_continuous(
    name = "fraction of\ncell type-specific peaks\nwith motif hits",
    limits = c(0, 0.8),
    range = c(0, 6)
  ) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 8),
    axis.text.y = element_text(size = 6),
    panel.grid.major = element_line(linewidth = 0.25),
    axis.title = element_blank(),
    plot.margin = margin(5.5, 40, 5.5, 40)
  )

# archetype family annotation colorbar
mts_dt_arc <- unique(mts_ns[,.(gene_archetype, archetype_family)])
mts_dt_arc[, x := 1]
mts_gp_arc <- ggplot(mts_dt_arc) +
  geom_tile(
    aes(x = x, y = gene_archetype, fill = archetype_family),
  ) +
  scale_y_discrete(
    position = "right",
    breaks = mts_dt_arc$gene_archetype,
    labels = mts_dt_arc$archetype_family,
  ) +
  scale_fill_manual(values = arc_fam_col) +
  theme_void() +
  theme(
    axis.text.y = element_text(size = 6, hjust = 0),
    leegend.position = "none"
  )

mts_gp <- mts_gp_occ +
  plot_spacer() +
  (mts_gp_arc & theme(legend.position = "none")) + 
  plot_layout(nrow = 1, widths = c(20, -2.7, 0.25), guides = "collect")

ggsave(
  file.path(fig_dir, "motif-hits-number-fc-dotmap.pdf"), 
  mts_gp, height = 42, width = 12, limitsize = FALSE
)
```

Count motif combinations (not considering order, distance...) per cell type.

```{r}
# subset motifs assigned to TFs
use_genes_assigned_to_motfs <- TRUE

# subset motifs assigned to active TFs
use_active_tfs <- TRUE
grn_tfs <- fread(file.path(
  grn_dir, 
  "networks", 
  "grn_tfs_info_expression_fc_0.4_accessibility_access_0.4_chromvar_4.tsv"
))
grn_tfs <- unique(grn_tfs[,.(motif, gene, zscore, cell_type)])

# list to save results
cmb_ls <- structure(vector("list", length = length(cell_types)), names = cell_types)

# loop over cell types
for (ct in cell_types) {
  
  message(ct)
  cols <- c("N", "peak", "promoter", "motif", "motif_occur", "motif_nocp_occur")
  
  # make a matrix of motif hits in peaks
  if (use_genes_assigned_to_motfs == TRUE) {
    mts_dat <- unique(
      mts_ct[cell_type == ct & gene != "", .(
        cell_type, peak, promoter, motif,
        # motif_start, motif_end,  # include if we want all instances of motif in a peak
        gene, gene_label, common_name
      )]
    )
    if (use_active_tfs == TRUE) {
      mts_dat <- merge.data.table(
        mts_dat, unique(grn_tfs[cell_type == ct]),
        by = c("motif", "gene", "cell_type"), 
        all = FALSE, sort = FALSE
      )
    }
  } else {
    mts_dat <- unique(
      mts_ct[cell_type == ct, .(
        cell_type, peak, promoter, motif,
        # motif_start, motif_end,  # include if we want all instances of motif in a peak
      )]
    )
  }
  
  # number of peaks in cell type
  n_pks <- length(unique(mts_dat$peak))
  n_nocp_pks <- length(unique(mts_dat[promoter != "CP"]$peak))
  
  # count in how many peaks a motif occurs
  occ_mts <- unique(
    mts_dat[, .(peak, promoter, motif)]
  )[, ':='(
    motif_occur = length(unique(.SD$peak)),
    motif_nocp_occur = length(unique(.SD[promoter != "CP"]$peak))
  ), motif]
  occ_mts <- unique(occ_mts[, .(motif, motif_occur, motif_nocp_occur)])
  
  # add to motifs hits table
  mts_dat <- merge.data.table(
    mts_dat, occ_mts, by = "motif", 
    all.x = TRUE, sort = FALSE
  )
  
  # genes instead of motifs
  if (use_genes_assigned_to_motfs == TRUE) {
    mts_dat[, genes := paste(unique(sort(.SD$gene)), collapse = " | "), .(motif)]
    mts_dat[, gene_label := paste(unique(c(
      sort(.SD[common_name != ""]$gene_label),
      sort(.SD[common_name == ""]$gene_label)
    )), collapse = " | "), .(motif)]
    mts_dat[nchar(gene_label) > 100, gene_label := paste0(
      substr(gene_label, 1, 97), "..."
    ), gene_label]
    mts_dat[, c("gene") := NULL]
    mts_dat <- unique(mts_dat)
    mts_dat[, motif := NULL]
    setnames(mts_dat, "gene_label", "motif")
  }
  
  # select motifs that have hits in more than 10% of peaks
  mts_top <- mts_dat[motif_occur > 0.1 * length(unique(mts_dat$peak))]
  mts_top[, N := 1]
  mts_top <- unique(mts_top[, ..cols])
  
  # find top combinations of motifs
  mts_com <- rbindlist(lapply(c(2:4), function(n) {
    tryCatch({
      message("Counting combinations of ", n, " motifs in ", ct, " peaks:")
      mts_comb <- combn(
        unique(mts_top$motif), n, simplify = FALSE
      )
      rbindlist(pblapply(mts_comb, function(x) {
        dt <- unique(mts_top[motif %in% x, .(peak, promoter, motif)])[, N := .N, peak]
        unique(dt[N == n][, motif := paste(x, collapse = " + ")])
      }))      
    }, error = function(e) NULL)
  }))
  
  # count in how many peaks a combination of motif occurs
  if (nrow(mts_com) > 0) { 
    mts_com[, ':='(
      motif_occur = length(unique(.SD$peak)),
      motif_nocp_occur = length(unique(.SD[promoter != "CP"]$peak))
    ), .(motif, N)]
    
    # combine with motifs hits table
    mts_top <- rbindlist(list(
      mts_top[, ..cols],
      mts_com[, ..cols]
    ), use.names = TRUE)[, cell_type := ct]
  }
  
  # add to list
  mts_top[, cell_type := ct]
  mts_top[, n_pks := n_pks][, n_nocp_pks := n_nocp_pks]
  cmb_ls[[ct]] <- mts_top
  
}

# combine results across cell types
cmb_dt <- rbindlist(cmb_ls)

# helper function for plotting integer breaks
int_breaks <- function(x, n = 5) {
  l <- pretty(x, n)
  l[abs(l %% 1) < .Machine$double.eps ^ 0.5] 
}

# plot results
cpl_ls <- lapply(cell_types, function(ct) {
  
  message(ct)
  
  # select data
  cmb_ct <- cmb_dt[cell_type == ct]
  cmb_ct <- unique(cmb_ct[, .(motif, motif_occur, motif_nocp_occur, N, n_pks, n_nocp_pks)])
  setorder(cmb_ct, N, -motif_occur)
  cmb_ct[, motif := factor(motif, levels = rev(unique(cmb_ct$motif)))]
  
  if (nrow(cmb_ct) > 0) { 
    # number of peaks in cell type
    n_pks <- unique(cmb_ct$n_pks)
    n_nocp_pks <- unique(cmb_ct$n_nocp_pks)
    
    # only show in plot motifs with hits in more than 1 peak 
    cmb_ct <- cmb_ct[motif_occur > 1]
    
    # only show in plot motifs with hits in more than 2 peaks
    cmb_mt <- cmb_ct[motif_occur > 2]
    if (length(unique(cmb_mt$motif)) > 10)
      cmb_ct <- cmb_mt
    
    # select top motifs to show in plot
    i <- 1
    while (length(unique(cmb_ct$motif)) > 80) {
      cmb_mt <- cmb_ct[motif_occur > 10*i]
      if (length(unique(cmb_mt$motif)) < 40)
        break
      cmb_ct <- cmb_mt
      print(sprintf(
        "occurance > %s: %s motifs", 10*i, length(unique(cmb_mt$motif))
      ))
      i <- i + 1
    }
    
    # plot
    cpl_ct <- ggplot(cmb_ct, aes(motif_occur, motif)) + 
      geom_bar(stat = "identity", fill = ct_cols[ct]) +
      scale_x_continuous(
        expand = expansion(mult = c(0, 0.1)), 
        breaks = int_breaks,
        name = "number of peaks",
        sec.axis = sec_axis(~ . / n_nocp_pks * 100, name = "% of peaks")
      ) +
      scale_y_discrete(
        breaks = unique(cmb_ct$motif),
        labels = str_replace_all(unique(cmb_ct$motif), "\\+", "+\n"),
      ) +
      labs(title = ct) +
      theme(
        panel.grid.major.x = element_line(colour = "grey", size = 0.25),
        panel.grid.minor.x = element_line(colour = "grey", size = 0.05),
      )
    if (length(unique(cmb_ct$N)) > 1) {
      cpl_ct <- cpl_ct + 
        #facet_wrap("N", ncol = 1, scales = "free", strip.position = "right")
        ggforce::facet_col(vars(N), scales = "free", space = "free", strip.position = "right")
    }
  } else {
    cpl_ct <- NULL
  }
  
  cpl_ct
  
})

# save plots
pdf(
  file.path(fig_dir, "motif-TF-occurance-per-cell-type.pdf"), 
  width = 24, height = 42
)
tryCatch(print(cpl_ls), error = function(e) warning(e))
dev.off()

```


