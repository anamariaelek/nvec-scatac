---
title: "Figures"
execute:
  eval: false
  message: false
  warning: false
output: html_notebook
---

# Setup

```{r}
#| label: setup
#| warning: FALSE
#| message: FALSE

# load in-house functions
source("metacell_downstream_functions/Downstream_functions.R")
source("metacell_downstream_functions/utils.R")
source("motif-analysis/mta_downstream_functions.R")
source("scripts/scatac_helper_functions.R")

# global settings
options(stringsAsFactors = FALSE)

# load packages
library(data.table)
library(stringr)
library(ggplot2)
library(patchwork)
library(GenomicRanges)
library(ArchR)
library(metacell)
library(ComplexHeatmap)
library(ape)
library(ggtree)

# set ggplot2 theme
theme_py <- theme_light() + theme(
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  panel.border = element_rect(colour = "black", fill = NA),
  text = element_text(size = 20),
  strip.placement = "outside",
  strip.text = element_text(size = 20, color = "black"),
  strip.background = element_rect(fill = "white")
)
theme_set(theme_py)
blank_theme <- theme_minimal() + theme(
  axis.title.x = element_blank(),
  axis.title.y = element_blank(),
  panel.border = element_blank(),
  panel.grid = element_blank(),
  axis.ticks = element_blank(),
  text = element_text(size = 20)
)
```

Data directories and colors

```{r}
#| label: dirs
adult_dir <- "ArchRProj_Nvec_TSS4_frag200"
gastr_dir <- "ArchRProj_Nvec_gastrula"
pks_dir <- "results/Peaks"
res_dir <- "results/"
fig_dir <- "plots/Figures"
dir.create(fig_dir, showWarnings = FALSE)
ann_dir <- "annotation"
```

Load gene annotations.

```{r}
# gene annotation
gnan <- fread(file.path(
  ann_dir, "Nematostella_DToL_FINAL.tsv"
))

# TF annotation
tfan <- fread(file.path(
  ann_dir, "Nematostella_DToL_TFs_FINAL.tsv"
))

# golden markers
gold <- fread(file.path(
  ann_dir, "golden-marks-231124.tsv"
), header = FALSE)
setnames(gold, c("name", "gene", "cells"))
marker_genes <- structure(
  gold$gene,
  names = gold$name
)
```

Project-specific variables:

```{r}
ct_cols <- c(
  "cnidocyte"                  = "#ff42ff",
  "cnidocyte_gastrula"         = "#f7abf7",
  "ecto_pharynx"               = "#5bc0e8",
  "ectoderm"                   = "#51a0be",
  "ecto_aboral"                = "#045170",
  "EMS"                        = "#bdf5bd",
  "EMS_ecto_boundary"          = "#93dbce",
  "gastro_circular_muscle_1"   = "#85c90e",
  "gastro_circular_muscle_2"   = "#73b009",
  "gastro_parietal_muscle"     = "#8ceb10",
  "gastro_IRF1_2"              = "#c1eb05",
  "gastro_somatic_gonad"       = "#bde314",
  "muscle_tentacle_retractor"  = "#ffd700",
  "muscle_mesentery_retractor" = "#f0e229",
  "digestive_filaments_1"      = "#e33d3d",
  "digestive_filaments_2"      = "#d10606",
  "digestive_filaments_3"      = "#ad0303",
  "epidermis_1"                = "#04ccd4",
  "epidermis_2"                = "#16bacc",
  "precursors_PGC"             = "#bebebe",
  "precursors_endoNPC"         = "#8a8686",
  "precursors_NPC"             = "#636363",
  "NPC_1"                      = "#808d91",
  "NPC_2"                      = "#758d92",
  "neuron_GATA_Islet_1"        = "#0c82f7",
  "neuron_GATA_Islet_2"        = "#1175f0",
  "neuron_Pou4_FoxL2_1"        = "#101cde",
  "neuron_Pou4_FoxL2_2"        = "#0b16bf",
  "neuron_Pou4_FoxL2_3"        = "#2e39dd",
  "neuronal"                   = "#063cb9",
  "gland"                      = "#ff6f08",
  "gland_mucin"                = "#ff8f12"
)
cell_types <- names(ct_cols)
adult_cell_types <- c(
  "cnidocyte",
  "gastro_circular_muscle_1", 
  "gastro_circular_muscle_2",
  "gastro_parietal_muscle",
  "gastro_IRF1_2",
  "gastro_somatic_gonad",
  "muscle_mesentery_retractor",
  "muscle_tentacle_retractor",
  "digestive_filaments_1",
  "digestive_filaments_2",
  "digestive_filaments_3",
  "epidermis_1",
  "epidermis_2",
  "precursors_PGC",
  "precursors_endoNPC",
  "precursors_NPC",
  "neuron_GATA_Islet_1",
  "neuron_GATA_Islet_2",
  "neuron_Pou4_FoxL2_1",
  "neuron_Pou4_FoxL2_2",
  "neuron_Pou4_FoxL2_3",
  "gland"
)
gastr_cell_types <- c(setdiff(cell_types, adult_cell_types))
bct_cols <- toupper(c(
  "cnidocyte"                 = "#FF42FF",
  "ecto"                      = "#51a0be",
  "EMS"                       = "#bdf5bd",
  "gastro_circular_muscle"    = "#73b009",
  "gastro_parietal_muscle"    = "#8ceb10",
  "gastro"                    = "#85c90e",  
  "muscle"                    = "#FFD700",
  "digestive_filaments"       = "#e33d3d",
  "precursors"                = "#BEBEBE",
  "NPC"                       = "#808d91",
  "epidermis"                 = "#04ccd4",
  "neuron_GATA_Islet"         = "#1175f0",
  "neuron_Pou4_FoxL2"         = "#101cde",
  "neuronal"                  = "#063cb9",
  "gland"                     = "#ff6f08"
))
bct_maps <- setDT(cbind.data.frame(
  cell_type = cell_types,
  broad_cell_type = str_extract(cell_types, paste(names(bct_cols), collapse = "|"))
))
cell_type_rename <- c(
  "cnidocyte_precursors" = "NPC_2",
  "^muscle_1" = "muscle_tentacle_retractor",
  "^muscle_2" = "muscle_mesentery_retractor",
  "adult_muscle_1" = "adult_muscle_tentacle_retractor",
  "adult_muscle_2" = "adult_muscle_mesentery_retractor",
  "gastro_unknown_1" = "gastro_IRF1_2",
  "gastro_unknown_2" = "gastro_somatic_gonad",
  "gland_mucous" = "gland",
  "ectoderm_embryonic_oral" = "ecto_pharynx",
  "ectoderm_embryonic$" = "ectoderm",
  "ectoderm_embryonic_aboral" = "ecto_aboral",
  "mesendoderm_embryonic" = "EMS",
  "mesendoderm_ectoderm" = "EMS_ecto_boundary",
  "neuron_GATA_Islet_3" = "neuron_Pou4_FoxL2_3",
  "NPC$" = "NPC_1",
  "precursors_1" = "precursors_PGC",
  "precursors_2" = "precursors_ ",
  "precursors_3" = "precursors_NPC"
)

```

Load ArchR projects for adult and gastrula.

```{r}
proj_adult <- ArchR::loadArchRProject(adult_dir)
proj_gastr <- ArchR::loadArchRProject(gastr_dir)
```

Load gene expression data for adult and gastrula.

```{r}
scdb_gastr_dir <- file.path("../..", "scRNAseq_nvec_technau", "scdb")
scdb_init(scdb_gastr_dir, force_reinit = TRUE)
mat_gastr <- scdb_mat("gastrula")
mc_gastr <- scdb_mc("gastrula_K30")
mc_ann_gastr <- fread(file.path(
    scdb_gastr_dir, "annotation.gastrula_K30.tsv"
))

scdb_adult_dir <- file.path("../..", "scRNAseq_nvec_v4", "scdb")
scdb_init(scdb_adult_dir, force_reinit = TRUE)
mat_adult <- scdb_mat("Nvec")
mc_adult <- scdb_mc("Nvec_K30_atlas")
mc_ann_adult <- fread(file.path(
    scdb_adult_dir, "annotation.Nvec_K30_atlas.tsv"
))
```

# Figure 1

## 2D projection

Adult

```{r}
# single cells
umap_sc_dt <- as.data.table(
    proj_adult@cellColData
)[, .(Cell, UMAP1_Cell, UMAP2_Cell, cell_type)]
setnames(umap_sc_dt, c("Cell", "UMAP1", "UMAP2", "cell_type"))
umap_sc_dt[, cell_type := str_replace_all(cell_type, cell_type_rename)]

# metacells
umap_mc_dt <- as.data.table(
    proj_adult@cellColData
)[, .(SEACell, UMAP1_SEACell, UMAP2_SEACell, cell_type)]
setnames(umap_mc_dt, c("SEACell", "UMAP1", "UMAP2", "cell_type"))
umap_mc_dt[, cell_type := str_replace_all(cell_type, cell_type_rename)]

# overlay plot
umap_sc_dt[, cell_type_sc := paste0(cell_type, "_sc")]
gp_umap <- ggplot(umap_sc_dt, aes(UMAP1, UMAP2)) +
    ggrastr::geom_point_rast(
      aes(color = cell_type_sc),
      size = 1e-3,
    ) +
    ggrastr::geom_point_rast(
      data = umap_mc_dt,
      aes(color = cell_type, fill = cell_type),
      shape = 21, size = 3
    ) +
    scale_fill_manual(values = ct_cols) +
    scale_color_manual(
      values = c(
        structure(
          colorspace::darken(ct_cols, 0.5),
          names = names(ct_cols)
        ),
        structure(
          colorspace::lighten(ct_cols, 0.5),
          names = paste0(names(ct_cols), "_sc")
        )
      )
    ) +
    coord_fixed() +
    guides(
      color = "none",
      fill = guide_legend(override.aes = list(size = 5)),
    ) +
    theme_blank()
ggsave(
    file.path(fig_dir, "fig1_UMAP_adult.pdf"),
    width = 12, height = 6
)
```

Gastrula

```{r}
# single cells
umap_sc_dt <- fread(
    file.path(gastr_dir, "X_umap.cells.csv"),
    header = TRUE
)
setnames(umap_sc_dt, c("Cell", "UMAP1", "UMAP2"))

# metacells
umap_mc_dt <- fread(
    file.path(gastr_dir, "X_umap.seacells.csv"),
    select = 2:4, header = TRUE
)
setnames(umap_mc_dt, c("SEACell", "UMAP1", "UMAP2"))

# mapping to cell types
ann_mc <- fread(file.path(
    gastr_dir, "cellColData.tsv"
))[, .(Cell, SEACell, cell_type)]
ann_mc[, cell_type := str_replace_all(cell_type, "\\.", "_")]
ann_mc[, cell_type := str_replace_all(cell_type, cell_type_rename)]
ann_mc[,.N,cell_type]

# UMAP with annotation
umap_sc_dt <- merge.data.table(umap_sc_dt, ann_mc, by = "Cell", sort = FALSE, all.x = TRUE)
umap_mc_dt <- merge.data.table(umap_mc_dt, ann_mc, by = "SEACell", sort = FALSE, all.x = TRUE)

# overlay plot
umap_sc_dt[, cell_type_sc := paste0(cell_type, "_sc")]
gp_umap <- ggplot(umap_sc_dt, aes(UMAP1, UMAP2)) +
    ggrastr::geom_point_rast(
      aes(color = cell_type_sc),
      size = 1e-3,
    ) +
    ggrastr::geom_point_rast(
      data = umap_mc_dt,
      aes(color = cell_type, fill = cell_type),
      shape = 21, size = 3
    ) +
    scale_fill_manual(values = ct_cols) +
    scale_color_manual(
      values = c(
        structure(
          colorspace::darken(ct_cols, 0.5),
          names = names(ct_cols)
        ),
        structure(
          colorspace::lighten(ct_cols, 0.5),
          names = paste0(names(ct_cols), "_sc")
        )
      )
    ) +
    coord_fixed() +
    guides(
      color = "none",
      fill = guide_legend(override.aes = list(size = 5)),
    )
ggsave(
    file.path(fig_dir, "fig1_umap_gastrula.pdf"),
    width = 8, height = 6
)
```

Adult and gastrula

```{r}
sca_umap_dt <- fread(file.path(
    adult_dir, "Clustering",
    "SEACells_adult_gastrula_UMAP_FC3_gastrula_FC5_adult_qnorm.tsv"
))
sca_umap_dt[, cell_type := str_replace_all(cell_type, cell_type_rename)]

gp_umap <- ggplot(
        sca_umap_dt,
        aes(UMAP1, UMAP2, shape = stage, color = cell_type, fill = cell_type)
    ) +
    geom_point(
        data = sca_umap_dt[stage == "adult"], inherit.aes = TRUE
    ) +
    geom_point(
        data = sca_umap_dt[stage == "gastrula"], inherit.aes = TRUE
    ) +
    scale_fill_manual(
        values = ct_cols
    ) +
    scale_color_manual(
        values = structure(
          colorspace::darken(ct_cols, 0.5),
          names = names(ct_cols)
        )
    ) +
    scale_shape_manual(
        values = c("adult" = 21, "gastrula" = 24)
    ) +
    coord_fixed() +
    guides(
        fill = guide_legend(override.aes = list(size = 5, shape = 21)),
        shape = guide_legend(override.aes = list(size = 5))
    )

ggsave(file.path(
  fig_dir, "UMAP_adult_gastrula.pdf"
), width = 12, height = 6)
```

## Gene scores

### Heatmap

Heatmap of gene scores

```{r}
# metadata
meta_all <- fread(file.path(
  res_dir, "Clustering", "Annotation_Adult_Gastrula_SEACell.tsv"
))
stopifnot(all(meta_all$cell_type %in% cell_types))
meta_all[, cell_type := factor(cell_type, levels = cell_types)]
meta_all[, meta_all := factor(stage, levels = c("adult", "gastrula"))]
setorder(meta_all, cell_type, stage)

# gene scores
gene_sco <- readRDS(file.path(
  adult_dir, "Metacells", "cell_type", "gene_scores_cell_type.rds"
))
colnames(gene_sco) <- str_replace_all(colnames(gene_sco), "\\.", "_")
colnames(gene_sco) <- str_replace_all(colnames(gene_sco), cell_type_rename)

# peaks 
adult_pks <- fread(
  "Results/ArchRProj_Nvec_TSS4_frag200/ArchRProj/Promoters/scATAC_reduced_peaks_cell_type_assignment_filtered.tsv"
)
gastr_pks <- fread(
  "../../../scATAC_nvec_gastrula/clustering/SEACells/Results/ArchRProj_Nvec_gastrula/ArchRProj/Peaks/scATAC_reduced_peaks_cell_type_assignment.tsv"
)
all_pks <- rbindlist(list(adult = adult_pks, gastrula = gastr_pks), use.names = TRUE, idcol = "stage")
all_pks[, cell_type := str_replace_all(cell_type, "\\.", "_")]
all_pks[, cell_type := str_replace_all(cell_type, cell_type_rename)]
num_pks <- all_pks[, .N, .(stage, cell_type)]
num_pks[, cell_type := paste(stage, cell_type, sep = "_")]
num_pks <- num_pks[cell_type %in% colnames(gns_mat)]

# subset genes
adult_ids <- grep("adult", colnames(gene_sco))
gastr_ids <- grep("gastrula", colnames(gene_sco))
feats <- names(which(apply(
    gene_sco, 1, function(x) {
        (max(x[adult_ids]) > 1.5) |
        (max(x[gastr_ids]) > 1.5)
    }
)))
feats <- unique(unlist(lapply(
  colnames(gene_sco), function(x) {
    y <- gene_sco[, x]
    names(y) <- rownames(gene_sco)
    z <- sort(y, decreasing = TRUE)[1:80]
    names(z[z > 1])
  }
)))
gns_mat <- gene_sco[feats, ]

# order cell types
ct_order <- unique(paste(
  as.character(meta_all$stage),
  as.character(meta_all$cell_type),
  sep = "_"
))
all(ct_order %in% colnames(gns_mat))
all(colnames(gns_mat) %in% ct_order)
gns_mat <- gns_mat[, ct_order]

# order genes
gns_mat <- gns_mat[
    order(apply(gns_mat, 1, which.max)),
]

# plot
require(ComplexHeatmap)
gns_mat <- data.matrix(gns_mat)

col_vec_gns <- c("#ffffff", "#fddbc7", "#ef8a62", "#b2182b", "#520c52")
col_vec_gns <- c("#f3f6fa", "#e6eef8", "#43a2ca", "#0868ac", "#014636")
col_fun_gns <- circlize::colorRamp2(
    seq(0, quantile(gns_mat, 0.99), length.out = length(col_vec_gns)),
    col_vec_gns
)

# cell type color annotations
meta_ann <- unique(meta_all[, .(cell_type, stage)])
col_ann <- HeatmapAnnotation(
  which = "column",
  "cell type" = str_remove(colnames(gns_mat), "(adult|gastrula)_"),
  "stage" = str_extract(colnames(gns_mat), "(adult|gastrula)"),
  col = list(
    "cell type" = ct_cols,
    "stage" = c("gastrula" = "#fde7ab", "adult" = "#fdbf6f")
  )
)
row_ann <- HeatmapAnnotation(
  which = "row",
  "cell type" = as.character(
      str_remove(colnames(gns_mat), "(adult|gastrula)_")[
        apply(gns_mat, 1, which.max)
      ]
  ),
  col = list("cell type" = ct_cols),
  show_legend = FALSE
)

# number of peaks annotation
peaks_ann <- HeatmapAnnotation(
  which = "column",
  "num_peaks" = anno_barplot(
    structure(num_pks$N, names = num_pks$cell_type)[colnames(gns_mat)],
    gp = gpar(
      fill = ct_cols[str_remove(colnames(gns_mat), "(adult|gastrula)_")],
      color = "white"
    ),
    bar_width = 1, height = unit(1, "cm")
  ),
  col = list(
    "num_peaks" = ct_cols
  )
)

# gene annotations
gns_an <- merge.data.table(
  data.table(gene = rownames(gns_mat)), gnan[,.SD[1], gene],
  by = "gene", all.x = TRUE, sort = FALSE
)
gns_an[is.na(name), name := ""]
gns_an[is.na(PFAM), PFAM := ""]
gns_an <- merge.data.table(
  gns_an, marks[, 1:2],
  all = TRUE, sort = FALSE
)
gns_an[is.na(name_old), name_old := ""]
```

Save big heatmap for inspection

```{r}
# select genes to show annotation for
mark_id <- which(
  gns_an$gene %in% names(which(rowSums(gene_sco) > 2)) &
  grepl(
    "ion|collagen|GPCR|myos|tryp|dyne|kines|actin|actophorin|kazal|apolipo|ferritin|tubulin|calcium|myotrophin|calmodulin|semaphorin|tetraspanin|trp|synapsin|channel|Pkinase|Notch|Frizzled",
    gns_an$name, ignore.case = TRUE
  ) |
  gns_an$name != "" | 
  gns_an$name_old != ""
  #!gns_an$gene %in% tfan$gene
)
mark_gns <- gns_an[mark_id, ]
mark_gns[name_old == "", name_old := name]
mark_gns[nchar(name_old) > 43, name_old := paste0(substr(name, 1, 40), "...")]
mark_gns[, label := paste(str_remove(gene, "Nvec_(vc1.1_)*"), name_old)]
mark_nm <- mark_gns$label
mark_in <- gns_an[mark_id, ]$gene %in% rownames(gns_mat)
mark_id <- mark_id[mark_in]
mark_nm <- mark_nm[mark_in]
mark_cl <- ct_cols[str_remove(
  colnames(gns_mat)[
    apply(gns_mat[gns_an[mark_id, ]$gene, ], 1, which.max)
  ],
  "(adult|gastrula)_"
)]
gen_ann <- HeatmapAnnotation(
  which = "row",
  gen = anno_mark(
    at = mark_id,
    labels = mark_nm,
    lines_gp = gpar(col = mark_cl),
    labels_gp = gpar(col = mark_cl)
  )
)

# heatmap
hm_gns_fp <- Heatmap(
  gns_mat, name = "gene score",
  col = col_fun_gns, na_col = "#ffffff",
  border = TRUE, use_raster = TRUE,
  cluster_rows = FALSE, cluster_columns = FALSE,
  show_row_dend = FALSE, show_column_dend = FALSE,
  show_row_names = FALSE, show_column_names = FALSE,
  bottom_annotation = col_ann,
  left_annotation = row_ann,
  right_annotation = gen_ann,
  top_annotation = peaks_ann,
  row_title = sprintf("%i marker genes", nrow(gns_mat))
)

pdf(
    file.path(fig_dir, "Adult_gastrula_cell_type_marker_genes.pdf"),
    width = 18, height = 178
)
print(hm_gns_fp)
dev.off()
```

Save small figure

```{r}
# select markers to show annotation for
more_markers <- c(
  "XM_048720966.1", "XM_032384592.2", "XM_048725759.1", "XM_048721538.1", "XM_048730054.1", "XM_032371737.2",
  "XM_032373402.2", "XM_001633779.3", "XM_048720931.1",
  "XM_048727409.1", "XM_032363367.2", "XM_032363460.2",
  "XM_032379674.2", "XM_048730083.1", "XM_001641048.3", "XM_032372059.2",
  "XM_001629965.3", "XM_001622867.3",
  "v1g61545", "XM_032384819.2", "XM_001636908.3", "XM_048722353.1",
  "XM_032385636.2", "XM_001639399.3", "XM_001625630.3", "XM_048723578.1",
  "XM_048727060.1", "XM_001631664.3", "XM_032373970.2",
  "XM_048720311.1", "XM_001633443.3", "XM_032386693.2",
  "XM_001634737.3", "XM_001627964.3", "XM_048733654.1", "XM_048729375.1", "XM_001637804.3",
  "XM_032376121.2", "XM_048728569.1", "XM_001639643.3", "XM_048729232.1", "XM_001627930.3", "XM_032362411.2", "XM_001625243.3",
  "v1g62515"
)
mark_id <- which(
  (gns_an$name_old != "") |
    (grepl(paste(more_markers, collapse = "|"), gns_an$gene))
)
mark_gns <- gns_an[mark_id, ]
mark_gns[, label := name_old]
mark_gns[label == "", label := name]
mark_gns[label == "", label := PFAM]
mark_gns[nchar(label) > 43, label := paste0(substr(label, 1, 40), "...")]
mark_nm <- mark_gns$label
mark_id <- mark_id[!duplicated(mark_nm)]
mark_in <- gns_an[mark_id, ]$gene %in% rownames(gns_mat)
mark_id <- mark_id[mark_in]
mark_nm <- mark_nm[mark_in]
mark_cl <- ct_cols[str_remove(
  colnames(gns_mat)[
    apply(gns_mat[gns_an[mark_id, ]$gene, ], 1, which.max)
  ],
  "(adult|gastrula)_"
)]
gen_ann <- HeatmapAnnotation(
  which = "row",
  gen = anno_mark(
    at = mark_id,
    labels = mark_nm,
    lines_gp = gpar(col = mark_cl),
    labels_gp = gpar(col = mark_cl)
  )
)

hm_gns_fp <- Heatmap(
  gns_mat, name = "gene score",
  col = col_fun_gns, na_col = "#ffffff",
  border = TRUE, use_raster = TRUE,
  cluster_rows = FALSE, cluster_columns = FALSE,
  show_row_dend = FALSE, show_column_dend = FALSE,
  show_row_names = FALSE, show_column_names = FALSE,
  bottom_annotation = col_ann,
  left_annotation = row_ann,
  right_annotation = gen_ann,
  top_annotation = peaks_ann,
  row_title = sprintf("%i marker genes", nrow(gns_mat))
)

pdf(
    file.path(fig_dir, "Adult_gastrula_cell_type_marker_genes_minimal.pdf"),
    width = 14, height = 20
)
print(hm_gns_fp)
dev.off()


```

### Scatterplots

Scatter plots of gene score + gene expression

```{r}
# mapping of cell types
map_dt <- rbindlist(sapply(c("adult", "gastrula"), function(x) {
  fread(file.path(
    res_dir, "Metacells", "cell_type", sprintf(
      "mapping_cell_type_genes_exp_FC2_acc_FC4_spearman_%s.tsv", x
    )
  ))
}, simplify = FALSE, USE.NAMES = TRUE), idcol = "stage")

map_dt[, SEACell_cell_type := str_replace_all(SEACell_cell_type, cell_type_rename)]

# expression data
gene_exp <- readRDS(file.path(
  res_dir, "Metacells", "cell_type", "gene_expression_cell_type_fc.rds"
))

# accessibility data
gene_sco <- readRDS(file.path(
  res_dir, "Metacells", "cell_type", "gene_scores_cell_type.rds"
))
colnames(gene_sco) <- str_replace_all(colnames(gene_sco), "\\.", "_")
colnames(gene_sco) <- str_replace_all(colnames(gene_sco), cell_type_rename)

# mapping and data overlap
map_dt[, SEACell_cell_type := paste(stage, SEACell_cell_type, sep = "_")]
map_dt[, metacell_cell_type := paste(stage, metacell_cell_type, sep = "_")]
stopifnot(all(map_dt$metacell_cell_type %in% colnames(gene_exp)))
stopifnot(all(map_dt$SEACell_cell_type %in% colnames(gene_sco)))

# parse data
exp_dt <- melt.data.table(
  as.data.table(
    gene_exp[, colnames(gene_exp) %in% map_dt$metacell_cell_type],
    keep.rownames = "gene"
  ),
  id.vars = "gene", variable.name = "metacell_cell_type", value.name = "expression"
)
sco_dt <- melt.data.table(
  as.data.table(as.matrix(
    gene_sco[, colnames(gene_sco) %in% map_dt$SEACell_cell_type]
  ), keep.rownames = "gene"),
  id.vars = "gene", variable.name = "SEACell_cell_type", value.name = "accessibility"
)
exp_dt <- merge.data.table(exp_dt, map_dt, by = "metacell_cell_type", allow.cartesian = TRUE)
sco_dt <- merge.data.table(sco_dt, map_dt, by = "SEACell_cell_type", allow.cartesian = TRUE)
all_dt <- merge.data.table(exp_dt, sco_dt, by = c("gene", "metacell_cell_type", "SEACell_cell_type", "stage"))
all_dt[, cell_type := str_remove(SEACell_cell_type, "(adult|gastrula)_")]
```

Plot for a subset of marker genes in the main figure

```{r}
# selected markers
subset_genes <- c(
  "Minicollagen-3/Ncol-3", "Wnt1", "Brachyury",
  "Ptx1", "FGFa1", "Tbx1/10-2",
  "SnailA", "MuscleLIM1.1", "EP2A",
  "NvSoxB(2)", "Prdm14d", "Prdm9-like",
  "Lwamide", "Shak1 ion channel", "Mucin"
)
subset_genes <- gold[match(subset_genes, name)]$gene

# facet names
marks_labeller <- as_labeller(function(g){
  nm <- structure(
    names(marker_genes),
    names = marker_genes
  )[g]
  sprintf("%s\n%s", nm, str_remove(g, "Nvec_vc1.1_"))
})

plot_marks_dt <- all_dt[gene %in% subset_genes]
plot_marks_dt[, gene := factor(gene, levels = subset_genes)]
plot_marks_dt[, label := cell_type]

# plot
gp_marks <- ggplot(
      plot_marks_dt,
      aes(
        expression, accessibility,
        fill = cell_type, color = cell_type,
        shape = stage, label = label
      )
  ) +
  geom_point(size = 1.5) +
  ggrepel::geom_text_repel(size = 2) +
  scale_fill_manual(
      values = ct_cols
  ) +
  scale_color_manual(
      values = structure(
        colorspace::darken(ct_cols, 0.5),
        names = names(ct_cols)
      )
  ) +
  scale_shape_manual(
      values = c("adult" = 21, "gastrula" = 24)
  ) +
  facet_wrap(
    "gene", ncol = 3,
    scales = "free", labeller = marks_labeller
  ) +
  theme(
    strip.text = element_text(size = 8),
    axis.text = element_text(size = 8),
    axis.title = element_text(size = 8),
    legend.position = "none"
  ) +
  guides(
      fill = guide_legend(override.aes = list(size = 5, shape = 21)),
      shape = guide_legend(override.aes = list(size = 5))
  )

ggsave(file.path(
  fig_dir, "fig1_gene_expression_score_scatter.pdf"
), gp_marks, width = 4, height = 7.5)

```

Plot for all other marker genes

```{r}
plot_dt <- all_dt[(gene %in% marker_genes) & !(gene %in% subset_genes)]

lim <- 8
plot_dt[expression > lim, expression := lim]
plot_dt[accessibility > lim, accessibility := lim]
plot_dt[, gene := factor(gene, levels = marker_genes)]
plot_dt[, label := cell_type]

# plot
gp_all <- ggplot(
      plot_dt,
      aes(
        expression, accessibility, label = label,
        fill = cell_type, color = cell_type,
        shape = stage
      )
  ) +
  geom_point(size = 3) +
  ggrepel::geom_text_repel(size = 2) +
  scale_fill_manual(
      values = ct_cols
  ) +
  scale_color_manual(
      values = structure(
        colorspace::darken(ct_cols, 0.5),
        names = names(ct_cols)
      )
  ) +
  scale_shape_manual(
      values = c("adult" = 21, "gastrula" = 24)
  ) +
  facet_wrap("gene", scales = "free", labeller = marks_labeller) +
  theme(
    strip.text = element_text(size = 8),
    axis.text = element_text(size = 8),
    axis.title = element_text(size = 8),
    legend.position = "none"
  )

ggsave(file.path(
  fig_dir, "figS2_gene_expression_score_scatter_all.pdf"
), gp_all, width = 18.2, height = 20)


ggsave(file.path(
  fig_dir, "figS2_gene_expression_score_scatter_precursors.pdf"
), gp_all, width = 4, height = 5)
```



## Coverage tracks

Install cooltools conda enviroment

```{bash}
mamba create -n pygenometracks -c bioconda -c conda-forge python=3.8
mamba activate pygenometracks
mamba install -c conda-forge -c bioconda pygenometracks=3.5
mamba install -c anaconda ipykernel
python -m ipykernel install --user --name=cooltools_env
```

Prepare configuration files to plot coverage tracks

```{bash}
# where to save figures
fig_dir="/home/anamaria/cluster/aelek/proj/scATAC_nvec_v2/Nematostella_scATAC/plots/Figures"

# annotation tracks
gtf_fn="/home/anamaria/cluster/aelek/proj/scATAC_nvec_v2/genome/Nvec_vc1.1_long.annot.gtf"
bed_fn="/home/anamaria/cluster/aelek/proj/scATAC_nvec_v2/genome/Nvec_v4_merged_annotation_sort.bed"
rna_fwd="/home/anamaria/cluster/aelek/proj/RNAseq_nvec/Nvec_adult_polyp_fwd.bw"
rna_rev="/home/anamaria/cluster/aelek/proj/RNAseq_nvec/Nvec_adult_polyp_rev.bw"
rna_bws=$( echo $rna_fwd $rna_rev )
chip_dir="/home/anamaria/cluster/aelek/proj/iChIP_nvec/signal"
chip_bws=$( ls ${chip_dir}/*bw )
make_tracks_file --trackFiles ${gtf_fn} ${bed_fn} ${rna_bws} ${chip_bws} -o ${fig_dir}"/fig1_tracks_annot.ini"

lvl="cell_type"
bws_dir="/home/anamaria/cluster/aelek/proj/scATAC_nvec_v2/scatacseq-pipeline/cell_barcodes/"${lvl}

bws=""
col=""
cts=""
for i in ${!cell_types[@]}
do
    ct=$i
    cl=${cell_types[$i]}
    echo $ct $cl
    bw=$( find "${bws_dir}" -name *${ct}-* )
    bws=$( echo $bws $bw )
    cts=$( echo $cts $ct )
    col=$( echo $col $cl )
done
make_tracks_file --trackFiles ${bws} -o ${fig_dir}"/fig1_tracks_"${lvl}".ini"

```

Using the files above, I will manually assemble the final ini file for the figure (`fig1_tracks_ini`) and then save plots.

Tracks for Figure 1.

```{bash}
conda activate pygenometracks

declare -A marker_regions
marker_regions["GATA"]="NC_064043.1:5890694-5915400"
marker_regions["Elav"]="NC_064034.1:3163000-3178000"
marker_regions["Pou4"]="NC_064043.1:10388438-10402026" # bad H3K4me3
marker_regions["FoxA"]="NC_064035.1:7886656-7907856"
marker_regions["Fgfa1"]="NC_064043.1:7805055-7811856" # bad H3K4me3
marker_regions["GABRA"]="NC_064035.1:11632899-11660053" # bad H3K4me3
marker_regions["NVHD033-ANTP"]="NC_064041.1:14326600-14335300" # could-be-worse H3K4me3
marker_regions["HMGbox_SOX1_2_3_15"]="NC_064042.1:10340550-10350000" 

declare -A marker_genes
marker_genes["GATA"]="Nvec_vc1.1_XM_032367288.2"
marker_genes["Elav"]="Nvec_vc1.1_XM_048724864.1"
marker_genes["Pou4"]="Nvec_vc1.1_XM_032363992.2"
marker_genes["FoxA"]="Nvec_vc1.1_XM_001634505.3"
marker_genes["Fgfa1"]="Nvec_vc1.1_XM_032367336.2"
marker_genes["GABRA"]="Nvec_vc1.1_XM_048723418.1"
marker_genes["NVHD033-ANTP"]="Nvec_vc1.1_XM_032379688.2"
marker_genes["HMGbox_SOX1_2_3_15"]="Nvec_vc1.1_XM_001632947.3"

fig_dir="/home/anamaria/cluster/aelek/proj/scATAC_nvec_v2/Nematostella_scATAC/plots/Figures"

tracks=${fig_dir}"/fig1_tracks.ini"

# loop over two arrays and make plots
for i in ${!marker_genes[@]}
do
    gene=$i
    cord=${marker_regions[$gene]}
    echo
    echo '# # # # # # # # # '$gene : $cord'# # # # # # # # # '
    echo
    plot=${fig_dir}/fig1_pyGenomeTracks_${gene}.svg
    pyGenomeTracks --tracks ${tracks} --region ${cord} --title ${gene} -o ${plot}
done
```

# Figure 2

```{r}
stage <- "adult"
adult_pks_dir <- "~/cluster/aelek/proj/scATAC_nvec_v2/clustering/SEACells/Results/ArchRProj_Nvec_TSS4_frag200/ArchRProj/Promoters"
gastr_pks_dir <- "~/cluster/aelek/proj/scATAC_nvec_gastrula/clustering/SEACells/Results/ArchRProj_Nvec_gastrula/ArchRProj/Peaks"
ap_dir <- switch(
  stage,
  "adult" = adult_pks_dir,
  "gastrula" = gastr_pks_dir,
  NULL
)

# map between abult and gastrula
pks_map <- fread(
  file.path(res_dir, "Peaks", "Peaks_cell_type_mapped.tsv.gz")
)

# colors
prom_cols <- c(
  "YES" = "#4d8cc4",
  "NO"  = "#319854"
)
class_cols <- c(
  "SP" = "#2166ac",
  "CP" = "#053061",
  "AP" = "#4393c3",
  "NO" = "#319854"
)
ovl_cols <- c(
    "promoter"         = "#4393c3",
    "intergenic"       = "#fcec73",
    "5'UTR"            = "#f7fcb9",
    "3'UTR"            = "#d9f0a3",
    "UTR"              = "#d9f0b2",
    "first_intron"     = "#41ab5d",
    "other_introns"    = "#238443",
    "intron"           = "#006837",
    "CDS"              = "#004529",
    "unannotated_gene" = "#7a9695"
)

```

## Peaks classification

Decision tree

```{r}
if (is.null(ap_dir)) {
  stop("Cannot do this jointly!")
} else {
  res_list_filtered <- readRDS(file.path(ap_dir, "annotaton_promoters.RDS"))
}
class_cols <- c(
  "scATAC peaks" = "#7570b3",
  "5' scRNA" = "#e66101",
  "H3K4me3" = "#e6ab02",
  "SP" = "#2166ac",
  "CP" = "#053061",
  "AP" = "#4393c3"
)

gg1 <- res_list_filtered$tree_graph
gg2 <- ggraph(
    res_list_filtered$tbl_graph,
    layout = 'dendrogram',
    circular = FALSE
  ) +
  geom_edge_elbow(
    aes(color=decision)
  ) +
  geom_node_point(
    aes(size = node_N, fill = class),
    color = "black", shape = 21
  ) + 
  scale_size_continuous(range = c(1, 30), guide="none") +
  scale_fill_manual(values = class_cols) +
  scale_edge_colour_manual(values = c("YES" = "#31a354", "NO" = "#d7191c")) +
  geom_node_text(
    aes(label = sprintf("%.0f%%\n(%i)", node_perc*100, node_N)),
    repel = FALSE
  ) +
  geom_node_text(
    aes(label = str_wrap(node, width = 25)), nudge_y = -0.35,
    repel = FALSE
  ) +
  guides(fill = guide_legend(override.aes = list(size=5))) +
  theme_void()

pdf(
  file.path(fig_dir, sprintf("annotaiton_promoters_decison_tree_%s.pdf", stage)),
  width = 18, height = 8
)
gg1; gg2
dev.off()
```

Pie chart of promoters and non-promoters, and promoter classes

```{r}
if (is.null(ap_dir)) {
  all_peaks <- rbindlist(list(
    adult = as.data.table(proj_adult@peakSet)[, peak := paste0("adult_", peak)],
    gastrula = as.data.table(proj_gastr@peakSet)[, peak := paste0("gastrula_", peak)]
  ), fill=TRUE, use.names = TRUE)
  res_list_filtered_adult <- fread(file.path(adult_pks_dir, "annotaton_peaks.tsv.gz"))
  res_list_filtered_gastr <- fread(file.path(adult_pks_dir, "annotaton_peaks.tsv.gz"))
  peaks_annotation <- rbindlist(list(
    res_list_filtered_adult[, peak := paste0("adult_", peak)],
    res_list_filtered_gastr[, peak := paste0("gastrula_", peak)]
  ))
} else {
  pr <- switch(stage, "adult" = proj_adult, "gastrula" = proj_gastr)
  all_peaks <- as.data.table(pr@peakSet)
  peaks_annotation <- fread(file.path(ap_dir, "annotaton_peaks.tsv"))
}

# missing peaks
ms <- all_peaks[!peak %in% peaks_annotation$peak]
ms <- ms[, .(peak)]
ms[, gene := ""][, promoter := "NO"][, cell_types := ""]
length(unique(all_peaks[peak %in% peaks_annotation$peak]$peak))
# joint 106690
# adult 59376
# gastr 40488
length(unique(all_peaks[!peak %in% peaks_annotation$peak]$peak))
# joint 50301
# adult 28413
# gastr 28714
peaks_annotation <- rbindlist(list(
  peaks_annotation, ms
), use.names = TRUE)

# counts
unique(peaks_annotation[,.(peak,promoter)])[,.N,promoter]


pks_map_dt <- merge.data.table(
  pks_map, 
  unique(peaks_annotation[grep("adult", peak), .(peak_adult = peak, promoter_adult = promoter)])[, peak_adult := str_remove(peak_adult, "adult_")], 
  by = "peak_adult", all.x = TRUE, sort = FALSE)
pks_map_dt <- merge.data.table(
  pks_map_dt, 
  unique(peaks_annotation[grep("gastrula", peak), .(peak_gastrula = peak, promoter_gastrula =  promoter)])[, peak_gastrula := str_remove(peak_gastrula, "gastrula_")], 
  by = "peak_gastrula", all.x = TRUE, sort = FALSE)
pks_map_dt[, .N, promoter_adult]



# promoters vs non-promoters
pp <- unique(peaks_annotation[, .(peak, promoter)])
pp[promoter != "NO", promoter := "YES"]
pp[, promoter := factor(promoter, levels = c("YES", "NO"))]
setorder(pp, "peak", "promoter")
pp <- pp[, .SD[1], peak]
pps <- pp[, .N, promoter][,prop := N / sum(N)]
ppp <- ggplot(pps, aes("", N, fill = promoter)) +
  geom_bar(stat="identity", width=1, color="white") +
  coord_polar("y", start=0) +
  scale_fill_manual(values = prom_cols) +
  geom_text(
    aes(label = scales::percent(prop), x = 1.1),
    position = position_stack(vjust = 0.5),
    color = "black"
  ) +
  theme_void() 


# promoter classes
pp <- unique(peaks_annotation[promoter != "NO", .(gene, promoter)])
pp[grep("AP", promoter), promoter := "AP"]
gps <- pp[, .N, promoter][, prop := N / sum(N)]
gps[, promoter := factor(promoter, levels = names(class_cols))]
gpp <- ggplot(gps, aes("", N, fill=promoter)) +
  geom_bar(stat="identity", width=1, color="white") +
  coord_polar("y", start=0) +
  scale_fill_manual(values = class_cols) +
  geom_text(
    aes(label = scales::percent(prop), x = 1.1),
    position = position_stack(vjust = 0.5),
    color = "black"
  ) +
  theme_void() 


ggsave(
  file.path(fig_dir, sprintf("annotaiton_peaks_promoters_pie_%s.pdf", stage)),
  ppp + gpp,
  width = 6, height = 3
)
```

Genomic regions overlap

```{r}
if (is.null(ap_dir)) {
  all_peaks_ovl_adult <- fread(file.path(adult_pks_dir, "annotation_peaks_genomic_overlap.tsv.gz"))
  all_peaks_ovl_gastr <- fread(file.path(gastr_pks_dir, "annotation_peaks_genomic_overlap.tsv.gz"))
  all_peaks_ovl <- rbindlist(list(
    all_peaks_ovl_adult[, peak := paste0("adult_", peak)],
    all_peaks_ovl_gastr[, peak := paste0("gastrula_", peak)]
  ))
  peaks_res_adult <- fread(file.path(adult_pks_dir, "annotaton_promoters_decison_tree.tsv"))
  peaks_res_gastr <- fread(file.path(gastr_pks_dir, "annotaton_promoters_decison_tree.tsv"))
  peaks_res <- rbindlist(list(
    peaks_res_adult[, peak := paste0("adult_", peak)],
    peaks_res_gastr[, peak := paste0("gastrula_", peak)]
  ))
} else {
  all_peaks_ovl <- fread(file.path(ap_dir, "annotation_peaks_genomic_overlap.tsv.gz"))
  peaks_res <- fread(file.path(ap_dir, "annotaton_promoters_decison_tree.tsv"))
}

# plot
gp <- rbindlist(list(
    # annotated promoters
    unique(
        peaks_res[promoter != "NO"][, .SD[1], .(peak)][, .(peak)]
    )[, overlap := "promoter"],
    # non-promoter peaks
    unique(
        copy(all_peaks_ovl)[peak %in% peaks_annotation$peak][
            overlap != "promoter" &
            !peak %in% peaks_annotation[promoter != "NO"]$peak
        ][order(peak_occur)][, .SD[1], peak]
    )[, .(peak, overlap)]
), use.names = TRUE)
gp[, promoter := ifelse(overlap == "promoter", "YES", "NO")]
gp[, overlap := factor(overlap, levels = names(ovl_cols))]

# pie chart
gps <- gp[, .N, overlap][, prop := N / sum(N)]
gpp <- ggplot(gps, aes("", N, fill = overlap)) +
  geom_bar(stat = "identity", color = "white", width = 1) +
  coord_polar("y", start = 0) +
  scale_fill_manual(values = ovl_cols, limits = force) +
  geom_text(
    aes(label = scales::percent(prop, accuracy = 0.1), x=1.2),
    position = position_stack(vjust=0.5),
    color = "black"
  ) +
  theme_void() + theme(legend.title = element_blank())
ggsave(
    file.path(fig_dir, sprintf("annotaiton_overlap_all_peaks_pie_%s.pdf", stage)),
    gpp, width = 4, height = 3
)

# pie chart w/o promoters
gps <- gp[promoter == "NO"][, .N, overlap][, prop := N / sum(N)]
gpp <- ggplot(gps, aes("", N, fill = overlap)) +
  geom_bar(stat = "identity", color = "white", width = 1) +
  coord_polar("y", start = 0) +
  scale_fill_manual(values = ovl_cols, limits = force) +
  geom_text(
    aes(label = scales::percent(prop, accuracy = 0.1), x=1.2),
    position = position_stack(vjust=0.5),
    color = "black"
  ) +
  theme_void() + theme(legend.title = element_blank())
ggsave(
    file.path(fig_dir, sprintf("annotaiton_overlap_all_peaks_pie_wo_proms_%s.pdf", stage)),
    gpp, width = 4, height = 3
)

```

Mouse

```{r}
mmus_dir <- "../../cross_species/mmus/adult/"
# mmus_res <- readRDS(file.path(mmus_dir, "annotation_promoters.RDS"))
mmus_pks <- fread(file.path(mmus_dir, "annotation_peaks.tsv.gz"))[, .(gene, peak, promoter)]

# promoters vs non-promoters
pp <- unique(mmus_pks[, .(peak, promoter)])
pp[promoter != "NO", promoter := "YES"]
pp[, promoter := factor(promoter, levels = c("YES", "NO"))]
setorder(pp, "peak", "promoter")
pp <- pp[, .SD[1], peak]
pps <- pp[, .N, promoter][,prop := N / sum(N)]
ppp <- ggplot(pps, aes("", N, fill = promoter)) +
  geom_bar(stat="identity", width=1, color="white") +
  coord_polar("y", start=0) +
  scale_fill_manual(values = prom_cols) +
  geom_text(
    aes(label = scales::percent(prop), x = 1.1),
    position = position_stack(vjust = 0.5),
    color = "black"
  ) +
  theme_void() 


# promoter classes
pp <- unique(mmus_pks[promoter != "NO", .(gene, promoter)])
pp[grep("AP", promoter), promoter := "AP"]
gps <- pp[, .N, promoter][, prop := N / sum(N)]
gps[, promoter := factor(promoter, levels = names(class_cols))]
gpp <- ggplot(gps, aes("", N, fill=promoter)) +
  geom_bar(stat="identity", width=1, color="white") +
  coord_polar("y", start=0) +
  scale_fill_manual(values = class_cols) +
  geom_text(
    aes(label = scales::percent(prop), x = 1.1),
    position = position_stack(vjust = 0.5),
    color = "black"
  ) +
  theme_void() 


ggsave(
  file.path(fig_dir, "annotaiton_peaks_promoters_pie_mmus.pdf"),
  ppp + gpp,
  width = 6, height = 3
)

# genomic overlap
all_peaks_ovl <- fread(file.path(mmus_dir, "mmus_adult_annotation_peaks_genomic_overlap.tsv.gz"))

# plot
gp <- rbindlist(list(
    # annotated promoters
    unique(
        mmus_pks[promoter != "NO"][, .SD[1], .(peak)][, .(peak)]
    )[, overlap := "promoter"],
    # non-promoter peaks
    unique(
        copy(all_peaks_ovl)[
            overlap != "promoter" &
            !peak %in% mmus_pks[promoter != "NO"]$peak
        ][order(peak_occur)][, .SD[1], peak]
    )[, .(peak, overlap)]
), use.names = TRUE)
gp[, promoter := ifelse(overlap == "promoter", "YES", "NO")]
gp[, overlap := factor(overlap, levels = names(ovl_cols))]

# pie chart
gps <- gp[, .N, overlap][, prop := N / sum(N)]
gpp <- ggplot(gps, aes("", N, fill = overlap)) +
  geom_bar(stat = "identity", color = "white", width = 1) +
  coord_polar("y", start = 0) +
  scale_fill_manual(values = ovl_cols, limits = force) +
  geom_text(
    aes(label = scales::percent(prop, accuracy = 0.1), x=1.2),
    position = position_stack(vjust=0.5),
    color = "black"
  ) +
  theme_void() + theme(legend.title = element_blank())
ggsave(
    file.path(fig_dir, "annotaiton_overlap_all_peaks_pie_mmus.pdf"),
    gpp, width = 4, height = 3
)

# pie chart w/o promoters
gps <- gp[promoter == "NO"][, .N, overlap][, prop := N / sum(N)]
gpp <- ggplot(gps, aes("", N, fill = overlap)) +
  geom_bar(stat = "identity", color = "white", width = 1) +
  coord_polar("y", start = 0) +
  scale_fill_manual(values = ovl_cols, limits = force) +
  geom_text(
    aes(label = scales::percent(prop, accuracy = 0.1), x=1.2),
    position = position_stack(vjust=0.5),
    color = "black"
  ) +
  theme_void() + theme(legend.title = element_blank())
ggsave(
    file.path(fig_dir, "annotaiton_overlap_all_peaks_pie_wo_proms_mmus.pdf"),
    gpp, width = 4, height = 3
)

```

Drosophila

```{r}
dmel_dir <- "../../cross_species/dmel/data/"
# dmel_dir <- readRDS(file.path(dmel_dir, "annotation_promoters.RDS"))
dmel_pks <- fread(file.path(dmel_dir, "annotation_peaks.tsv.gz"))[, .(gene, peak, promoter)]

# promoters vs non-promoters
pp <- unique(dmel_pks[, .(peak, promoter)])
pp[promoter != "NO", promoter := "YES"]
pp[, promoter := factor(promoter, levels = c("YES", "NO"))]
setorder(pp, "peak", "promoter")
pp <- pp[, .SD[1], peak]
pps <- pp[, .N, promoter][,prop := N / sum(N)]
ppp <- ggplot(pps, aes("", N, fill = promoter)) +
  geom_bar(stat="identity", width=1, color="white") +
  coord_polar("y", start=0) +
  scale_fill_manual(values = prom_cols) +
  geom_text(
    aes(label = scales::percent(prop), x = 1.1),
    position = position_stack(vjust = 0.5),
    color = "black"
  ) +
  theme_void() 


# promoter classes
pp <- unique(dmel_pks[promoter != "NO", .(gene, promoter)])
pp[grep("AP", promoter), promoter := "AP"]
gps <- pp[, .N, promoter][, prop := N / sum(N)]
gps[, promoter := factor(promoter, levels = names(class_cols))]
gpp <- ggplot(gps, aes("", N, fill=promoter)) +
  geom_bar(stat="identity", width=1, color="white") +
  coord_polar("y", start=0) +
  scale_fill_manual(values = class_cols) +
  geom_text(
    aes(label = scales::percent(prop), x = 1.1),
    position = position_stack(vjust = 0.5),
    color = "black"
  ) +
  theme_void() 


ggsave(
  file.path(fig_dir, "annotaiton_peaks_promoters_pie_dmel.pdf"),
  ppp + gpp,
  width = 6, height = 3
)

# genomic overlap
all_peaks_ovl <- fread(file.path(dmel_dir, "dmel_adult_annotation_peaks_genomic_overlap.tsv.gz"))

# plot
gp <- rbindlist(list(
    # annotated promoters
    unique(
        dmel_pks[promoter != "NO"][, .SD[1], .(peak)][, .(peak)]
    )[, overlap := "promoter"],
    # non-promoter peaks
    unique(
        copy(all_peaks_ovl)[
            overlap != "promoter" &
            !peak %in% dmel_pks[promoter != "NO"]$peak
        ][order(peak_occur)][, .SD[1], peak]
    )[, .(peak, overlap)]
), use.names = TRUE)
gp[, promoter := ifelse(overlap == "promoter", "YES", "NO")]
gp[, overlap := factor(overlap, levels = names(ovl_cols))]

# pie chart
gps <- gp[, .N, overlap][, prop := N / sum(N)]
gpp <- ggplot(gps, aes("", N, fill = overlap)) +
  geom_bar(stat = "identity", color = "white", width = 1) +
  coord_polar("y", start = 0) +
  scale_fill_manual(values = ovl_cols, limits = force) +
  geom_text(
    aes(label = scales::percent(prop, accuracy = 0.1), x=1.2),
    position = position_stack(vjust=0.5),
    color = "black"
  ) +
  theme_void() + theme(legend.title = element_blank())
ggsave(
    file.path(fig_dir, "annotaiton_overlap_all_peaks_pie_dmel.pdf"),
    gpp, width = 4, height = 3
)

# pie chart w/o promoters
gps <- gp[promoter == "NO"][, .N, overlap][, prop := N / sum(N)]
gpp <- ggplot(gps, aes("", N, fill = overlap)) +
  geom_bar(stat = "identity", color = "white", width = 1) +
  coord_polar("y", start = 0) +
  scale_fill_manual(values = ovl_cols, limits = force) +
  geom_text(
    aes(label = scales::percent(prop, accuracy = 0.1), x=1.2),
    position = position_stack(vjust=0.5),
    color = "black"
  ) +
  theme_void() + theme(legend.title = element_blank())
ggsave(
    file.path(fig_dir, "annotaiton_overlap_all_peaks_pie_wo_proms_dmel.pdf"),
    gpp, width = 4, height = 3
)

```

## Peaks stats

```{r}
# peak classification data
if (is.null(ap_dir)) {
  class_peaks_adult <- fread(file.path(adult_pks_dir, "annotation_promoters_full.tsv"))
  setnames(class_peaks_adult, "peak", "peak_adult")
  class_peaks_adult <- merge.data.table(
    class_peaks_adult,
    unique(pks_map[, .(peak, peak_adult)][peak_adult != ""]),
    by = "peak_adult", all.x = TRUE
  )
  class_peaks_adult[, peak_adult := NULL]
  class_peaks_gastr <- fread(file.path(gastr_pks_dir, "annotation_promoters_full.tsv"))
  setnames(class_peaks_gastr, "peak", "peak_gastrula")
  class_peaks_gastr <- merge.data.table(
    class_peaks_gastr,
    unique(pks_map[, .(peak, peak_gastrula)][peak_gastrula != ""]),
    by = "peak_gastrula", all.x = TRUE
  )
  class_peaks_gastr[, peak_gastrula := NULL]
  class_peaks <- rbindlist(list(
    gastrula = class_peaks_gastr, adult = class_peaks_adult
  ), use.names = TRUE, idcol = "stage")
} else {
  class_peaks <- fread(file.path(ap_dir, "annotation_promoters_full.tsv"))[, stage := stage]
}
class_peaks[grepl("AP", promoter), promoter := "AP"]
class_peaks[, cell_type := str_replace_all(cell_type, "\\.", "_")]
class_peaks[, cell_type := str_replace_all(cell_type, cell_type_rename)]
class_peaks[, cell_type := factor(cell_type, levels = all_cell_types)]
class_cols <- c(
  "CP" = "#053061",
  "SP" = "#2166ac",
  "AP" = "#4393c3",
  "NO" = "#319854"
)

# type of promoter per gene
pro_dt <- unique(class_peaks[promoter != "NO", .(gene, stage, promoter)])
setnames(pro_dt, "promoter", "gene_promoter")
```

### Number of peaks

#### Promoter type

Number of peaks per promoter type, globally.

```{r}
dt_pks <- merge.data.table(class_peaks, pro_dt, by = c("gene", "stage"))
dt_pks <- unique(dt_pks[, .(gene, stage, peak, promoter, gene_promoter)])
dt_pks[, gene_promoter := factor(gene_promoter, levels = names(class_cols))]
dt_pks <- dt_pks[gene_promoter != "AP"]
dt_gp_all <- dt_pks[, .N, .(gene, gene_promoter, stage)]
gp_pks_all <- ggplot(dt_gp_all, aes(
    x = gene_promoter, y = N,
    fill = gene_promoter, color = gene_promoter
  )) +
  geom_boxplot(outlier.shape = 21) +
  scale_fill_manual(values = class_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = names(class_cols)
  )) +
  scale_y_continuous(
    #limits = c(0, quantile(dt_gp_all$N, 0.99)),
    trans = "log10",
    oob = scales::squish
  ) +
  theme(legend.position = "none") +
  labs(
    y = "peaks",
    x = ""
  )
dt_gp_nop <- dt_pks[promoter == "NO"][, .N, .(gene, gene_promoter, stage)]
gp_pks_nop <- ggplot(dt_gp_nop, aes(
    x = gene_promoter, y = N,
    fill = gene_promoter, color = gene_promoter
  )) +
  geom_boxplot(outlier.shape = 21) +
  scale_fill_manual(values = class_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = names(class_cols)
  )) +
  scale_y_continuous(
    #limits = c(0, quantile(dt_gp_nop$N, 0.99)),
    trans = "log10",
    oob = scales::squish
  ) +
  theme(legend.position = "none") +
  labs(
    y = "non-promoter peaks",
    x = ""
  )
gp_pks <- gp_pks_all + gp_pks_nop
ggsave(
    file.path(fig_dir, sprintf("peaks_num_%s.pdf", stage)),
    gp_pks, width = 3, height = 2.5
)
```

Number of peaks per promoter type, per cell type.

```{r}
dt_pks <- merge.data.table(class_peaks, pro_dt, by = c("gene", "stage"))
dt_pks <- unique(dt_pks[, .(gene, peak, promoter, gene_promoter, cell_type, stage)])
dt_pks[, gene_promoter := factor(gene_promoter, levels = names(class_cols))]
dt_gp_all <- dt_pks[, .N, .(gene, gene_promoter, cell_type, stage)]
dt_gp_all <- dt_gp_all[gene_promoter != "AP"]
gp_pks_all <- ggplot(dt_gp_all, aes(
    x = cell_type, y = N,
    fill = gene_promoter, color = gene_promoter
  )) +
  geom_boxplot(outlier.shape = 21) +
  scale_fill_manual(values = class_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = names(class_cols)
  )) +
  scale_y_continuous(
    trans = "log2",
    oob = scales::squish
  ) +
  theme(
    legend.position = "none",
    axis.text.x = element_blank(), axis.ticks.x = element_blank()
  ) +
  labs(
    y = "peaks",
    x = ""
  )
dt_gp_nop <- dt_pks[promoter == "NO"][, .N, .(gene, gene_promoter, cell_type, stage)]
gp_pks_nop <- ggplot(dt_gp_nop, aes(
    x = cell_type, y = N,
    fill = gene_promoter, color = gene_promoter
  )) +
  geom_boxplot(outlier.shape = 21) +
  scale_fill_manual(values = class_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = names(class_cols)
  )) +
  scale_y_continuous(
    trans = "log2",
    oob = scales::squish
  ) +
  theme(
    legend.position = "none",
    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)
  ) +
  labs(
    y = "non-promoter\npeaks",
    x = ""
  )
gp_pks <- gp_pks_all / gp_pks_nop
ggsave(
    file.path(fig_dir, sprintf("peaks_num_per_cell_type_%s.pdf", stage)),
    gp_pks, width = 6, height = 5.5
)
```

#### Gene class

Number of peaks per promoter type, per gene class.

```{r}
# gene lists
gl_fns <- list.files(
  ann_dir, pattern = ".*Nvec_genes.curated_DToL_names.tsv", full.names = TRUE
)
names(gl_fns) <- str_remove(basename(gl_fns), "\\.Nvec_genes.curated_DToL_names.tsv")
gl_dt <- rbindlist(sapply(names(gl_fns), function(x) {
  fread(gl_fns[x], header = TRUE)
}, simplify = FALSE, USE.NAMES = TRUE), idcol = "genelist")
gl_dt <- unique(gl_dt[, .(genelist, gene)])
gl_dt <- gl_dt[!genelist %in% c("neu")]

# supplement with go
go_annotations <- readRDS(file.path(ann_dir, "Nvec_ensembl.GO.rds"))
go_map_dt <- data.table(
    gene = rep(names(go_annotations), sapply(go_annotations, length)),
    category = unlist(go_annotations)
)
selected_gos <- list(
  ion = c(
    "intracellular calcium ion homeostasis" = "GO:0055074",
    "monoatomic ion transport" = "GO:0006811",
    "bicarbonate transport" = "GO:0015701"
  ),
  cal = c(
    "metabolic process" = "GO:0008152",
    "catalytic activity" = "GO:0003824",
    "lyase activity" = "GO:0016829"
  )
)
gl_add <- rbindlist(sapply(names(selected_gos), function(x) {
  unique(go_map_dt[category %in% selected_gos[[x]]])
}, simplify = FALSE, USE.NAMES = TRUE), idcol = "genelist")
gl_dt <- rbindlist(list(gl_dt, gl_add), fill = TRUE)

# add full names
gl_full_names <- c(
  "cal" = "metabolism",
  "ion" = "ion transport",
  "adh" = "adhesion",
  "sig" = "signaling",
  "tfs" = "TFs",
  "chr" = "chromatin",
  "rbp" = "RNA BPs"
)
gl_dt[, genelist_full := gl_full_names[genelist]]
gl_dt[, genelist_full := factor(genelist_full, levels = gl_full_names)]

# fraction of genes with each promoter class
gn_pt <- unique(pro_dt[, .(gene, gene_promoter)])
gl_dt_1 <- merge.data.table(gl_dt, gn_pt, by = "gene", sort = FALSE)
gl_dt_1 <- gl_dt_1[!grepl("AP", gene_promoter)]
gl_dt_1[, gene_promoter_2 := paste0(gene_promoter, "2")]

new_lvl <- gl_dt_1[, .N, .(genelist_full, gene_promoter)][
  , frac := N/sum(N), genelist_full][
    gene_promoter=="SP"][
      order(-frac)]$genelist_full
gl_dt_1[, genelist_full := factor(genelist_full, levels = new_lvl)]
gl_dt[, genelist_full := factor(genelist_full, levels = new_lvl)]

gl_gp_1 <- ggplot(gl_dt_1, aes(genelist_full, fill = gene_promoter, color = gene_promoter_2)) +
  geom_bar(position = "fill") +
  scale_y_continuous(expand = c(0, 0), breaks = c(0, 1)) +
  scale_fill_manual(values = class_cols) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = paste0(names(class_cols), "2")
  ), guide = "none") +
  labs(y = "fraction\nof genes") +
  theme(
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.title.x = element_blank(),
    panel.border = element_blank()
  )

# number of non-promoter peaks
nm_np <- unique(class_peaks[gene %in% gl_dt$gene & promoter == "NO"][, .(gene, peak)][, .(num_non_prom = .N), gene])
gl_dt_2 <- merge.data.table(gl_dt, nm_np, by = "gene", sort = FALSE)

require(ggpubr)
gl_gp_2 <- ggplot(gl_dt_2, aes(genelist_full, num_non_prom)) +
  geom_boxplot(fill = "#319854", color = colorspace::darken("#319854", 0.5), outlier.shape = 21) +
  scale_y_continuous(
    limits = c(0, quantile(gl_dt_2$num_non_prom, 0.99)),
    oob = scales::squish,
    expand = expansion(c(0.05, 0.1))
  ) +
  #geom_hline(yintercept = mean(gl_dt_2$num_non_prom), linetype = 2) +
  #stat_compare_means(comparisons = list(c("chromatin", "metabolism")), label = "p.signif", method = "t.test") +
  stat_compare_means(
    label = "p.signif", hide.ns = TRUE,
    method = "t.test", method.args = list(alternative = "greater"),
    ref.group = ".all."
  ) +
  labs(y = "enhancers\nper gene") +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    axis.title.x = element_blank(),
  )
# save plot
gl_gp <- gl_gp_1 / gl_gp_2 + plot_layout(heights = c(1, 1), guides = "collect")
ggsave(
    file.path(fig_dir, sprintf("peaks_num_per_gene_list.pdf")),
    gl_gp, width = 5.5, height = 5
)

```

#### Cell type

```{r}
mcfp_thrs <- 2
gl_dt <- unique(class_peaks[mcfp > mcfp_thrs][, .(gene, peak, cell_type, promoter, stage)])
gn_pt <- unique(pro_dt[, .(gene, gene_promoter, stage)])
gl_dt <- merge.data.table(gl_dt, gn_pt, by = c("gene", "stage"))
gl_dt[, cell_type := factor(cell_type, levels = all_cell_types)]

# fraction of genes with each promoter class
gl_dt_1 <- unique(gl_dt[!grepl("AP", gene_promoter)])
gl_dt_1[, gene_promoter_2 := paste0(gene_promoter, "2")]
gl_gp_1 <- ggplot(gl_dt_1, aes(cell_type, fill = gene_promoter, color = gene_promoter_2)) +
  geom_bar(position = "fill") +
  scale_y_continuous(expand = c(0, 0), breaks = c(0, 1)) +
  scale_fill_manual(values = class_cols) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = paste0(names(class_cols), "2")
  ), guide = "none") +
  labs(y = "fraction\nof genes") +
  theme(
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.title.x = element_blank(),
    panel.border = element_blank()
  )

# number of non-promoter peaks
nm_np <- unique(class_peaks[mcfp > mcfp_thrs & promoter == "NO"][, .(gene, peak)][, .(num_non_prom = .N), gene])
gl_dt_2 <- merge.data.table(gl_dt, nm_np, by = "gene", sort = FALSE)

require(ggpubr)
gl_gp_2 <- ggplot(gl_dt_2, aes(cell_type, num_non_prom)) +
  geom_boxplot(fill = "#319854", color = colorspace::darken("#319854", 0.5), outlier.shape = 21) +
  scale_y_continuous(
    #limits = c(0, quantile(gl_dt_2$num_non_prom, 0.999)),
    limits = c(0, 125),
    breaks = c(0, 40, 80, 120),
    oob = scales::squish,
    expand = expansion(c(0.05, 0.1))
  ) +
  #geom_hline(yintercept = mean(gl_dt_2$num_non_prom), linetype = 2) +
  #stat_compare_means(comparisons = list(c("chromatin", "metabolism")), label = "p.signif", method = "t.test") +
  stat_compare_means(
    label = "p.signif", hide.ns = TRUE,
    method = "t.test", method.args = list(alternative = "greater"),
    ref.group = ".all."
  ) +
  labs(y = "enhancers\nper gene") +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    axis.title.x = element_blank(),
  )

# save plot
gl_gp <- gl_gp_1 / gl_gp_2 + plot_layout(heights = c(1, 1), guides = "collect")
ggsave(
    file.path(fig_dir, sprintf("peaks_num_per_cell_type_fc%s.pdf", mcfp_thrs)),
    gl_gp, width = 7.5, height = 5.5
)

```

### Pleiotropy per cell type

N cell types with expression FC > X (or Tau score) vs N CREs (boxplots).

```{r}
# number of cell types where gene is expressed
fcthr <- 1.2
exp_dt <- unique(class_peaks[mcfp > fcthr][, .(gene, cell_type, stage, umifrac, mcfp)])
exp_dt[, n_cell_types := .N, gene]

# tau index
exp_dt[, x := log2(umifrac+1)]
exp_dt[, tau := (sum(1 - x/max(x)) / (n_cell_types - 1)), gene]
exp_dt[, x := NULL]

# number of regulatory elements in cell type
pks_dt <- unique(class_peaks[, .(gene, peak, cell_type, stage, promoter)])
pks_dt[, n_peaks_per_gene_per_cell_type := length(unique(.SD$peak)), .(gene, cell_type, stage)]
pks_dt[, n_peaks_per_gene_all_cell_type := length(unique(.SD$peak)), .(gene)]

# combine
cre_dt <- merge.data.table(exp_dt, pks_dt, by = c("gene", "cell_type", "stage"), sort = FALSE)
cre_dt <- merge.data.table(cre_dt, pro_dt, by = c("gene", "stage"), sort = FALSE)
cre_dt[grepl("AP", gene_promoter), gene_promoter := "AP"]
cre_dt <- cre_dt[gene_promoter != "AP"]
cre_dt[, n_cell_types := factor(n_cell_types, levels = sort(unique(cre_dt$n_cell_types)))]
cre_dt[, gene_promoter := factor(gene_promoter, levels = names(class_cols))]

# save for marta
candidates <- cre_dt[gene_promoter == "CP"]
candidates <- unique(candidates[, .(gene, peak, promoter, cell_type, stage, umifrac, mcfp, n_cell_types)])
fwrite(candidates, file.path(fig_dir, "candidates.tsv"), sep = "\t")

# plot peaks per gene
gp_1 <- ggplot(cre_dt, aes(
    x = n_cell_types, y = n_peaks_per_gene_all_cell_type,
  )) +
  geom_boxplot(fill = "#4d8cc4", color = colorspace::darken("#4d8cc4", 0.5), outlier.shape = 21) +
  scale_y_continuous(
    limits = c(0, quantile(cre_dt$n_peaks_per_gene_all_cell_type, 0.99)),
    oob = scales::squish
  ) +
  labs(y = "peaks\nper gene", x = "")

gp_1_ct <- ggplot(cre_dt, aes(
    x = n_cell_types, y = n_peaks_per_gene_all_cell_type,
    fill = gene_promoter, color = gene_promoter
  )) +
  geom_boxplot(position = position_dodge2(preserve = "single"), outlier.shape = 21) +
  scale_fill_manual(values = class_cols) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = names(class_cols)
  )) +
  scale_y_continuous(
    limits = c(0, quantile(cre_dt$n_peaks_per_gene_all_cell_type, 0.99)),
    oob = scales::squish
  ) +
  theme(axis.title = element_blank(), legend.position = "none")

# plot peaks per gene in cell type
gp_2 <- ggplot(cre_dt, aes(
    x = n_cell_types, y = n_peaks_per_gene_per_cell_type
  )) +
  geom_boxplot(fill = "#4d8cc4", color = colorspace::darken("#4d8cc4", 0.5), outlier.shape = 21) +
  scale_y_continuous(
    limits = c(0, quantile(cre_dt$n_peaks_per_gene_per_cell_type, 0.99)),
    oob = scales::squish
  ) +
  labs(
    y = "peaks per gene\nin cell type",
    x = ""
  )

gp_2_ct <- ggplot(cre_dt, aes(
    x = n_cell_types, y = n_peaks_per_gene_per_cell_type,
    fill = gene_promoter, color = gene_promoter
  )) +
  geom_boxplot(position = position_dodge2(preserve = "single"), outlier.shape = 21) +
  scale_fill_manual(values = class_cols) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = names(class_cols)
  )) +
  scale_y_continuous(
    limits = c(0, quantile(cre_dt$n_peaks_per_gene_per_cell_type, 0.99)),
    oob = scales::squish
  ) +
  theme(axis.title = element_blank(), legend.position = "none")

# plot number of genes
dt_3 <- unique(cre_dt[, .(gene, n_cell_types, gene_promoter)])
gp_3 <- ggplot(dt_3, aes(x = n_cell_types)) +
  geom_bar(fill = "#4d8cc4", color = colorspace::darken("#4d8cc4", 0.5)) +
  scale_y_continuous(
    expand =  expansion(mult = c(0, 0.1))
  ) +
  labs(
    y = "genes",
    x = sprintf("nuber of broad cell types\n(expression FC > %s)", fcthr)
  )

gp_3_ct <- ggplot(dt_3, aes(
    x = n_cell_types, fill = gene_promoter, color = gene_promoter
  )) +
  geom_bar(position = position_dodge2(preserve = "single")) +
  scale_fill_manual(values = class_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = names(class_cols)
  )) +
  scale_y_continuous(
    expand =  expansion(mult = c(0, 0.1))
  ) +
  theme(axis.title.y = element_blank(), legend.position = "none") +
  labs(x = sprintf("nuber of broad cell types\n(expression FC > %s)", fcthr))

gp_st <- (gp_1 + gp_1_ct) / (gp_2 + gp_2_ct) / (gp_3 + gp_3_ct)

ggsave(
    file.path(fig_dir, sprintf("peaks_num_gene_expression_fc%s_stats_%s.pdf", fcthr, stage)),
    gp_st, width = 6, height = 6.5
)

# # plot tau index
# gp_3 <- ggplot(cre_dt, aes(x = tau, y = n_peaks)) +
#   geom_point() +
#   facet_grid(. ~ gene_promoter)
# ggsave(
#     file.path(fig_dir, "peaks_num_gene_expression_tau.pdf"),
#     gp_3, width = 8, height = 4
# )

```

How many cell types SP and ehancers of CP are used in?

```{r}
class_pro_dt <- merge.data.table(class_peaks, pro_dt, by = c("gene", "stage"))
cp_dist <- unique(class_pro_dt[gene_promoter == "CP" & promoter == "NO"][, .(peak, cell_type)])
cp_dist[, num_cts := length(unique(.SD$cell_type)), .(peak)]
cph <- ggplot(cp_dist, aes(num_cts)) + 
  geom_bar(fill = class_cols["CP"], color = colorspace::darken(class_cols["CP"], 0.5)) + 
  scale_y_continuous(
    limits = c(0, quantile(cp_dist$num_pks, 0.99)), oob = squish,
    expand = expansion(mult = c(0, 0.05))
  ) +
  scale_x_continuous(
    expand = expansion(mult = c(0, 0.01)),
    limits = c(NA, NA), breaks = seq(1, 17, 1)
  ) +
  labs(y = "enh.", x = "number of broad cell types") 

sp_dist <- unique(class_peaks[promoter == "SP"][, .(peak, cell_type)])[, .N, peak]
sph <- ggplot(sp_dist, aes(N)) + 
  geom_bar(fill = class_cols["SP"], color = colorspace::darken(class_cols["SP"], 0.5)) + 
  scale_y_continuous(
    expand = expansion(mult = c(0, 0.05)),
    breaks = seq(0, 6e3, 2e3)
  ) +
  scale_x_continuous(
    expand = expansion(mult = c(0.01, 0.01)),
    limits = c(NA, 17), breaks = seq(1, 17, 1)
  ) +
  labs(y = "SP", x = "number of broad cell types") 

ggsave(
  file.path(fig_dir, sprintf("peaks_promoters_cp_sp_num_cell_types_%s.pdf", stage)),
  cph / sph, 
  width = 5, height = 3.5
)
```

How many cell types genes with SP and CP are expressed in?

```{r}
sp_dist <- unique(class_peaks[promoter %in% c("SP", "CP")][, .(gene, promoter, peak, cell_type, mcfp, umifrac, stage)])
sp_dist <- unique(sp_dist[mcfp > 0.9][, .(gene, cell_type, promoter, stage)])[, .N, .(gene, promoter)]
sph <- ggplot(sp_dist, aes(N, color = promoter, fill = promoter)) + 
  geom_bar() + 
  scale_y_continuous(
    expand = expansion(mult = c(0, 0.05))
    #breaks = seq(0, 6e3, 2e3)
  ) +
  scale_x_continuous(
    expand = expansion(mult = c(0.01, 0.01)),
    breaks = seq(1, 20, 1)
  ) +
  scale_color_manual(values = colorspace::darken(class_cols, 0.5)) +
  scale_fill_manual(values = class_cols) +
  facet_grid(promoter ~ .) +
  labs(y = "genes", x = "number of broad cell types") +
  theme(legend.position = "none")
ggsave(
  file.path(fig_dir, sprintf("peaks_expressed_cp_sp_num_cell_types_%s.pdf", stage)),
  sph, 
  width = 5, height = 3
)
```

Genes with CP, in how many cell types they have enhancers?

```{r}
cp_dist <- merge.data.table(class_peaks, pro_dt, by = c("gene", "stage"), sort = FALSE)
cp_dist <- cp_dist[gene_promoter %in% c("CP", "SP")][promoter != c("CP", "SP")]
cp_dist <- unique(cp_dist[, .(gene, gene_promoter, peak, cell_type, stage)])
cp_dist[, peaks_in_cell_types := length(unique(.SD$cell_type)), .(gene, gene_promoter)]
cp_dist[, peaks_per_gene := length(unique(.SD$peak)), .(gene, gene_promoter)]
cph <- ggplot(cp_dist, aes(peaks_in_cell_types, peaks_per_gene, group = peaks_in_cell_types)) + 
  geom_boxplot(fill = class_cols["SP"], color = colorspace::darken(class_cols["CP"], 0.5), outlier.shape = 21) + 
  scale_y_continuous(
    limits = c(NA, quantile(cp_dist$peaks_per_gene, 0.99)), oob = squish,
    expand = expansion(mult = c(0.05, 0.05))
    #breaks = seq(0, 6e3, 2e3)
  ) +
  scale_x_continuous(
    expand = expansion(mult = c(0.01, 0.01)),
    breaks = seq(1, 20, 1)
  ) +
  facet_grid(gene_promoter ~ .) +
  labs(y = "enhancers per\ngene", x = "number of broad cell types") 
ggsave(
  file.path(fig_dir, sprintf("peaks_enhancers_cp_sp_num_cell_types_%s.pdf", stage)),
  cph, 
  width = 5, height = 3
)
```

### Genes variability

sz_cor for SP vs CP genes

```{r}
gstat <- switch(
  stage,
  "adult" = gstat_adult,
  "gastrula" = gstat_gastr
)
if (stage == "joint") {
  gstat <- rbindlist(list(
    adult = gstat_adult, gastrua = gstat_gastr
  ))
}

gstat_pro <- merge.data.table(pro_dt, gstat, by = c("gene", "stage"), all.x = TRUE)
gstat_pro <- merge.data.table(
  gstat_pro,
  unique(class_peaks[, .(gene, cell_type, stage, umifrac, mcfp)]),
  by = c("gene", "stage")
)
gstat_pro[, gene_promoter_2 := paste0(gene_promoter, "2")]
gstat_pro[, gene_promoter := factor(gene_promoter, levels = c("CP", "SP", "AP"))]
# gstat_pro <- gstat_pro[gene_promoter != "AP"]

# szcor globally
gp_szcor <- ggplot(gstat_pro, aes(umifrac, sz_cor)) +
  ggrastr::geom_point_rast(aes(color = gene_promoter_2, shape = stage), size = 0.25, alpha = 0.7) +
  geom_density_2d(aes(color = gene_promoter)) +
  scale_x_continuous(
    trans = "log10",
    oob = scales::squish
  ) +
  scale_shape_manual(values = c("adult" = 16, "gastrula" = 17)) +
  facet_grid(gene_promoter ~ stage) +
  scale_color_manual(values = c(
    class_cols,
    structure(
      colorspace::lighten(class_cols, 0.6),
      names = paste0(names(class_cols), "2")
    )
  )) +
  theme(legend.position = "none")

ggsave(
    file.path(fig_dir, sprintf("peaks_class_gene_szcor_%s.pdf", stage)),
    gp_szcor, width = 6, height = 6.5
)

gp_szcor_box_1 <- ggplot(gstat_pro, aes(stage, sz_cor_norm)) +
  geom_boxplot(aes(color = gene_promoter_2, fill = gene_promoter), outlier.shape = NA) +
  scale_fill_manual(values = class_cols) +
  scale_y_continuous(
    limits = c(-0.1, 0.1),
    oob = scales::squish,
    expand = c(0.01, 0.01)
  ) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = paste0(names(class_cols), "2")
  )) +
  theme(legend.position = "none")
gp_szcor_box_2 <- ggplot(gstat_pro, aes(gene_promoter, sz_cor_norm)) +
  geom_boxplot(aes(color = gene_promoter_2, fill = gene_promoter), outlier.shape = NA) +
  scale_fill_manual(values = class_cols) +
  scale_y_continuous(
    limits = c(-0.07, 0.07),
    oob = scales::squish,
    expand = c(0.01, 0.01)
  ) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = paste0(names(class_cols), "2")
  )) +
  theme(legend.position = "none")
gp_szcor_box <- gp_szcor_box_1 + gp_szcor_box_2 + plot_layout(widths = c(2, 1))

ggsave(
    file.path(fig_dir, sprintf("peaks_class_gene_szcor_nom_box_%s.pdf", stage)),
    gp_szcor_box, width = 4.5, height = 2.5
)


# szcor per cell type
gp_szcor_ct <- ggplot(gstat_pro, aes(umifrac, sz_cor)) +
  ggrastr::geom_point_rast(aes(color = gene_promoter_2, shape = stage), size = 0.25, alpha = 0.7) +
  geom_density_2d(aes(color = gene_promoter)) +
  scale_shape_manual(values = c("adult" = 16, "gastrula" = 17)) +
  scale_x_continuous(
    trans = "log10",
    oob = scales::squish
  ) +
  facet_grid(cell_type ~ gene_promoter) +
  scale_color_manual(values = c(
    class_cols,
    structure(
      colorspace::lighten(class_cols, 0.6),
      names = paste0(names(class_cols), "2")
    )
  )) +
  theme(legend.position = "none")

ggsave(
    file.path(fig_dir, sprintf("peaks_class_gene_szcor_per_cell_type_%s.pdf", stage)),
    gp_szcor_ct, width = 12, height = 24
)


gp_szcor_ct_box <- ggplot(gstat_pro, aes(cell_type, sz_cor)) +
  geom_boxplot(aes(color = gene_promoter_2, fill = gene_promoter), outlier.shape = NA) +
  scale_fill_manual(values = class_cols) +
  scale_y_continuous(
    limits = c(NA, NA), oob = scales::squish, expand = c(0.01, 0.01)
  ) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = paste0(names(class_cols), "2")
  )) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    legend.position = "none"
  )

ggsave(
    file.path(fig_dir, sprintf("peaks_class_gene_szcor_per_cell_type_box_%s.pdf", stage)),
    gp_szcor_ct_box, width = 12, height = 6
)

# metacell level variability
var_dt <- rbindlist(list(
  adult = data.table(var_mc = apply(mc_adult@mc_fp, 1, var), gene = rownames(mc_adult@mc_fp)),
  gastrula = data.table(var_mc = apply(mc_gastr@mc_fp, 1, var), gene = rownames(mc_gastr@mc_fp))
), idcol = "stage")
gstat_vardt <- merge.data.table(
  gstat_pro, var_dt, by = c("gene", "stage"), all = FALSE, sort = FALSE
)

gp_mcvar_box <- ggplot(gstat_vardt, aes(gene_promoter, var_mc)) +
  geom_boxplot(aes(color = gene_promoter_2, fill = gene_promoter), outlier.shape = NA) +
  scale_fill_manual(values = class_cols) +
  scale_y_continuous(
    limits = c(NA, quantile(gstat_vardt$var_mc, 0.9, na.rm=TRUE)),
    oob = scales::squish,
    expand = c(0.01, 0.01)
  ) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = paste0(names(class_cols), "2")
  )) +
  theme(legend.position = "none")

ggsave(
    file.path(fig_dir, sprintf("peaks_class_gene_var_mc_box_%s.pdf", stage)),
    gp_mcvar_box, width = 2, height = 2.5
)

```

### Peaks variability

```{r}
if (!is.null(ap_dir)) {

  stats_peaks <- fread(file.path(ap_dir, "scATAC_reduced_peaks_gene_scores_table.tsv.gz"))[, stage := stage]

} else {

  stats_peaks_adult <- fread(file.path(adult_pks_dir, "scATAC_reduced_peaks_gene_scores_table.tsv.gz"))
  setnames(stats_peaks_adult, "peak", "peak_adult")
  stats_peaks_adult <- merge.data.table(
    stats_peaks_adult,
    unique(pks_map[, .(peak, peak_adult)][peak_adult != ""]),
    by = "peak_adult", all.x = TRUE
  )
  stats_peaks_adult[, peak_adult := NULL]
  stats_peaks_gastr <- fread(file.path(gastr_pks_dir, "scATAC_reduced_peaks_gene_scores_table.tsv.gz"))
  setnames(stats_peaks_gastr, "peak", "peak_gastrula")
  stats_peaks_gastr <- merge.data.table(
    stats_peaks_gastr,
    unique(pks_map[, .(peak, peak_gastrula)][peak_gastrula != ""]),
    by = "peak_gastrula", all.x = TRUE
  )
  stats_peaks_gastr[, peak_gastrula := NULL]
  stats_peaks <- rbindlist(list(
    gastrula = stats_peaks_gastr, adult = stats_peaks_adult
  ), use.names = TRUE, idcol = "stage")

}

stats_peaks <- unique(stats_peaks[, .(gene, peak, stage, dist_to_tss, peak_gini, peak_gini_scaled, mean_corr)])
setnames(stats_peaks, "mean_corr", "expression_correlation")

# combine
var_dt <- merge.data.table(class_peaks, stats_peaks, by = c("gene", "peak", "stage"))
var_dt <- merge.data.table(var_dt, pro_dt, by = c("gene", "stage"), sort = FALSE)
var_dt[, cre := ifelse(promoter == "NO", "enhancer", "promoter")]
var_dt[, cre_class := promoter][cre_class == "NO", cre_class := "enhancer"]
var_dt[, cre_class := factor(cre_class, levels = c("CP", "SP", "AP", "enhancer"))]

# plot
cre_cols <- c(class_cols, "promoter" = "#4393c3", "enhancer" = "#4ba068")
gp_list <- lapply(c("CP", "SP", "AP", "enhancer"), function(x) {
  ggplot(var_dt[cre_class == x], aes(score, peak_gini)) + 
    stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
    scale_x_continuous(trans = "log10", limits = c(0.1, 2), oob = squish, expand = c(0, 0)) +
    scale_y_continuous(limits = c(0.4, 1), oob = squish, expand = c(0, 0)) +
    scale_fill_gradientn(colours = c(colorspace::lighten(cre_cols[x], 0.995), cre_cols[x])) +
    labs(x = "peak accessibility", y = "peak variability", title = x)
})
gp_pvar <- wrap_plots(gp_list) +
  plot_layout(nrow = 1, guides = "collect") & theme(legend.position = "bottom")
ggsave(
    file.path(fig_dir, sprintf("peaks_var_%s.pdf", stage)),
    gp_pvar, width = 9.5, height = 3.5
)
```

### GC content

```{r}
# sequence
dna_fn <- file.path("..", "..", "genome", "Nvec_vc1.1_gDNA_mtDNA.fasta")
dna <- Biostrings::readDNAStringSet(dna_fn)

# get peaks ranges
peaks_gr <- makeGRangesFromDataFrame(
  unique(class_peaks[, .(seqnames, start, end, peak, promoter)]),
  keep.extra.columns = TRUE
)

# get peaks sequence
peaks_seq <- dna[peaks_gr]

# GC content
gc <- letterFrequency(peaks_seq, letters="GC", as.prob=TRUE)
peaks_gr$GC <- unlist(gc)
peaks_dt <- setDT(as.data.frame(peaks_gr))
setnames(peaks_dt, "G.C", "GC")
peaks_dt[, promoter := factor(promoter, levels = c(names(class_cols), "NO"))]

# plot
gp_gc <- ggplot(peaks_dt, aes(
    x = promoter, y = GC,
    fill = promoter, color = promoter
  )) +
  geom_boxplot(outlier.shape = 21) +
  scale_fill_manual(values = c(class_cols, "NO" = "#319854"), drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(c(class_cols, "#319854"), 0.5),
    names = c(names(class_cols), "NO")
  )) +
  scale_y_continuous(
    #limits = c(0, quantile(dt_gp_nop$N, 0.99)),
    #trans = "log10",
    oob = scales::squish
  ) +
  theme(legend.position = "none") +
  labs(
    y = "non-promoter peaks",
    x = ""
  )
ggsave(
    file.path(fig_dir, sprintf("peaks_gc_%s.pdf", stage)),
    gp_gc, width = 2.5, height = 2.5
)
```

### Broad H3K4me3

To identify genes with broad K4me3 in gene body, we trim TSS signal

```{r}
trim_tss <- 600
bed <- fread("../../genome/Nvec_v4_merged_annotation_sort.bed")
bed[V6=="+", V2 := V2 + trim_tss]
bed[V6=="-", V3 := V3 - trim_tss]
bed[, len := V3 - V2]
fwrite(
  bed[len > 0, 1:6],
  sprintf("../../genome/Nvec_v4_merged_annotation_sort_TSS+%s.bed", trim_tss),
  sep = "\t",
  col.names = FALSE
)
```

deeptools matrix and plot heatmap

```{bash}
# directories
scatac_dir="/home/anamaria/cluster/aelek/proj/scATAC_nvec_v2"
chip_dir="/home/anamaria/cluster/aelek/proj/ChIPseq_nvec_v2"
work_dir=${scatac_dir}"/clustering/SEACells/Results/ArchRProj_Nvec_TSS4_frag200/ArchRProj/Figures"

# inputs
tss_trim=600
genes=${scatac_dir}"/genome/Nvec_v4_merged_annotation_sort.bed"
genes=${scatac_dir}"/genome/Nvec_v4_merged_annotation_sort_TSS+"${tss_trim}".bed"
bw_h3k4me3=${chip_dir}"/H3K4me3/alignments/H3K4me3.bw"
bw_h3k4me3_gastrula=${chip_dir}"/H3K4me3_gastrula/H3K4me3_gastrula_bwa.bw"

# H3K4me3 heatmap outputs
k=8
matrix=${work_dir}"/deeptools.matrix.H3K4me3.TSS+"${tss_trim}"bp.gz"
heatmap=${work_dir}"/deeptools.heatmap.H3K4me3.TSS+"${tss_trim}"bp.k"${k}".pdf"

# adult
computeMatrix scale-regions \
  -R ${genes} \
  -S ${bw_h3k4me3} \
  -b 0 -a 1000 \
  --regionBodyLength 5000 \
  --skipZeros \
  -o ${matrix%%.gz}.adult.gz \
  --outFileNameMatrix ${matrix%%.gz}.adult.tab \
  --outFileSortedRegions ${matrix%%.gz}.adult.bed \
  -p 32

plotHeatmap -m ${matrix%%.gz}.adult.gz \
  -out ${heatmap%%.pdf}.adult.pdf \
  --outFileSortedRegions ${heatmap%%.pdf}.adult.bed \
  --colorMap Blues \
  --zMin 0 --zMax 30 \
  --kmeans ${k} \
  --legendLocation lower-center \
  --dpi 100 &

# gastrula
computeMatrix scale-regions \
  -R ${genes} \
  -S ${bw_h3k4me3_gastrula} \
  -b 0 -a 1000 \
  --regionBodyLength 5000 \
  --skipZeros \
  -o ${matrix%%.gz}.gastrula.gz \
  --outFileNameMatrix ${matrix%%.gz}.gastrula.tab \
  --outFileSortedRegions ${matrix%%.gz}.gastrula.bed \
  -p 32

plotHeatmap -m ${matrix%%.gz}.gastrula.gz \
  -out ${heatmap%%.pdf}.gastrula.pdf \
  --outFileSortedRegions ${heatmap%%.pdf}.gastrula.bed \
  --colorMap Blues \
  --zMin 0 --zMax 30 \
  --kmeans ${k} \
  --legendLocation lower-center \
  --dpi 100 &
```

```{bash eval=FALSE, include=FALSE}
# other heatmaps
matrix=${work_dir}"/deeptools.matrix.other.gz"
heatmap=${work_dir}"/deeptools.heatmap.other.pdf"
bw1=${chip_dir}"/H3K27me3/alignments/H3K27me3.bw"
bw2=${chip_dir}"/H3K4me1/alignments/H3K4me1.bw"
bw3=${chip_dir}"/H3K4me2/alignments/H3K4me2.bw"
bw4=${chip_dir}"/H3K4me3/alignments/H3K4me3.bw"
bw5=${chip_dir}"/H3K9me3/alignments/H3K9me3.bw"
bw6=${chip_dir}"/K27ac/alignments/K27ac.bw"
bw7=${chip_dir}"/K9ac/alignments/K9ac.bw"
bw8=${chip_dir}"/p300/alignments/p300.bw"

computeMatrix scale-regions \
  -R ${genes} \
  -S ${bw1} ${bw2} ${bw3} ${bw4} ${bw5} ${bw6} ${bw7} ${bw8} \
  -b 3000 -a 3000 \
  --regionBodyLength 5000 \
  --skipZeros \
  -o ${matrix} \
  --outFileNameMatrix ${matrix%%.gz}.tab \
  --outFileSortedRegions ${matrix%%.gz}.bed \
  -p 32

plotHeatmap -m ${matrix} \
  -out ${heatmap} \
  --outFileSortedRegions ${heatmap%%.pdf}.bed \
  --colorMap Blues \
  --zMin 0 --zMax 30 \
  --kmeans ${k} \
  --legendLocation lower-center \
  --dpi 100 &


```

Parse deeptools output files and save inputs for figure heatmap

```{r}
k <- 8
stage <- "adult"
k4me3_cols <- c(adult = "#853636ff", gastrula = "#d35f5fe5")

# load data
dtools_dt <- fread(file.path(fig_dir, sprintf(
  "deeptools.heatmap.H3K4me3.TSS+600bp.k%s.%s.bed", k, stage
)))
setnames(dtools_dt, c("#chrom", "name"), c("seqnames", "gene"))
dtools_dt <- unique(dtools_dt[, .(gene, deepTools_group)])
# dtools_dt[,.(n_occur=.N),gene][,.N,n_occur][order(-N)]
dtools_dt[, deepTools_group := factor(deepTools_group, levels = paste0("cluster_", seq_len(k)))]
dtools_dt[, rank := .I]

# add gene annotations
gene_bed <- fread(
  "/home/anamaria/cluster/aelek/proj/scATAC_nvec_v2/genome/Nvec_v4_merged_annotation_sort.bed"
)
gene_len <- gene_bed[, abs(V2 - V3)]
names(gene_len) <- gene_bed$V4
dtools_dt[, gene_length := gene_len[gene]]
dtools_gn <- merge.data.table(
  dtools_dt, gnan, by = "gene", all.x = TRUE, sort = FALSE
)
fwrite(
  dtools_gn,
  file.path(fig_dir, sprintf("deeptools_groups_TSS+600bp_k%s.%s.tsv", k, stage)),
  sep = "\t"
)

# save bed files for figure heatmap
cl_fg <- switch(
  stage,
  "adult" = "cluster_1",
  "gastrula" = "cluster_1"
)
cl_bg <- switch(
  stage,
  "adult" = "cluster_6",
  "gastrula" = "cluster_6"
)
cl <- c("broad" = cl_fg, "control" = cl_bg)
for (x in c("broad", "control")) {
  fwrite(
    gene_bed[V4 %in% dtools_gn[deepTools_group == cl[x]]$gene],
    file.path(fig_dir, sprintf("Nvec_v4_merged_annotation_sort_%s_%s.bed", x, stage)),
    sep = "\t", col.names = FALSE
  )
}
```

How many broad domain genes in adult/gastrula/intersect?

```{r}
# how many overlapping broad domain genes?
broad_dt <- rbindlist(sapply(c("adult", "gastrula"), function(stage)
  fread(file.path(fig_dir, sprintf("Nvec_v4_merged_annotation_sort_broad_%s.bed", stage))),
  simplify = FALSE, USE.NAMES = TRUE
), idcol = "stage")
broad_dt[, gene_length := abs(V3 - V2)]
setnames(broad_dt, "V4", "gene")
broad_dt <- broad_dt[, .(stage, gene, gene_length)]

broad_dc <- dcast.data.table(broad_dt, gene ~ stage, value.var = "gene_length")
broad_mt <- as.matrix(broad_dc[, -1])
broad_mt[!is.na(broad_mt)] <- 1
broad_mt[is.na(broad_mt)] <- 0

require(eulerr)
fit <- euler(broad_mt)
p1 <- plot(
  fit,
  quantities = TRUE,
  fill = k4me3_cols,
  labels = list(font = 4)
)
pdf(
  file.path(fig_dir, "broad_H3K4me3_genes_ovl.pdf"),
  width = 4, height = 2
)
print(p1)
dev.off()
```

Expression for genes in different deeptools clusters of H3K4me3

```{r}
# deep tools clusters
dtools_dt <- rbindlist(sapply(c("adult", "gastrula"), function(stage)
  fread(file.path(fig_dir, sprintf("deeptools_groups_TSS+600bp_k%s.%s.tsv", k, stage))),
  simplify = FALSE, USE.NAMES = TRUE
), idcol = "stage")

# expression variance metacell
var_dt <- rbindlist(list(
  adult = data.table(var_mc = apply(mc_adult@mc_fp, 1, var), gene = rownames(mc_adult@mc_fp)),
  gastrula = data.table(var_mc = apply(mc_gastr@mc_fp, 1, var), gene = rownames(mc_gastr@mc_fp))
), idcol = "stage")
dtools_vardt <- merge.data.table(
  dtools_dt, var_dt, by = c("gene", "stage"), all = FALSE, sort = FALSE
)

# expression data
exp_dt <- unique(class_peaks[, .(gene, cell_type, stage, umifrac, mcfp)])
exp_dt[, n_stages := length(unique(.SD$stage)), gene]
dtools_expdt <- merge.data.table(
  dtools_vardt, exp_dt, by = c("gene", "stage"), all = FALSE, sort = FALSE
)

# when considering expression, most genes are overlapping between adult and gastrula
unique(dtools_expdt[deepTools_group %in% cl_fg][, .(gene, stage, n_stages)])[, .N, .(n_stages, stage)]

# expression variance per gene
gstat <- rbindlist(list(
  adult = gstat_adult, gastrua = gstat_gastr
))
dtools_expdt <- merge.data.table(dtools_expdt, gstat, by = c("gene", "stage"), all = FALSE, sort = FALSE)

# top expression fc per gene
dtools_exptop <- dtools_expdt[!is.na(umifrac)][order(stage, rank, -mcfp)][, .SD[1], .(gene, stage, rank)]
dtools_exptop[, mcfp := pmin(mcfp, 6)]

# number of cell types
dtools_cts <- unique(dtools_expdt[, num_cts := length(unique(
  .SD[mcfp > 1.2]$cell_type
)), .(gene, stage, rank)][, .(gene, stage, num_cts)])
dtools_cts[num_cts < 1, num_cts := NA]
dtools_exptop <- merge.data.table(
  dtools_exptop, dtools_cts, by = c("gene", "stage"), sort = FALSE
)

# category for plot
dtools_exptop <- dtools_exptop[deepTools_group %in% c(cl_fg, cl_bg)]
dtools_exptop[, category := stage][deepTools_group %in% cl_bg, category := "other"]
dtools_exptop[, category_short := substr(category, 1, 1)]
dtools_exptop[, category_short := factor(category_short, levels = c("a", "g", "o"))]

# plot joint
gp_umi <- ggplot(dtools_exptop, aes(category_short, umifrac, fill = category, color = category)) +
  geom_boxplot(outlier.shape = 21) +
  scale_y_continuous(limits = c(NA, quantile(dtools_exptop$umifrac, 0.98, na.rm = TRUE)), oob = squish) +
  scale_fill_manual(values = c(k4me3_cols, "other" = "#757575ff")) +
  scale_color_manual(values = colorspace::darken(c(k4me3_cols, "other" = "#757575ff"), 0.5)) +
  labs(x = "", y = "top umifrac")
gp_fc <- ggplot(dtools_exptop, aes(category_short, mcfp, fill = category, color = category)) +
  geom_boxplot(outlier.shape = 21) +
  ggpubr::stat_compare_means(
    label = "p.signif", hide.ns = FALSE,
    method = "t.test", #method.args = list(alternative = "greater"),
    #ref.group = "o",
    comparisons = list(c("o", "g"), c("o", "a"))
  ) +
  # scale_y_continuous(limits = c(NA, quantile(dtools_exptop$mcfp, 0.98, na.rm = TRUE)), oob = squish) +
  scale_fill_manual(values = c(k4me3_cols, "other" = "#757575ff")) +
  scale_color_manual(values = colorspace::darken(c(k4me3_cols, "other" = "#757575ff"), 0.5)) +
  labs(x = "", y = "top mcfp")
gp_szc <- ggplot(dtools_exptop, aes(category_short, sz_cor, fill = category, color = category)) +
  geom_boxplot(outlier.shape = 21) +
  scale_y_continuous(limits = c(NA, quantile(dtools_exptop$sz_cor, 0.98, na.rm = TRUE)), oob = squish) +
  scale_fill_manual(values = c(k4me3_cols, "other" = "#757575ff")) +
  scale_color_manual(values = colorspace::darken(c(k4me3_cols, "other" = "#757575ff"), 0.5)) +
  labs(x = "")
gp_szcnorm <- ggplot(dtools_exptop, aes(category_short, sz_cor_norm, fill = category, color = category)) +
  geom_boxplot(outlier.shape = 21) +
  scale_y_continuous(limits = c(-0.2, 0.2), oob = squish) +
  scale_fill_manual(values = c(k4me3_cols, "other" = "#757575ff")) +
  scale_color_manual(values = colorspace::darken(c(k4me3_cols, "other" = "#757575ff"), 0.5)) +
  labs(x = "")
gp_varmc <- ggplot(dtools_exptop, aes(category_short, var_mc, fill = category, color = category)) +
  geom_boxplot(outlier.shape = 21) +
  scale_y_continuous(limits = c(NA, quantile(dtools_exptop$var_mc, 0.98, na.rm = TRUE)), oob = squish, trans = "log10") +
  scale_fill_manual(values = c(k4me3_cols, "other" = "#757575ff")) +
  scale_color_manual(values = colorspace::darken(c(k4me3_cols, "other" = "#757575ff"), 0.5)) +
  labs(x = "")
gp_ncts <- ggplot(dtools_exptop, aes(category_short, num_cts, fill = category, color = category)) +
  geom_boxplot(outlier.shape = 21) +
  scale_fill_manual(values = c(k4me3_cols, "other" = "#757575ff")) +
  scale_color_manual(values = colorspace::darken(c(k4me3_cols, "other" = "#757575ff"), 0.5)) +
  labs(x = "")
gp_exp <- gp_umi + gp_fc + gp_varmc + gp_ncts + 
  plot_layout(nrow = 1, guides = "collect") & theme(legend.position = "bottom")
ggsave(
  file.path(fig_dir, "broad_H3K4me3_genes_exp_joint.pdf"),
  gp_exp, width = 7, height = 2.5
)
```

Gene variance per cell type should be lower in broad H3K4me3 genes

```{r}
# function to calculate sz_cor within cell type
sca_sz_cor <- function(mat) {
  f_g = Matrix::rowSums(mat) > 10
  mat_fg = mat[f_g,]
  ctot = Matrix::colSums(mat)
  sz_cor = round(apply(mat_fg, 1, function(x) { cor(x, ctot) }),3)
  gene_tot = apply(mat_fg, 1, sum)
  tot_ord = order(gene_tot)
  cor_sz_ord = sz_cor[tot_ord]
  cmin = median(cor_sz_ord[1:101])
  cmax = median(cor_sz_ord[(length(cor_sz_ord)-101):length(cor_sz_ord)])
  sz_cor_trend = zoo::rollmedian(cor_sz_ord, 101, fill=c(cmin, NA, cmax))
  sz_cor_norm = cor_sz_ord - sz_cor_trend
  list("sz_cor" = sz_cor, "sz_cor_norm" = sz_cor_norm)
}

# level
lvl <- "cell_type"

# calculate sz_cor for gastrula and adult cell types
mc_gastr_vec <- switch(
  lvl,
  "metacell" = mc_gastr@mc,
  "cell_type" = ct_gastr@mc
)
sz_cor_gastr_list <- lapply(unique(mc_gastr_vec), function(x) {
  cs <- names(mc_gastr_vec)[mc_gastr_vec == x]
  mt <- as.matrix(mat_gastr@mat[, cs])
  df <- do.call("cbind", sca_sz_cor(mt))
  as.data.table(df, keep.rownames = "gene")[, cell_type := x][, stage := "gastrula"]
})
mc_adult_vec <- switch(
  lvl,
  "metacell" = mc_adult@mc,
  "cell_type" = ct_adult@mc
)
sz_cor_adult_list <- lapply(unique(mc_adult_vec), function(x) {
  cs <- names(mc_adult_vec)[mc_adult_vec == x]
  mt <- as.matrix(mat_adult@mat[, cs])
  df <- do.call("cbind", sca_sz_cor(mt))
  as.data.table(df, keep.rownames = "gene")[, cell_type := x][, stage := "adult"]
})
sz_cor_dt <- rbindlist(list(
  rbindlist(sz_cor_gastr_list),
  rbindlist(sz_cor_adult_list)
))
sz_cor_dt[, cell_type := factor(cell_type, levels = sort(unique(c(mc_adult_vec, mc_gastr_vec))))]

# deep tools clusters
k <- 8
dtools_dt <- rbindlist(sapply(c("adult", "gastrula"), function(stage)
  fread(file.path(fig_dir, sprintf("deeptools_groups_TSS+600bp_k%s.%s.tsv", k, stage))),
  simplify = FALSE, USE.NAMES = TRUE
), idcol = "stage")

# add sz_cor
dtools_vardt <- merge.data.table(
  dtools_dt, sz_cor_dt, by = c("gene", "stage"), all = FALSE, sort = FALSE
)

# add expression
fp_adult <- switch(
  lvl,
  "metacell" = mc_adult@mc_fp,
  "cell_type" = ct_adult@mc_fp
)
fp_gastr <- switch(
  lvl,
  "metacell" = mc_gastr@mc_fp,
  "cell_type" = ct_gastr@mc_fp
)
exp_dt <- rbindlist(list(
  adult = melt.data.table(as.data.table(
    fp_adult, keep.rownames = "gene"
  ), id.vars = "gene", value.name = "mcfp", variable.name = "cell_type")[],
  gastrula = melt.data.table(as.data.table(
    fp_gastr, keep.rownames = "gene"
  ), id.vars = "gene", value.name = "mcfp", variable.name = "cell_type")
), idcol = "stage")
dtools_exp <- merge.data.table(
  dtools_vardt, exp_dt, by = c("gene", "stage", "cell_type"), all = FALSE, sort = FALSE
)

# select cell types with top expression for every gene
setorder(dtools_exp, gene, mcfp)
dtools_top <- dtools_exp[, .SD[1], .(gene, stage)]
dtools_top <- dtools_exp[mcfp > 2]

# plot
dtools_top[, category := stage][deepTools_group %in% cl_bg, category := "other"]
ylim <- quantile(dtools_top[sz_cor_norm>0]$sz_cor_norm, 0.99, na.rm = TRUE)
gp_var <- ggplot(dtools_top, aes(category, sz_cor_norm, fill = category, color = category)) +
  geom_boxplot(outlier.shape = 21) +
  scale_y_continuous(limits = c(-1 * ylim, ylim), oob = squish) + # trans = "log10"
  scale_fill_manual(values = c(k4me3_cols, "other" = "#757575ff")) +
  scale_color_manual(values = colorspace::darken(c(k4me3_cols, "other" = "#757575ff"), 0.5)) +
  labs(x = "") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
gp_fp <- ggplot(dtools_top, aes(category, mcfp, fill = category, color = category)) +
  geom_boxplot(outlier.shape = 21) +
  scale_y_continuous(limits = c(NA, 8), oob = squish) + # trans = "log10"
  scale_fill_manual(values = c(k4me3_cols, "other" = "#757575ff")) +
  scale_color_manual(values = colorspace::darken(c(k4me3_cols, "other" = "#757575ff"), 0.5)) +
  labs(x = "") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
gp_sz_cor_exp <- gp_var + gp_fp + plot_layout(guides = "collect")

ggsave(
  file.path(fig_dir, sprintf("broad_H3K4me3_genes_exp_var_%s.pdf", lvl)),
  gp_sz_cor_exp, width = 5, height = 4
)
```

Which cell types express genes with broad H3K4me3?

```{r}
# how are those broad K4me3 domain genes expressed?
dtools_expsp <- dtools_expdt[deepTools_group %in% cl_fg][!is.na(umifrac)]
dtools_expsp <- dtools_expsp[mcfp > 1.5][order(stage, rank, -mcfp)]
dtools_expsp[, n_cell_types := length(unique(.SD$cell_type)), .(stage, gene)]

# in how many cell types
dtools_expsp[, .N, .(stage, n_cell_types)][order(stage, -N)]
dtools_expsp[, cell_type := factor(cell_type, levels = unique(dtools_expsp[, .N, cell_type])[order(-N)]$cell_type)]
dtools_expsp[n_cell_types == 1][, .N, .(stage, cell_type)][order(stage, -N)]
dtools_expsp[n_cell_types == 4][, .N, .(stage, cell_type)][order(stage, -N)]

# in which cell types?
p_ct <- dtools_expsp[, .N, .(stage, cell_type)][, prop := N / sum(N), .(stage)]
p_ct <- p_ct[order(stage, -N)]
p_ct[, cell_type := factor(cell_type, levels = p_ct$cell_type)]
p_adult <- ggplot(p_ct[stage == "adult"], aes("", N, fill = cell_type)) +
  geom_bar(stat = "identity", width=1, color="white") +
  coord_polar("y", start=0) +
  scale_fill_manual(values = c(ct_cols, bct_cols)) +
  geom_text(
    aes(label = scales::percent(prop), x = 1.1),
    position = position_stack(vjust = 0.5),
    color = "black"
  ) +
  theme_void()
p_gastr <- ggplot(p_ct[stage == "gastrula"], aes("", N, fill = cell_type)) +
  geom_bar(stat = "identity", width=1, color="white") +
  coord_polar("y", start=0) +
  scale_fill_manual(values = c(ct_cols, bct_cols)) +
  geom_text(
    aes(label = scales::percent(prop), x = 1.1),
    position = position_stack(vjust = 0.5),
    color = "black"
  ) +
  theme_void() 

p_cts <- p_adult + p_gastr
ggsave(
  file.path(fig_dir, "broad_H3K4me3_genes_exp_cell_types.pdf"),
  p_cts, width = 8, height = 4
)

```

Functional enrichment for different deeptools clusters of H3K4me3

```{r}
# add gene list info
dtools_gl <- merge.data.table(
  dtools_dt, gl_dt[, .(gene, genelist, genelist_full, og, name)],
  by = "gene", all.x = TRUE, sort = FALSE
)
dtools_gl[is.na(genelist), genelist:= ""]
dtools_gl <- unique(dtools_gl)

# plot
dtools_gl_gp <- ggplot(
    dtools_gl,
    aes(deepTools_group, fill = genelist)
  ) +
  geom_bar(position = "stack", color = "black") +
  scale_fill_manual(values = RColorBrewer::brewer.pal(n=9, "Blues")) +
  scale_y_continuous(trans = "log10") +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
  )

ggsave(
    file.path(fig_dir, sprintf("deeptools_groups_gene_list_annot.pdf")),
    dtools_gl_gp, width = 6, height = 4.5
)

# add gene promoter info
dtools_pr <- merge.data.table(
  dtools_dt, unique(pro_dt[, .(gene, gene_promoter)]),
  by = "gene", all.x = TRUE, sort = FALSE
)
dtools_pr <- dtools_pr[!is.na(gene_promoter)]
dtools_pr <- unique(dtools_pr)

# plot
dtools_pr_gp <- ggplot(
    dtools_pr,
    aes(deepTools_group, fill = gene_promoter)
  ) +
  scale_fill_manual(values = class_cols) +
  scale_y_continuous(trans = "log10") +
  geom_bar(position = "stack") +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
  )
ggsave(
    file.path(fig_dir, sprintf("deeptools_groups_gene_promoter_annot.pdf")),
    dtools_pr_gp, width = 6, height = 4.5
)
```

Are they CP or SP?

```{r}
dtools_pro <- merge.data.table(dtools_dt, pro_dt, by = c("gene", "stage"))
dtools_pro <- dtools_pro[deepTools_group %in% c(cl_fg, cl_bg)]
dtools_pro[, category := paste0(stage, "_fg")]
dtools_pro[deepTools_group %in% cl_bg, category := paste0(stage, "_bg")]
dtools_pro <- dtools_pro[gene_promoter != "AP"]
dtools_sum <- dtools_pro[, .N, .(gene_promoter, category)]
dtools_sum[, stage := str_extract(category, "adult|gastrula")]
dtools_sum[, fgbg := str_extract(category, "fg|bg")]
dtools_dcs <- dcast.data.table(dtools_sum, gene_promoter + stage ~ fgbg, value.var = "N")
dtools_dcs[, tot_fg := sum(fg), stage]
dtools_dcs[, tot_bg := sum(bg), stage]
dtools_dcs[, fg_frac := fg / sum(fg), stage]
dtools_dcs[, bg_frac := bg / sum(bg), stage]
dtools_dcs[, fc := fg_frac / bg_frac]
dtools_dcs[, pval := binom.test(
  fg, tot_fg, p = bg_frac, alternative = "greater"
)$p.value, by = c("gene_promoter", "stage")]
dtools_dcs[, logpval := -1 * log10(pval)]
dtools_dcs[, qval := p.adjust(pval)]

gp_dtools_prom <- ggplot(dtools_dcs, aes(gene_promoter, fg_frac, fill = stage, color = stage)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_fill_manual(values = k4me3_cols) +
  scale_color_manual(values = colorspace::darken(k4me3_cols, 0.5)) +
  theme(legend.position = "none")
ggsave(
  file.path(fig_dir, "broad_H3K4me3_genes_promoters_joint.pdf"),
  gp_dtools_prom, width = 3, height = 2.5
)
```

For figure, we plot heatmap and profile for full gene models

```{bash}
# directories
scatac_dir="/home/anamaria/cluster/aelek/proj/scATAC_nvec_v2"
chip_dir="/home/anamaria/cluster/aelek/proj/ChIPseq_nvec_v2"
work_dir=${scatac_dir}"/clustering/SEACells/Results/ArchRProj_Nvec_TSS4_frag200/ArchRProj/Figures"

# inputs
genes_broad=${work_dir}"/Nvec_v4_merged_annotation_sort_broad.bed"
genes_control=${work_dir}"/Nvec_v4_merged_annotation_sort_control.bed"
bw_h3k4me3=${chip_dir}"/H3K4me3/alignments/H3K4me3.bw"
bw_h3k4me3_gastrula=${chip_dir}"/H3K4me3_gastrula/H3K4me3_gastrula_bwa.bw"

# H3K4me3 heatmap outputs
matrix=${work_dir}"/deeptools.matrix.H3K4me3.broad.gz"
heatmap=${work_dir}"/deeptools.heatmap.H3K4me3.broad.pdf"

# adult
computeMatrix scale-regions \
  -R ${genes_broad%%.bed}_adult.bed ${genes_control%%.bed}_adult.bed \
  -S ${bw_h3k4me3} \
  -b 3000 -a 3000 \
  --regionBodyLength 5000 \
  --skipZeros \
  -o ${matrix%%.gz}.adult.gz \
  --outFileNameMatrix ${matrix%%.gz}.adult.tab \
  -p 32

plotHeatmap -m ${matrix%%.gz}.adult.gz \
  -out ${heatmap%%.pdf}.adult.pdf \
  --colorMap Blues \
  --zMin 0 --zMax 30 \
  --legendLocation lower-center \
  --dpi 100 &

# gastrula
computeMatrix scale-regions \
  -R ${genes_broad%%.bed}_gastrula.bed ${genes_control%%.bed}_gastrula.bed \
  -S ${bw_h3k4me3_gastrula} \
  -b 3000 -a 3000 \
  --regionBodyLength 5000 \
  --skipZeros \
  -o ${matrix%%.gz}.gastrula.gz \
  --outFileNameMatrix ${matrix%%.gz}.gastrula.tab \
  -p 32

plotHeatmap -m ${matrix%%.gz}.gastrula.gz \
  -out ${heatmap%%.pdf}.gastrula.pdf \
  --colorMap Blues \
  --zMin 0 --zMax 30 \
  --legendLocation lower-center \
  --dpi 100 &

# joint
computeMatrix scale-regions \
  -R ${genes_broad%%.bed}_adult.bed \
     ${genes_broad%%.bed}_gastrula.bed \
     ${genes_control%%.bed}_adult.bed  \
     ${genes_control%%.bed}_gastrula.bed \
  -S ${bw_h3k4me3} ${bw_h3k4me3_gastrula} \
  -b 3000 -a 3000 \
  --regionBodyLength 5000 \
  --skipZeros \
  -o ${matrix} \
  --outFileNameMatrix ${matrix%%.gz}.tab \
  -p 32

plotHeatmap -m ${matrix} \
  -out ${heatmap} \
  --colorMap Blues \
  --zMin 0 --zMax 30 \
  --legendLocation lower-center \
  --dpi 100 &

```

### Nucleosome positioning

V matrices

```{r}
require(VplotR)

# fragments
frag_cols <- c("seqnames", "start", "end", "Cell", "count")

fragments_adult <- fread(file.path(adult_dir, "Fragments", "Fragments.sort.tsv.gz"))
setnames(fragments_adult, frag_cols)
frag_meta_adult <- as.data.table(proj_adult@cellColData)[, .(Cell, broad_cell_type)]
setnames(frag_meta_adult, "broad_cell_type", "cell_type")
fragments_adult <- merge.data.table(fragments_adult, frag_meta_adult, by = "Cell")

fragments_gastr <- fread(file.path(gastr_dir, "Fragments", "Fragments.tsv.gz"))
setnames(fragments_gastr, frag_cols)
frag_meta_gastr <- as.data.table(proj_gastr@cellColData)[, .(Cell, cell_type)]
fragments_gastr <- merge.data.table(fragments_gastr, frag_meta_gastr, by = "Cell")

fragments <- rbindlist(list(adult = fragments_adult, gastrula = fragments_gastr), idcol = "stage")
fragments[, cell_type := str_replace_all(cell_type, "\\.", "_")]
fragments[, cell_type := str_replace_all(cell_type, cell_type_rename)]
frag_gr <- makeGRangesFromDataFrame(fragments, keep.extra.columns = TRUE)

# compute V matrix and normalize it
v_matr <- list()
v_matn <- list()

# add distances to TSS of gene that peak is assigned to
peaks_dt <- copy(class_peaks)
genes <- fread("../../genome/Nvec_v4_merged_annotation_sort.bed")
setnames(genes, c("seqnames", "start", "end", "gene", "score", "strand"))
genes[strand == "-", start := end - 1]
genes[strand == "+", end := start + 1]
genes_tss <- genes[, .(gene, start, strand)]
setnames(genes_tss, c("gene", "tss", "strand"))
peaks_dt <- merge.data.table(peaks_dt, genes_tss, by = "gene", all.x = TRUE, sort = FALSE)
peaks_dt[, dist_to_tss := abs(tss - end)]
peaks_dt[strand == "-", dist_to_tss := abs(tss - start)]
unique(peaks_dt[, .(peak, promoter)])[, .N, .(promoter)]

# plot distribution of distances to TSS for differnet elements
gp_dit_to_tss <- ggplot(
  unique(peaks_dt[, .(gene, tss, peak, promoter, strand, dist_to_tss)]),
  aes(dist_to_tss, color = promoter)
) + 
  geom_density() +
  scale_x_continuous(trans = "log10") +
  scale_color_manual(values = class_cols)
ggsave(
  file.path(fig_dir, "peak_distance_to_tss.pdf"),
  gp_dit_to_tss, width = 8, height = 3
)

# for enhancers, take only the ones far from ANY TSS
peaks_gr <- makeGRangesFromDataFrame(peaks_dt)
strand(peaks_gr) <- "*"
tss_gr <- makeGRangesFromDataFrame(genes)
strand(tss_gr) <- "*"
dist_near_tss <- GenomicRanges::distanceToNearest(x = peaks_gr, subject = tss_gr)
peaks_dt$dist_to_nearest_tss <- mcols(dist_near_tss)$distance
peaks_dt <- peaks_dt[(
  promoter == "NO" & dist_to_nearest_tss > 1e3
) | (
  promoter != "NO" & dist_to_nearest_tss < 1e3
)]
unique(peaks_dt[, .(peak, promoter)])[, .N, .(promoter)]

# plot distribution of distances to nearest TSS for differnet elements used in analysis
gp_dit_to_tss <- ggplot(
  unique(peaks_dt[, .(gene, tss, peak, promoter, strand, dist_to_nearest_tss)]),
  aes(dist_to_nearest_tss, color = promoter)
) + 
  geom_density() +
  scale_x_continuous(trans = "log10") +
  scale_color_manual(values = class_cols)
ggsave(
  file.path(fig_dir, "peak_distance_to_nearest_tss.pdf"),
  gp_dit_to_tss, width = 8, height = 3
)

# per stage
for (s in c("adult", "gastrula")) {
  if (s == "adult") {
    st_peaks <- peaks_dt[stage == s & !grepl("precursor", cell_type)][!grepl("neuron", cell_type)]
  } else if (s == "gastrula") {
    st_peaks <- peaks_dt[stage == s][!grepl("NPC|EMS$", cell_type)]
  }
  
  # per promoter type
  for (x in c("SP", "CP", "NO")) {
    message(paste(s, x))
    if (x %in% unique(st_peaks$promoter)) {
      prom_dt <- unique(st_peaks[promoter == x, .(seqnames, start, end)])
    } else {
      stop("What's that?")
    }
    prom_gr <- makeGRangesFromDataFrame(prom_dt)
    vplt_mt <- computeVmat(
      bam_granges = frag_gr,
      granges = prom_gr,
      cores = 1,
      xlims = c(-250, 250),
      ylims = c(50, 300)
    )
    v_matr[[s]][[x]] <- vplt_mt
    #vplt_mt <- v_matr[[s]][[x]]
    vplt_mn <- normalizeVmat(
      vplt_mt,
      bam_granges = frag_gr,
      granges = prom_gr,
      normFun = "zscore", 
      s = 0.99
    )
    v_matn[[s]][[x]] <- vplt_mn
  }

  # # per cell type
  # for (ct in unique(st_peaks$cell_type)) {
  #   ct_peaks <- st_peaks[cell_type == ct]
  # 
  #   # per promoter type
  #   for (x in c("SP", "CP", "NO")) {
  #     message(paste(s, ct, x))
  #     if (x %in% unique(ct_peaks$promoter)) {
  #       prom_dt <- unique(ct_peaks[promoter == x, .(seqnames, start, end)])
  #     } else {
  #       stop("What's that?")
  #     }
  #     prom_gr <- makeGRangesFromDataFrame(prom_dt)
  #     vplt_mt <- computeVmat(
  #       bam_granges = frag_gr,
  #       granges = prom_gr,
  #       cores = 1,
  #       xlims = c(-250, 250),
  #       ylims = c(50, 300)
  #     )
  #     v_matr[[s]][[ct]][[x]] <- vplt_mt
  #     #vplt_mt <- v_matr[[s]][[x]]
  #     vplt_mn <- normalizeVmat(
  #       vplt_mt,
  #       bam_granges = frag_gr,
  #       granges = prom_gr,
  #       normFun = "zscore", 
  #       s = 0.99
  #     )
  #     v_matn[[s]][[ct]][[x]] <- vplt_mn
  #   }
  # 
  # }

}
saveRDS(v_matr, file.path(fig_dir, "Vplot_mat_raw.RDS"))
saveRDS(v_matn, file.path(fig_dir, "Vplot_mat_norm_zscore.RDS"))
```

V plots per promoter type

```{r}
v_matn <- readRDS(file.path(fig_dir, "Vplot_mat_norm_zscore.RDS"))
v_plot <- sapply(c("adult", "gastrula"), function(s) {
    sapply(c("SP", "CP", "NO"), function(x) {
      plotVmat(v_matn[[s]][[x]]) +
        labs(title = sprintf("%s %s", s, x)) +
        scale_fill_gradientn(
          colours = viridis::inferno(10),
          limits = c(0, 5), oob = scales::squish # zscore
          #limits = c(0, 1.2e-3), oob = scales::squish # libdepth+nloci
        )
    }, simplify = FALSE, USE.NAMES = TRUE)
}, simplify = FALSE, USE.NAMES = TRUE)


pdf(
  file.path(fig_dir, "v_plots_zscore.pdf"),
  width = 5, height = 8
)
for (s in c("adult", "gastrula")) {
  vp <- v_plot[[s]][["CP"]] / v_plot[[s]][["SP"]] / v_plot[[s]][["NO"]] +
    plot_layout(guides = "collect") &
    theme(legend.position = "bottom")
  print(vp)
}
dev.off()

```

V plots per cell type and promoter type

```{r}
v_plot <- sapply(c("adult", "gastrula"), function(s) {
  selected_cell_types <- setdiff(names(v_matn[[s]]), c("CP", "SP", "AP", "NO"))
  sapply(selected_cell_types, function(ct) {
    message(ct)
    sapply(c("SP", "CP", "NO"), function(x) {
      plotVmat(v_matn[[s]][[ct]][[x]]) +
        labs(title = sprintf("%s %s %s", s, ct, x)) +
        scale_fill_gradientn(
          colours = viridis::inferno(10),
          limits = c(0, 5), oob = scales::squish # zscore
          #limits = c(0, 1.2e-3), oob = scales::squish # libdepth+nloci
        )
    }, simplify = FALSE, USE.NAMES = TRUE)
  }, simplify = FALSE, USE.NAMES = TRUE)
}, simplify = FALSE, USE.NAMES = TRUE)

pdf(
  file.path(fig_dir, "v_plots_zscore.pdf"),
  width = 5, height = 8
)
for (s in c("adult", "gastrula")) {
  v_pch_adult <- v_plot[[s]][["CP"]] / v_plot[[s]][["SP"]] / v_plot[[s]][["NO"]] +
    plot_layout(guides = "collect") &
    theme(legend.position = "bottom")
  print(vp)
}
dev.off()
```

Profile

```{r}
v_matn <- readRDS(file.path(fig_dir, "Vplot_mat_norm_zscore.RDS"))
# profile
ydens <- rbindlist(sapply(c("adult", "gastrula"), function(x) {
  rbindlist(sapply(c("SP", "CP", "NO"), function(y) {
    y_dens <- rowSums(v_matn[[x]][[y]])
    y_dens <- zoo::rollmean(y_dens, 10, fill = NA, fix = "center")
    #y_dens <- pmax(y_dens, 0)
    data.table(dist = as.integer(names(y_dens)), score = y_dens)[, group := y]
  }, simplify = FALSE, USE.NAMES = TRUE))[, stage := x]
}, simplify = FALSE, USE.NAMES = TRUE))

# plot
gp_prof <- ggplot(ydens[group != "NO"], aes(dist, score, color = group, linetype = stage)) +
  geom_line() +
  scale_color_manual(values = class_cols)
ggsave(
  file.path(fig_dir, "nucleosome_profile.pdf"),
  gp_prof, width = 6, height = 3
)
```

Cluster genes based on nucleosome profile

```{bash eval=FALSE}
computeMatrix scale-regions \
  -R ${genes} \
  -S {bw} \
  -b 0 -a 1000 \
  --regionBodyLength 5000 \
  --skipZeros \
  -o ${matrix} \
  --outFileNameMatrix ${matrix%%.gz}.tab \
  --outFileSortedRegions ${matrix%%.gz}.bed \
  -p 32

plotHeatmap -m ${matrix} \
  -out ${heatmap} \
  --outFileSortedRegions ${heatmap%%.pdf}.bed \
  --colorMap Blues \
  --zMin 0 --zMax 30 \
  --kmeans ${k} \
  --legendLocation lower-center \
  --dpi 100 &

```

Nucleosome calling with nucleoatac

```{bash eval=FALSE}
wdir="/home/anamaria/cluster/aelek/proj/scATAC_nvec_v2/clustering/SEACells"
cd ${wdir}
mkdir ${wdir}/nucleoatac/

conda activate nucleoATAC

nth=8
gdir="/home/anamaria/cluster/aelek/proj/scATAC_nvec_v2/"
fasta=${gdir}/Nvec_vc1.1_gDNA.fasta

bdir="scATAC_nvec_v2/scatacseq-pipeline/"
bedin=${wdir}/clustering/SEACells/Results/ArchRProj_Nvec_TSS4_frag200/ArchRProj/Peaks/Peaks_cell_type_mapped.bed
bed=${bedin%%.bed}_broad.bed
bedtools slop -i ${bedin} -g ${fasta} -b 250 > ${bed}
sort -k1,1 -k2,2n ${bed} > ${bed%%.bed}_sort.bed
bedtools merge ${bed%%.bed}_sort.bed > ${bed}
rm ${bed%%.bed}_sort.bed

for name in 21_Fn
do
  bam=${bdir}/${name}/alignments/${name}.bwa.sorted.bam
  out=${wdir}/nucleoatac/${name}
  mkdir -p ${out}
  nucleoatac run \
    --bed ${bed} \
    --bam ${bam} \
    --fasta ${fasta} \
    --out ${out}/${name} \
    --cores ${nth} > ${out}/${name}.log &
done
```

### Conservation scores

Prepare control regions for scoring

```{r}
genome_dir <- "../../genome"
gene_fn <- "Nvec_v4_merged_annotation_sort.gtf"
genome <- seqinfo(BSgenome.jaNemVect1.1.DToL.Assembly)
gtf <- rtracklayer::import.gff(file.path(genome_dir, gene_fn))

# CDS
cds_gr <- gtf[gtf$type == "CDS"]
cds_gr$score <- 0
rtracklayer::export.bed(
  cds_gr,
  file.path(genome_dir, str_replace(gene_fn, ".gtf", "_CDS.bed"))
)

# utrs
utr_gr <- GenomicRanges::setdiff(
  gtf[gtf$type == "exon"],
  gtf[gtf$type == "CDS"],
  ignore.strand = TRUE
)
rtracklayer::export.bed(
  utr_gr,
  file.path(genome_dir, str_replace(gene_fn, ".gtf", "_UTR.bed"))
)

# introns
intron_gr <- GenomicRanges::setdiff(
  gtf[gtf$type == "transcript"],
  gtf[gtf$type == "exon"],
  ignore.strand = TRUE
)
rtracklayer::export.bed(
  intron_gr,
  file.path(genome_dir, str_replace(gene_fn, ".gtf", "_introns.bed"))
)

# intergenic
chr_gr <- GRanges(
  seqnames = seqnames(BSgenome.jaNemVect1.1.DToL.Assembly),
  ranges = IRanges(start = 1, end = seqlengths(BSgenome.jaNemVect1.1.DToL.Assembly))
)
intergenic_gr <- GenomicRanges::setdiff(
  chr_gr,
  gtf[gtf$type == "transcript"],
  ignore.strand = TRUE
)
rtracklayer::export.bed(
  intergenic_gr,
  file.path(genome_dir, str_replace(gene_fn, ".gtf", "_intergenic.bed"))
)
```

After running phastCon/phyloP, load results.

```{r}
con_dir <- file.path(ann_dir, "2023-nematostella_whole_genome_conservation")
class_stage_cols <- structure(
  rep(class_cols, each = 2),
  names = paste(rep(names(class_cols), each = 2), c("adult", "gastrula"))
)
ph_cols <- c(
  class_cols,
  class_stage_cols,
  ovl_cols,
  "transposons" = "#f03b20",
  "tfbs" = "#c51b8a",
  "loops" = "#756bb1"
)

# phastcon scores
phast_dt <- rtracklayer::import.bw(
  file.path(con_dir, "phastcons.Nvec.phastcons_scores.bw")
)

# percent identity
idents_dt <- fread(file.path(con_dir, "alignment.Nvec.identity_per_peak.csv"), fill = FALSE)
setnames(idents_dt, "V1", "peak")

# phylop scores
phylop_fn <- c(
  CRE = "phastcons.Nvec.phylop_per_peak.bed",
  CDS = "phastcons.Nvec.phylop_CDS.bed",
  UTR = "phastcons.Nvec.phylop_UTR.bed",
  introns = "phastcons.Nvec.phylop_introns.bed",
  intergenic = "phastcons.Nvec.phylop_intergenic.bed",
  transposons = "phastcons.Nvec.phylop_transposons.bed",
  tfbs = "phastcons.Nvec.phylop_tfbs.bed",
  loops = "phastcons.Nvec.phylop_loops.bed"
)
phastc_list <- lapply(
  names(phylop_fn), function(x) {
    phastc_dt <- fread(file.path(con_dir, phylop_fn[x]), fill = TRUE)
    setnames(phastc_dt, c("seqnames", "start", "end", "peak", "phylop_score", "strand"))
    
    # scores calculated using old gastrula pekas! remap
    if (x == "CRE") {
      cons_dt <- copy(phastc_dt)
      cons_gr <- cons_dt[grepl("gastrula", peak)]
      cons_dt <- cons_dt[!grepl("gastrula", peak)]
      cons_gr <- makeGRangesFromDataFrame(cons_gr, keep.extra.columns = TRUE)
      maps_gr <- makeGRangesFromDataFrame(pks_map, keep.extra.columns = TRUE)
      maps_gr <- maps_gr[maps_gr$peak_gastrula != ""]
      ovl <- findOverlaps(query = cons_gr, subject = maps_gr)
      cons_gm <- cons_gr[queryHits(ovl)]
      cons_gm$peak <- maps_gr[subjectHits(ovl)]$peak_gastrula
      cons_gm <- as.data.table(cons_gm)[, width := NULL]
      phastc_dt <- rbindlist(list(
        adult = cons_dt, gastrula = cons_gm
      ), idcol = "stage", use.names = TRUE)
    }
    
    # unique ids for features
    phastc_dt[, type := x]
    if (all(phastc_dt$peak == ".")) {
      phastc_dt[, peak := paste(x, .I, sep = "_")]
    }
    
    phastc_dt
  }
)
phastc_dt <- rbindlist(phastc_list, use.names = TRUE, fill = TRUE)

# phylogeny
sps <- c("Scocal", "Edwardsiidae", "Actiniaria", "Acuticulata", "Exapal", "MetrDiad", "Metsen", "Dialin")
pdf(file.path(fig_dir, "phylo.pdf"), width = 7, height = 5)
tree_txt <- "(((Metsen:0.027873,Dialin:0.043936)MetrDiad:0.059724,Exapal:0.005483)Acuticulata:0.095358,(Nvec:0.02496,Scocal:0.023866)Edwardsiidae:0.174058)Actiniaria;"
tree_ape <- ape::read.tree(text = tree_txt)
plot(tree_ape)
ape::nodelabels(tree_ape$node.label)
dev.off()

# types of CREs
class_adult <- fread(file.path(adult_pks_dir, "annotation_promoters_full.tsv"))
class_gastr <- fread(file.path(gastr_pks_dir, "annotation_promoters_full.tsv"))
class_dt <- rbindlist(list(gastrula = class_gastr, adult = class_adult), idcol = "stage", use.names = TRUE)
class_dt <- unique(class_dt[, .(seqnames, start, end, peak, promoter, stage)])
# class_dt[grepl("AP", promoter), promoter := "AP"]
```

Parse phyloP scores

```{r}
phastc_dt_cre <- merge.data.table(
  class_dt[, .(stage, seqnames, start, end, peak, promoter)],
  phastc_dt[type == "CRE", .(stage, peak, phylop_score, type)],
  by = c("peak", "stage"), sort = FALSE
)
ph_dt <- rbindlist(list(phastc_dt_cre, phastc_dt[type != "CRE"]), use.names = TRUE, fill = TRUE)
ph_dt[!is.na(promoter), type := promoter][, promoter := NULL]
ph_dt[grep("AP", type), type := "AP"]
ph_dt[is.na(stage), stage := ""]
ph_dt[, strand := NULL]
ph_dt[type=="cds_gr", type := "CDS"]
ph_dt[type=="introns", type := "intron"]
ph_dt[, type := factor(type, levels = names(ph_cols))]

# binarize phyloP scores
ph_dt[, pval := 10^ (-1 * abs(phylop_score))]
ph_dt[, evol := "neutral"]
ph_dt[phylop_score < 0 & pval < 0.001, evol := "slow-evolving"]
ph_dt[phylop_score > 0 & pval < 0.001, evol := "acceleration"]
ph_dt[, evol := factor(evol, levels = c("neutral", "acceleration", "slow-evolving"))]
setorder(ph_dt, evol, type)
```

Plot phyloP scores

```{r}
ph_lb <- copy(ph_dt)[!type %in% c("transposons", "tfbs", "loops")]
ph_lb[type %in% names(class_cols), type := paste(type, stage)]
ph_lb[, type := factor(type, levels = names(ph_cols))]
ph_lb[, evol := paste(type, evol)]
ph_lb[, evol2 := paste0(evol, "2")]
ph_lb[, evol := factor(evol, levels = unique(ph_lb$evol))]
ph_lb <- ph_lb[, .N, .(type, evol, evol2)]
ph_lb[, perc := N / sum(N) * 100, type]
ph_lb[, label := sprintf("%.1f%%", perc)]

evol_cols <- structure(c(
  colorspace::darken(ph_cols, 0.4),
  unname(ph_cols),
  colorspace::lighten(ph_cols, 0.5)
), names = c(
  paste(names(ph_cols), "acceleration"),
  paste(names(ph_cols), "neutral"),
  paste(names(ph_cols), "slow-evolving")
))

gp_ph <- ggplot(
    ph_lb[!grepl("neutral", evol)],
    aes(type, perc, fill = evol, color = type)
  ) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_fill_manual(values = evol_cols) +
  scale_color_manual(values = structure(
    colorspace::darken(ph_cols, 0.5), names = names(ph_cols)
  )) +
  scale_y_continuous(
    expand = expansion(mult = c(0, 0.05))
  ) +
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    panel.grid.major.x = element_line(linewidth = 0.5),
    legend.position = "none"
  ) +
  labs(x = "", y = "% of regions")

# save
ggsave(
  file.path(fig_dir, "phylop_scores.pdf"),
  gp_ph,
  width = 4, height = 3
)
```

Parse phastcon scores

```{r}
# overlap phastcon scores with elements
class_gr <- makeGRangesFromDataFrame(class_dt, keep.extra.columns = TRUE)
phast_gr <- makeGRangesFromDataFrame(phast_dt, keep.extra.columns = TRUE)
gr_list <- c(
  "CRE" = class_gr,
  "CDS" = cds_gr,
  "UTR" = utr_gr,
  "intron" = intron_gr,
  "intergenic" = intergenic_gr
)
ps_list <- lapply(
  names(gr_list),
  function(x) {
    message(x)
    gr <- gr_list[[x]]
    gr$type <- x
    if (x == "CRE") {
      gr$type <- paste(gr$promoter, gr$stage)
      gr$name <- gr$peak
    } else if (x == "CDS") {
      gr$name <- gr$transcript_id
    } else {
      gr$name <- paste(x, seq_along(gr), sep ="_")
    }
    ovl <- findOverlaps(query = gr, subject = phast_gr, ignore.strand = TRUE)
    ovl_gr <- phast_gr[subjectHits(ovl)]
    mcols(ovl_gr)$type <- mcols(gr[queryHits(ovl)])$type
    mcols(ovl_gr)$name <- mcols(gr[queryHits(ovl)])$name
    ovl_dt <- as.data.table(ovl_gr)
    ovl_dt
  }
)
ps_dt <- rbindlist(ps_list, use.names= TRUE, fill = TRUE)

# # add conservation scores
# cons_class <- merge.data.table(
#   class_dt,
#   cons_dm[, .(stage, peak, phylop_score, Scocal)],
#   by = c("peak", "stage"),
#   sort = FALSE
# )
# setnames(cons_class, "Scocal", "phastcon_score")
```

Plot phastCon scores

```{r}
# data to plot
cons_plot_dt <- ps_dt[, .(score = max(score)), .(type, name)]
cons_plot_dt[, type := factor(type, levels = names( c(class_stage_cols, ovl_cols)))]
setorder(cons_plot_dt, type, -score)

# plot phastCon scores
gp_phastc_ovl <- ggplot(
    cons_plot_dt,
    aes(type, score, color = type, fill = type)
  ) +
  geom_boxplot(outlier.shape = NA) +
  scale_y_continuous(
    #trans = "log10"
    limits = c(0, 1), oob = scales::squish,
    breaks = c(0, 0.5, 1)
  ) +
  scale_fill_manual(values = c(class_stage_cols, ovl_cols)) +
  scale_color_manual(values = structure(
    colorspace::darken(c(class_stage_cols, ovl_cols), 0.5),
    names = c(names(class_stage_cols), names(ovl_cols))
  )) +
  theme(
    legend.position = "none",
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
    panel.grid.major.x = element_line(linewidth = 0.5),
  ) +
  labs(x = "", y = "phastCon score")

# save
ggsave(
  file.path(fig_dir, "phylop_phastcon_scores.pdf"),
  gp_phastc_ovl,
  width = 4, height = 3
)
```

### Motifs in promoters

#### TATA in SP

```{r}
# peaks
pks_class_dt <- unique(class_peaks[, .(seqnames, start, end, peak, promoter, stage)])
# pks_class_dt <- pks_class_dt[promoter != "NO"]
pks_class_dt <- unique(pks_class_dt)
pks_class_gr <- makeGRangesFromDataFrame(
  pks_class_dt,
  keep.extra.columns = TRUE
)

# outside of peaks
pko_class_dt <- unique(class_peaks[, .(seqnames, start, end, peak, gene, promoter, stage)])
genes <- fread("../../genome/Nvec_v4_merged_annotation_sort.bed")
genes <- genes[, .(V4, V6)]
setnames(genes, c("gene", "strand"))
pko_class_dt <- merge.data.table(pko_class_dt, genes, by = "gene", all.x = TRUE, sort = FALSE)
pko_class_gr <- makeGRangesFromDataFrame(
  pko_class_dt,
  keep.extra.columns = TRUE
)
pko_class_gr <- promoters(pko_class_gr, upstream = 500, downstream = 0)
pko_class_gr <- resize(pko_class_gr, width = 250, fix = "center")
pka_ovls <- findOverlaps(query = pko_class_gr, subject = pks_class_gr)
pks_ovls <- unique(pko_class_gr[queryHits(pka_ovls)]$peak)
pko_class_gr <- unique(pko_class_gr[!pko_class_gr$peak %in% pks_ovls])
pko_class_gr$promoter <- "NA"
pko_class_gr$peak <- paste0(pko_class_gr$peak, "_upstream")

# granges to scan motif
pks_all <- c(pks_class_gr, pko_class_gr)
pks_all$gene <- NULL
pks_all <- unique(pks_all)
pks_all_dt <- as.data.table(pks_all)
  
# TATA motif
mots_arc_mot <- read_meme(file.path(fig_dir, "MA0108.1.meme"))
mona_arc_lst <- mta_convert_umot_to_monalisa(list(mots_arc_mot))

# genome
genome <- Biostrings::readDNAStringSet("../../genome/Nvec_vc1.1_gDNA.fasta")
seqdt <- fread("../../genome/Nvec_vc1.1_gDNA.fasta.fai")[, 1:2]
seqlvl <- c(seqdt[[1]], "ENA|OW052000|OW052000.1")

# scanning motifs
mta_scores_mona <- mta_gw_motif_score_monalisa(
  motifs = mona_arc_lst,
  genome_object = genome,
  index_object = seqdt,
  bin_width = 250,
  subsample_fraction = 0.10,
  score_quantiles = c(0, 0.25, 0.5, 0.75, 0.95, 0.98, 0.99, 0.995, 0.999, 1.0),
  score_quantile_thr = 0.95,
  do_gw_scan = TRUE,
  given_gr = pks_all,
  nthreads = 16
)
# saveRDS(
#   mta_scores_mona,
#   file.path(fig_dir, "motif-scores-TATA-mona.rds")
# )

# map hits back to peaks
mta_hits <- mta_scores_mona$gw_scan
mta_cent <- narrow(mta_hits, start = width(mta_hits) / 2, width = 1)
mta_ovls <- findOverlaps(query = mta_hits, subject = pks_all)
mta_scor <- mta_hits[queryHits(mta_ovls)]
pmt_scor <- pks_all[subjectHits(mta_ovls)]
mcols(mta_scor) <- cbind(mcols(mta_scor), mcols(pmt_scor))
mta_data <- as.data.table(mta_scor)
mta_data[, max_motif_score := max(motif_score), motif]
mta_data <- unique(mta_data)
# fwrite(
#   mta_data,
#   file.path(fig_dir, "motif-scores-TATA-mona.tsv"),
#   sep = "\t"
# )
```

Per stage

```{r}
# parse results to be homer-like
tata_res <- merge.data.table(
  unique(pks_all_dt[, .(n_peaks_fg = .N), .(promoter, stage)]),
  unique(mta_data[, .(n_motif_fg = .N), .(promoter, stage)]),
  by = c("promoter", "stage")
)
for (s in c("adult", "gastrula")) {
  for (p in c("AP", "SP", "CP", "NO", "NA")) {
    bg_dts <- pks_all_dt[stage == s]
    bg_dts <- bg_dts[!peak %in% bg_dts[promoter %in% c(p, "NO", "NA")]$peak]
    bg_pks <- unique(bg_dts$peak)
    bg_hit <- unique(mta_data[stage == s & peak %in% bg_pks]$peak)
    tata_res[stage == s & promoter == p, n_peaks_bg := length(bg_pks)]
    tata_res[stage == s & promoter == p, n_motif_bg := length(bg_hit)]
  }
}

tata_res[, perc_motif_fg := n_motif_fg / n_peaks_fg]
tata_res[, perc_motif_bg := n_motif_bg / n_peaks_bg]

tata_res[, fc := perc_motif_fg / perc_motif_bg]
tata_res[, pval := binom.test(
  n_motif_fg, n_peaks_fg, p = n_motif_bg / n_peaks_bg, alternative = "greater"
)$p.value, by = c("promoter", "stage")]
tata_res[, logpval := -1 * log10(pval)]
tata_res[, qval := p.adjust(pval)]
tata_res

# plot
tata_res[, promoter := factor(promoter, levels = c("CP", "SP", "AP", "NO"))]

# plot motif logo
require(ggseqlogo)
gp_logo <- ggseqlogo(mots_arc_mot@motif) +
  theme_void()

# plot % of peaks with motif
require(ggsignif)
gp_perc <- ggplot(
    tata_res, aes(
      promoter, perc_motif_fg, label = sprintf("p=%.2f", pval),
      fill = promoter, color = promoter
    )
  ) +
  geom_bar(stat = "identity") +
  # geom_signif(
  #   comparisons = list(c("SP", "CP"), c("SP", "AP"), c("SP", "NO")),
  #   test = "wilcox.test", map_signif_level = TRUE
  # ) +
  geom_text(angle = 90, hjust = 1, color = "white", nudge_y = -0.001) +
  scale_fill_manual(values = class_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = names(class_cols)
  )) +
  scale_y_continuous(
    breaks = seq(0, 1, 0.01), labels = seq(0, 1, 0.01) * 100,
    expand = expansion(mult = c(0, 0.05))
  ) +
  facet_grid(. ~ stage) +
  theme(legend.position = "none") +
  labs(y = "% of peaks with motif", x = "", title = "TATA")

gp_tata <- gp_logo / gp_perc +
  plot_layout(heights = c(1, 2), guides = "collect")
ggsave(
  file.path(fig_dir, "motifs_perc_TATA_adult_gastrula_all.pdf"),
  gp_tata, width = 4.5, height = 4
)
```

Joint adult and gastrula

```{r}
# parse results to be homer-like
tata_res <- merge.data.table(
  unique(pks_all_dt[, .(peak, promoter)])[, .(n_peaks_fg = .N), .(promoter)],
  unique(mta_data[, .(peak, promoter)])[, .(n_motif_fg = .N), .(promoter)],
  by = "promoter", all.y = FALSE
)
for (p in c("AP", "SP", "CP", "NO", "NA")) {
  bg_dts <- pks_all_dt[!peak %in% pks_all_dt[promoter %in% c(p, "NO", "NA")]$peak]
  bg_pks <- unique(bg_dts$peak)
  bg_hit <- unique(mta_data[peak %in% bg_pks]$peak)
  tata_res[promoter == p, n_peaks_bg := length(bg_pks)]
  tata_res[promoter == p, n_motif_bg := length(bg_hit)]
}

tata_res[, perc_motif_fg := n_motif_fg / n_peaks_fg]
tata_res[, perc_motif_bg := n_motif_bg / n_peaks_bg]

tata_res[, fc := perc_motif_fg / perc_motif_bg]
tata_res[, pval := binom.test(n_motif_fg, n_peaks_fg, p = n_motif_bg / n_peaks_bg, alternative = "greater")$p.value, by = promoter]
tata_res[, logpval := -1 * log10(pval)]
tata_res[, qval := p.adjust(pval)]
tata_res

# plot
tata_res[, promoter := factor(promoter, levels = c("CP", "SP", "AP", "NO", "NA"))]

# plot motif logo
require(ggseqlogo)
gp_logo <- ggseqlogo(mots_arc_mot@motif) +
  theme_void()

# plot % of peaks with motif
require(ggsignif)
gp_perc <- ggplot(
    tata_res[promoter != "NA"], aes(
      promoter, perc_motif_fg, label = sprintf("p=%.2f", pval),
      fill = promoter, color = promoter
    )
  ) +
  geom_bar(stat = "identity") +
  # geom_signif(
  #   comparisons = list(c("SP", "CP"), c("SP", "AP"), c("SP", "NO")),
  #   test = "wilcox.test", map_signif_level = TRUE
  # ) +
  geom_text(angle = 90, hjust = 1, color = "white", nudge_y = -0.001) +
  scale_fill_manual(values = class_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = names(class_cols)
  )) +
  scale_y_continuous(
    limits = c(0, 0.32),
    breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1) * 100,
    expand = expansion(mult = c(0, 0.05))
  ) +
  theme(legend.position = "none") +
  labs(y = "% of peaks with motif", x = "", title = "TATA")

gp_tata <- gp_logo / gp_perc +
  plot_layout(heights = c(1, 2), guides = "collect")
ggsave(
  file.path(fig_dir, "motifs_perc_TATA.pdf"),
  gp_tata, width = 3, height = 4
)
```

#### YY1 in CP

```{r}
homer_dir_adult <- "~/cluster/aelek/proj/scATAC_nvec_v2/clustering/SEACells/Results/ArchRProj_Nvec_TSS4_frag200/ArchRProj/Homer/promoters"
homer_dir_gastr <- "~/cluster/aelek/proj/scATAC_nvec_gastrula/clustering/SEACells/Results/ArchRProj_Nvec_gastrula/ArchRProj/Homer/promoters"
if (stage %in% c("adult", "joint")) {
  homer_adult <- fread(file.path(homer_dir_adult, "allResuls.txt"))[, stage := "adult"]
  homer_dt <- homer_adult
}
if (stage %in% c("gastrula", "joint")) {
  homer_gastr <- fread(file.path(homer_dir_gastr, "allResuls.txt"))[, stage := "gastrula"]
  homer_dt <- homer_gastr
}
if (stage == "joint") {
  homer_dt <- rbindlist(list(homer_adult, homer_gastr))
}

# YY1 in CP
yy1_res <- homer_dt[grep("YY1", name)]
yy1_res[, promoter := str_remove(group, "-Homer")]
yy1_res <- yy1_res[order(-fc)][, .SD[1], promoter]

# plot motif logo
require(ggseqlogo)
mots_yy1 <- read_homer(file.path(fig_dir, "CP-Homer-known1.motif"))
gp_logo <- ggseqlogo(mots_yy1@motif) +
  theme_void()

# plot % of peaks with motif
require(ggsignif)
yy1_res[, promoter := factor(promoter, levels = c("CP", "SP", "AP", "NO"))]
gp_perc <- ggplot(
    yy1_res, aes(
      promoter, fg_perc, label = sprintf("p=%s", pval),
      fill = promoter, color = promoter
    )
  ) +
  geom_bar(stat = "identity") +
  # geom_signif(
  #   comparisons = list(c("SP", "CP"), c("SP", "AP"), c("SP", "NO")),
  #   test = "wilcox.test", map_signif_level = TRUE
  # ) +
  geom_text(angle = 90, hjust = 1, color = "white", nudge_y = -0.01) +
  scale_fill_manual(values = class_cols, drop = FALSE) +
  scale_color_manual(values = structure(
    colorspace::darken(class_cols, 0.5),
    names = names(class_cols)
  )) +
  scale_y_continuous(
    limits = c(0, 0.32),
    breaks = seq(0, 1, 0.1), labels = seq(0, 1, 0.1) * 100,
    expand = expansion(mult = c(0, 0.05))
  ) +
  theme(legend.position = "none") +
  labs(y = "% of peaks with motif", x = "", title = "YY1")

gp_yy1 <- gp_logo / gp_perc +
  plot_layout(heights = c(1, 2), guides = "collect")
ggsave(
  file.path(fig_dir, "motifs_perc_YY1.pdf"),
  gp_yy1, width = 3, height = 4
)
```

## Peaks dynamics

Gastrula-to-adult on-off/off-on dynamics (from defined sets of accessible genes in each stage/shared). To explain CRE pleiotropy and dynamics.

First look at which genes are accessible per stage.

```{r}
# genes accessibility (i.e. gene scores)
gene_sco <- readRDS(file.path(
  adult_dir, "Metacells", "cell_type", "gene_scores_cell_type.rds"
))
colnames(gene_sco) <- str_replace_all(colnames(gene_sco), "\\.", "_")
colnames(gene_sco) <- str_replace_all(colnames(gene_sco), cell_type_rename)
gene_sco_dt <- melt.data.table(
  as.data.table(as.matrix(gene_sco), keep.rownames = "gene"),
  id.vars = "gene", variable.name = "cell_type", value.name = "gene_score"
)
gene_sco_dt[, stage := str_extract(cell_type, "adult|gastrula")]

# select accessible genes in each stage
cols <- c("cell_type", "gene_score")
# genes strongly accessible in one cell type
gene_sco_max_ct <- gene_sco_dt[order(gene, stage, -gene_score)][, .SD[1], .(gene, stage)]
setnames(gene_sco_max_ct, cols, paste0(cols, "_max"))
# genes accessible across all cell types
gene_sco_min_ct <- gene_sco_dt[order(gene, stage, gene_score)][, .SD[1], .(gene, stage)]
setnames(gene_sco_min_ct, cols, paste0(cols, "_min"))
# combine and filter
gene_access <- merge.data.table(
  gene_sco_max_ct, gene_sco_min_ct, by = c("gene", "stage")
)
min_thrs <- 0.9
max_thrs <- 1.2
gene_sco_dist <- ggplot(
    melt.data.table(
      gene_access[, .(gene, stage, gene_score_max, gene_score_min)],
      id.vars = c("gene", "stage"),
      variable.name = "variable", value.name = "gene_score"
    ),
    aes(
      gene_score,
      color = stage,
      linetype = variable
    )
  ) +
  geom_density() +
  # geom_vline(
  #   data = data.table(variable = c(min_thrs, max_thrs), x = c(min_thrs, max_thrs)),
  #   aes(xintercept = x)
  # ) +
  # facet_grid(variable ~ .) +
  scale_x_continuous(limits = c(0, 2), oob = squish) +
  scale_color_viridis_d()
ggsave(file.path(fig_dir, "gene_scores_distribution.pdf"), width = 8, height = 5)
gene_access <- gene_access[gene_score_max > max_thrs | gene_score_min > min_thrs]

# summarize
gene_access[, stages := .N, gene]
gene_acc_dt <- unique(
  gene_access[, .(gene, stage, stages)][stages == 2, stage := "both"][, stages := NULL]
)
```

Euler diagram of genes accessibility overlap

```{r}
gns_ovl_dt <- data.table(
  gene = gene_acc_dt$gene,
  adult = gene_acc_dt$stage == "adult",
  gastrula = gene_acc_dt$stage == "gastrula"
)
gns_ovl_dt[gene %in% gene_acc_dt[stage == "both"]$gene, c("adult", "gastrula") := TRUE]
gns_ovl_mt <- as.matrix(gns_ovl_dt[, -1])

require(eulerr)
fit <- euler(gns_ovl_mt)
p1 <- plot(
  fit,
  quantities = TRUE,
  fill = stage_cols,
  labels = list(font = 4)
)
pdf(
  file.path(fig_dir, "genes_adult_gastrula_ovl.pdf"),
  width = 4, height = 2
)
print(p1)
dev.off()
```

Look at which genes are expressed per stage.

```{r}
adult_exp <- rowSums(mat_adult@mat)
gastr_exp <- rowSums(mat_gastr@mat)
adult_exp_dt <- data.table(gene = names(adult_exp), adult_exp)
gastr_exp_dt <- data.table(gene = names(gastr_exp), gastr_exp)
exp_dt <- merge.data.table(adult_exp_dt, gastr_exp_dt, by = "gene", all = TRUE)
exp_dt <- exp_dt[!grepl("orphan", gene)]
exp_qn <- preprocessCore::normalize.quantiles(as.matrix(exp_dt[, -1]))
exp_dt[, adult_exp_qnorm := exp_qn[, 1]]
exp_dt[, gastr_exp_qnorm := exp_qn[, 2]]
exp_mdt <- melt.data.table(
  exp_dt, id.vars = c("gene"), variable.name = "stage", value.name = "umi"
)
exp_mdt[, norm := grepl("norm", stage)]
exp_mdt[, stage := str_remove(stage, "_exp")]
exp_mdt[, stage := str_remove(stage, "_qnorm")]
exp_mdt[stage == "gastr", stage := "gastrula"]

# plot
gene_exp_dist <- ggplot(exp_mdt, aes(log2(umi), color = stage)) +
  geom_density() + scale_color_manual(values = stage_cols) + facet_grid(norm ~ .)
ggsave(file.path(fig_dir, "gene_expression_distribution.pdf"), gene_exp_dist, width = 8, height = 5)
gene_exp_dt <- exp_mdt[norm == TRUE & umi > 100][, .(gene, stage)]

# summarize
gene_exp_dt[, stages := .N, .(gene)]
gene_exp_dt <- unique(
  gene_exp_dt[, .(gene, stage, stages)][stages == 2, stage := "both"][, stages := NULL]
)

# plot scatter
min_thrs_umi <- 10
max_thrs_umi <- 10
thrs_umi <- paste(min_thrs_umi, max_thrs_umi, collapse = "_")
if (min_thrs_umi == max_thrs_umi) thrs_umi <- min_thrs_umi
exp_dt[, ratio := gastr_exp / adult_exp]
exp_dt[, category := "other"]
exp_dt[ratio < 2 & ratio > 0.5 & gastr_exp > 1e2 & adult_exp > 1e2, category := "both"]
exp_dt[ratio > 4 & gastr_exp > max_thrs_umi & adult_exp < min_thrs_umi, category := "gastrula"]
exp_dt[ratio < 0.2 & adult_exp > max_thrs_umi & gastr_exp < min_thrs_umi, category := "adult"]
# exp_dt[!category %in% c("adult", "gastrula"), category := "both"]
exp_dt[, .N, category]
gene_exp_scat <- ggplot(exp_dt, aes(gastr_exp, adult_exp, color = category)) +
  ggrastr::geom_point_rast(data = exp_dt[category == "other"]) +
  ggrastr::geom_point_rast(data = exp_dt[category != "other"]) +
  scale_x_continuous(trans = "log10") +
  scale_y_continuous(trans = "log10") +
  scale_color_manual(values = c(stage_cols, "other" = "grey")) +
  labs(title = sprintf("thrs %s UMI", thrs_umi)) +
  coord_fixed()
ggsave(
  file.path(fig_dir, sprintf("gene_expression_scatterplot_%s.pdf", thrs_umi)),
  gene_exp_scat, width = 8, height = 6
)
gene_exp_dt <- unique(exp_dt[category != "other"][, .(gene, category)])
setnames(gene_exp_dt, "category", "stage")

```

Euler diagram of genes expression overlap

```{r}
gns_ovl_dt <- data.table(
  gene = gene_exp_dt$gene,
  adult = gene_exp_dt$stage == "adult",
  gastrula = gene_exp_dt$stage == "gastrula"
)
gns_ovl_dt[gene %in% gene_exp_dt[stage == "both"]$gene, c("adult", "gastrula") := TRUE]
gns_ovl_mt <- as.matrix(gns_ovl_dt[, -1])

require(eulerr)
fit <- euler(gns_ovl_mt)
p1 <- plot(
  fit,
  quantities = TRUE,
  fill = stage_cols,
  labels = list(font = 4)
)
pdf(
  file.path(fig_dir, sprintf("genes_adult_gastrula_exp_ovl_%s.pdf", thrs_umi)),
  width = 4, height = 2
)
print(p1)
dev.off()
```

For peaks associated to expressed genes, look at accessibility dynamics

```{r}
# peak to gene assignment
adult_pks <- fread(file.path(adult_dir, "Promoters", "scATAC_reduced_peaks_gene_assignment_coaccess.tsv"))
adult_pks <- unique(adult_pks[, .(peak, gene)])
setnames(adult_pks, "peak", "peak_adult")
gastr_pks <- fread(file.path(gastr_dir, "Peaks", "scATAC_reduced_peaks_gene_assignment_coaccess.tsv"))
gastr_pks <- unique(gastr_pks[, .(peak, gene)])
setnames(gastr_pks, "peak", "peak_gastrula")

# peaks mapping
pks_map <- fread(
  file.path(adult_dir, "Peaks", "Peaks_cell_type_mapped.tsv")
)[, .(peak, peak_adult, peak_gastrula)]
pks_map_adult <- merge.data.table(pks_map, adult_pks, by = "peak_adult", sort = FALSE)
pks_map_adult <- unique(pks_map_adult[, .(gene, peak)])
pks_map_adult[, stage := "adult"]
pks_map_gastr <- merge.data.table(pks_map, gastr_pks, by = "peak_gastrula", sort = FALSE)
pks_map_gastr <- unique(pks_map_gastr[, .(gene, peak)])
pks_map_gastr[, stage := "gastrula"]
peak_access <- rbindlist(list(pks_map_adult, pks_map_gastr))

# summarize
peak_access[, stages := .N, .(gene, peak)]
peak_acc_dt <- unique(
  peak_access[, .(gene, peak, stage, stages)][stages == 2, stage := "both"][, stages := NULL]
)

# peaks accessibility values (not used for now)
# fp_clusters <- readRDS(file.path(
#     adult_dir, "Clustering", "Footprint_Adult_Gastrula_Peaks_cell_type_qnorm.rds"
# ))
# colnames(fp_clusters) <- str_replace(colnames(fp_clusters), "__", "_")
# colnames(fp_clusters) <- str_replace_all(colnames(fp_clusters), cell_type_rename)
# peak_acc_dt <- melt.data.table(
#   as.data.table(as.matrix(fp_clusters), keep.rownames = "peak"),
#   id.vars = "peak", variable.name = "cell_type", value.name = "peak_access"
# )
# peak_acc_dt[, stage := str_extract(cell_type, "adult|gastrula")]
```

Dynamics of peaks

```{r}
# gene expression and peak accessibility
gene_exp_dt_ <- copy(gene_exp_dt)
peak_acc_dt_ <- copy(peak_acc_dt)
setnames(gene_exp_dt_, "stage", "gene_stage")
setnames(peak_acc_dt_, "stage", "peak_stage")
dynm_acc_dt <- merge.data.table(gene_exp_dt_, peak_acc_dt_, by = "gene")

# promoter class across stages
peak_class <- unique(class_peaks[, .(stage, peak, promoter)])
peak_class[, stages := .N, .(promoter, peak)]
peak_class <- unique(
  peak_class[stages == 2, stage := "both"][, stages := NULL]
)
setnames(peak_class, "stage", "peak_stage")
dynm_acc_dt <- merge.data.table(dynm_acc_dt, peak_class, by = c("peak", "peak_stage"))

# plot dynamics
dynm_acc_dt[, gene_stage := factor(gene_stage, levels = c("adult", "both", "gastrula"))]
dynm_acc_dt[, peak_stage := factor(peak_stage, levels = c("adult", "both", "gastrula"))]
gp_dynm <- ggplot(dynm_acc_dt[promoter == "NO"], aes(gene_stage, fill = peak_stage)) +
  geom_bar(position = "fill", color = "white") +
  scale_fill_manual(
    values = c(adult = "#fdac44", gastrula = "#fde7ab", both = "#fed38d"),
    name = "peak accessible in"
  ) +
  # scale_y_log10() +
  # facet_grid(. ~ promoter) +
  labs(x = "gene expressed in", y = "number of peaks", title = sprintf("thrs %s UMI", thrs_umi))
ggsave(
  file.path(fig_dir, sprintf("dynamics_peak_%s.pdf", thrs_umi)),
  gp_dynm, width = 6, height = 4
)
```

# Figure 3

## Motif enrichment - TF expression dotplot

```{r}
# data
adult_dt <- fread(file.path(
  adult_dir, "Archetypes",
  "archetype-motif-enrichment-gene-expression-accessibility.tsv.gz"
), sep = "\t")

gastr_dt <- fread(file.path(
  gastr_dir, "Motifs",
  "archetype-motif-enrichment-gene-expression-accessibility.tsv.gz"
))
cols <- intersect(colnames(adult_dt), colnames(gastr_dt))
agg_dt <- rbindlist(list(
    adult = adult_dt[, ..cols],
    gastrula = gastr_dt[, ..cols]
), idcol = "stage")

# genes both in adult and gastrula
select_genes <- unique(agg_dt[, .(gene, stage)])[, .N, gene][N == 2]$gene
agg_dt <- agg_dt[gene %in% select_genes]

# select tfs with variable expression across cell types
var_gns_exp <- unique(agg_dt[expression >= 1.5]$gene)
var_dt <- agg_dt[gene %in% var_gns_exp]

# select motifs
sign_arch <- var_dt[order(archetype_padj), .SD[1], archetype_name][
  archetype_padj < 0.01]$archetype_name
top_dt <- var_dt[archetype_name %in% unique(c(sign_arch))]

# gene annotation
top_dt_an <- merge.data.table(
  top_dt, tfan[, .SD[1], gene], by = "gene",
  all.x = TRUE, sort = FALSE
)
top_dt_an[name == "", name := str_remove(
  str_remove(og, "tfs\\."), "HG\\d*\\.\\d*\\:*"
)]
top_dt_an[, name := substr(name, 1, 25)]

# golden markers
marks <- fread("../annotation/golden-marks-230116.tsv", select = 1:3)
setnames(marks, c("name", "gene", "cell_type"))
genes <- marks[, setNames(name, gene)]
top_dt_an[gene %in% names(genes), name := genes[gene]]

# order cell types
cell_types <- names(ct_cols)
top_dt_an[, cell_type := str_replace_all(cell_type, "\\.", "_")]
top_dt_an[
    cell_type == "cnidocyte" & stage == "gastrula", cell_type := "cnidocyte_gastrula"
]
top_dt_an[
    cell_type == "gland_mucous" & stage == "gastrula", cell_type := "gland_gastrula"
]
top_dt_an[, cell_type := factor(cell_type, levels = cell_types)]

# order genes and motifs
top_dt_an[, archetype_num := str_extract(archetype_name, "ARCH\\d+")]
top_dt_an[, id := paste(name, archetype_num, gene, sep = " | ")]
top_dc <- dcast.data.table(
  unique(top_dt_an[, .(id, cell_type, archetype_padj)])[
    order(-archetype_padj), .SD[1], .(id, cell_type)],
  id ~ cell_type, value.var = "archetype_padj"
)
top_mt <- as.matrix(top_dc[, -1])
rownames(top_mt) <- top_dc[[1]]
top_mt[is.na(top_mt)] <- 0
top_co <- apply(top_mt, 1, which.min)
top_mt_ord <- unlist(sapply(
  unique(top_co), function(x) {
    m <- top_mt[top_co == x, x]
    y <- order(m, decreasing = TRUE)
    names(m)[y]
  }
))
top_co <- apply(top_mt[top_mt_ord, ], 1, which.min)

# order
plot_dt <- top_dt_an[id %in% top_mt_ord]
plot_dt[, id := factor(id, levels = rev(top_mt_ord))]
setorder(plot_dt, -id)
plot_dt[, cluster := top_co[as.character(id)]]
plot_dt[, cluster := factor(cluster)]
setorder(plot_dt, cluster)
plot_dt[, id := factor(id, levels = rev(unique(plot_dt$id)))]
setorder(plot_dt, id)

# one gene of the same annotation
select_ids <- as.character(unique(
    plot_dt[order(-expression)][, .SD[1], .(name)]$id
))
plot_dt <- plot_dt[id %in% select_ids]
plot_dt[, name := factor(name, levels = unique(plot_dt$name))]

# plot values
plot_dt[, archetype_padj_scaled := -1 * log10(archetype_padj)]
plot_dt[, archetype_padj_scaled := pmin(archetype_padj_scaled, 80)]
plot_dt[, archetype_fc_scaled := pmin(archetype_fc, 8)]
plot_dt[, expression_fc_scaled := pmin(expression, 6)]


# subset
incl <- readLines(
    file.path(fig_dir, "TF_motif_enrichment_expression_hetamap.txt")
)
plot_dt <- plot_dt[name %in% incl]

# plot
gp_acc_exp <- ggplot(
    plot_dt,
    aes(cell_type, name)
  ) +
  geom_point(
    aes(size = archetype_padj_scaled, fill = expression_fc_scaled),
    shape = 21
  ) +
  #facet_grid(cluster ~ ., scales = "free", space = "free", drop = TRUE) +
  scale_fill_gradientn(
    name = "expression\nfold change",
    breaks = c(0, 2, 4, 6, 8),
    colours = c(
      "gray99", "#ffd195", "orange", "orangered2",
      "#a71414", "#68093d", "#470447"
    )
  ) +
  scale_size_continuous(
    name = "motif enrichment\n-log10 adj pval",
    breaks = c(0, 20, 40, 60),
    range = c(0, 6)
  ) +
  theme(
    panel.grid.major = element_line(linewidth = 0.25),
    axis.text.y = element_text(size = 7),
    axis.text.x = element_text(size = 7, angle = 90, vjust = 0.5, hjust = 1),
    axis.title = element_blank()
  )

ggsave(
  file.path(fig_dir, "TFs_motif_enrichment_expression_select.pdf"),
  gp_acc_exp,
  width = 6.2, height = 7
  #width = 6, height = 20
)

```

## TF activity - TF expression dotplot

```{r}
#  TF-target genes data
data_dir <- file.path(adult_dir, "insilicoChIP")
lvl <- "metacell"
thrs <- 0.1
itr <- "03"
exp <- "umifrac"
id <- "genes_exp_FC2_acc_FC4_spearman"
exp <- "fc"
acc <- "access"
thr_exp <- 1.4
thr_q_acc <- 0.4
chr_thrs <- 4

# filtered chromVAR zscore data
targets_dt <- fread(file.path(data_dir, lvl, itr, sprintf(
    "grn_tf_target_genes_expression_%s_%s_accessibility_%s_%s_chromvar_%s.tsv.gz",
    exp, thr_exp, acc, thr_q_acc, chr_thrs
)))

# markers
marks <- fread("../annotation/golden-marks-231124.tsv", select = 1:3)
setnames(marks, c("name", "gene", "cell_type"))
genes <- marks[, setNames(name, gene)]

# select TFs with activity
act_dt <- unique(targets_dt[, .(
    gene, og, pfam, label, motif, cell_type, stage,
    expression_fc, zscore
)])
act_dt[, cell_type_stage := paste(cell_type, stage, sep = "_")]
setnames(act_dt, c("motif", "label"), c("archetype_name", "name"))
top_tfs <- unique(act_dt[zscore > chr_thrs & expression_fc > thr_exp]$gene)
top_dt <- act_dt[gene %in% c(top_tfs, genes)]

# order cell types
cell_types <- names(ct_cols)
top_dt[, cell_type := factor(cell_type, levels = cell_types)]
top_dt[, stage := factor(stage, levels = c("adult", "gastrula"))]
setorder(top_dt, cell_type, stage)
top_dt[, cell_type_stage := factor(cell_type_stage, levels = unique(top_dt$cell_type_stage))]

# order genes and motifs
top_dt[, archetype_num := str_extract(archetype_name, "ARCH\\d+")]
top_dt[, id := paste(name, archetype_num, gene, sep = " | ")]
top_dc <- dcast.data.table(
  unique(top_dt[, .(id, cell_type, zscore)])[
    order(-zscore), .SD[1], .(id, cell_type)],
  id ~ cell_type, value.var = "zscore"
)
top_mt <- as.matrix(top_dc[, -1])
rownames(top_mt) <- top_dc[[1]]
top_mt[is.na(top_mt)] <- 0
top_co <- apply(top_mt, 1, which.max)
top_mt_ord <- unlist(sapply(
  unique(top_co), function(x) {
    m <- top_mt[top_co == x, x]
    y <- order(m, decreasing = TRUE)
    names(m)[y]
  }
))
top_co <- apply(top_mt[top_mt_ord, ], 1, which.max)

# order
plot_dt <- top_dt[id %in% top_mt_ord]
plot_dt[, id := factor(id, levels = rev(top_mt_ord))]
setorder(plot_dt, -id)
plot_dt[, cluster := top_co[as.character(id)]]
plot_dt[, cluster := factor(cluster)]
setorder(plot_dt, cluster)
plot_dt[, id := factor(id, levels = rev(unique(plot_dt$id)))]
setorder(plot_dt, id)

# one gene of the same annotation
select_ids <- as.character(unique(
    plot_dt[order(-expression_fc)][, .SD[1], .(name)]$id
))
plot_dt <- plot_dt[id %in% select_ids]
plot_dt[, name := factor(name, levels = unique(plot_dt$name))]

# plot values
plot_dt[, zscore_scaled := pmin(zscore, 25)]
plot_dt[, expression_fc_scaled := pmin(expression_fc, 6)]

# plot
gp_acc_exp <- ggplot(
    plot_dt,
    aes(cell_type_stage, name)
  ) +
  geom_point(
    aes(size = zscore_scaled, fill = expression_fc_scaled),
    shape = 21
  ) +
  scale_y_discrete(
    breaks = plot_dt$name,
    labels = plot_dt$id
  ) +
  scale_fill_gradientn(
    name = "expression\nfold change",
    breaks = c(0, 2, 4, 6, 8),
    colours = c(
      "#fff3e3", "#ffd195", "orange", "orangered2",
      "#a71414", "#68093d", "#470447"
    )
  ) +
  scale_size_continuous(
    name = "TF activity",
    breaks = c(0, 5, 10, 15, 20, 25, 30),
    range = c(0, 5)
  ) +
  theme(
    panel.grid.major = element_line(linewidth = 0.25),
    axis.line = element_blank(),
    panel.border = element_rect(fill = NA, color = "black"),
    axis.text.y = element_text(size = 7),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.title = element_blank(),
    plot.margin = unit(c(0, 0, 0, 0), "cm")
  )

gp_ct_bar <- ggplot(
        plot_dt[, .N, .(cell_type_stage, cell_type)],
        aes(cell_type_stage, 1, fill = cell_type)
    ) +
    geom_bar(stat = "identity", width = 1) +
    scale_y_continuous(expand = c(0, 0)) +
    scale_fill_manual(values = ct_cols) +
    theme_blank() +
    theme(
        legend.position = "none",
        axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5, hjust = 1),
        plot.margin = unit(c(0, 0, 0, 0), "cm")
    )

gp_acc_exp_ann <- gp_acc_exp / gp_ct_bar + plot_layout(heights = c(200, 1))

ggsave(
  file.path(fig_dir, "TFs_dotmap_activity_expression.pdf"),
  gp_acc_exp_ann,
  width = 10, height = 22
)


# plot with highlighting only markers
# plot_dt_subset <- plot_dt[
#   gene %in% unique(c(
#     plot_dt[gene %in% names(genes)]$gene,
#     plot_dt[zscore > 5 & expression_fc > 2]$gene
#   ))
# ]
plot_dt_subset <-plot_dt[
  gene %in% unique(
    plot_dt[order(cell_type, -zscore)][, .SD[1:pmin(15, .N)], cell_type]$gene
  )
]

plot_dt_subset[, label := name]
plot_dt_subset[gene %in% names(genes), label := genes[gene]]
plot_dt_subset[gene %in% plot_dt[zscore > 10 & expression_fc > 4]$gene, label := name]
gp_acc_exp_sub <- ggplot(
    plot_dt_subset,
    aes(cell_type_stage, name)
  ) +
  geom_point(
    aes(size = zscore_scaled, fill = expression_fc_scaled),
    shape = 21
  ) +
  scale_y_discrete(
    breaks = plot_dt_subset$name,
    labels = plot_dt_subset$label
  ) +
  scale_fill_gradientn(
    name = "expression\nfold change",
    breaks = c(0, 2, 4, 6, 8),
    colours = c(
      "gray99", "#ffd195", "orange", "orangered2",
      "#a71414", "#68093d", "#470447"
    )
  ) +
  labs(y = sprintf("%s TFs", length(unique(plot_dt_subset$name)))) +
  scale_size_continuous(
    name = "TF activity",
    breaks = c(0, 5, 10, 15, 20, 25, 30),
    range = c(0, 5)
  ) +
  theme(
    panel.grid.major = element_line(linewidth = 0.25),
    axis.line = element_blank(),
    panel.border = element_rect(fill = NA, color = "black"),
    axis.text.y = element_text(size = 8),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_text(size = 8),
    plot.margin = unit(c(0, 0, 0, 0), "cm")
  )

gp_acc_exp_ann <- gp_acc_exp_sub / gp_ct_bar + plot_layout(heights = c(100, 1))


ggsave(
  file.path(fig_dir, "TFs_dotmap_activity_expression_subset.pdf"),
  gp_acc_exp_ann,
  width = 8, height = 16
)

```

## ChromVAR Z scores vs TF expression scatter plot

```{r}
# chromvar data
data_dir <- file.path(adult_dir, "insilicoChIP")
lvl <- "metacell"
exp <- "fc"
itr <- "03"
id <- "genes_exp_FC2_acc_FC4_spearman"
thrs <- 0.1
exp_chromvar_dt <- fread(file.path(
    data_dir, lvl, itr,
    sprintf("gene_expression_%s_chromVAR_%s.tsv.gz", exp, id)
))
exp_chromvar_dt[, cell_type := str_replace_all(cell_type, cell_type_rename)]
exp_chromvar_dt[, cell_type := factor(cell_type, levels = names(ct_cols))]

# chromvar threshold
chr_thrs <- 6

# per cell type expression and accessibility threshold
thr_q_exp <- 0.4
thr_q_acc <- 0.4
data_thrs <- fread(file.path(
    data_dir, "cell_type", itr, sprintf(
        "qthreshold_%s_expression_%s_accessibility_%s.tsv",
        id, thr_q_exp, thr_q_acc
    )
))
data_thrs[, exp_thrs := data_thrs[[sprintf("thr_exp_%s", exp)]]]
data_thrs[, cell_type := str_replace_all(cell_type, cell_type_rename)]
data_thrs[, cell_type := factor(cell_type, levels = names(ct_cols))]


# genes
marks <- fread("../annotation/golden-marks-231124.tsv", select = 1:3)
setnames(marks, c("name_old", "gene", "cell_type"))
marker_genes <- marks[, setNames(gene, name_old)]
marker_genes <- marks[, setNames(gene, name_old)]
marker_label <- as_labeller(function(g){
  nm <- structure(
    names(marker_genes),
    names = marker_genes
  )[g]
  sprintf("%s\n%s", nm, str_remove(g, "Nvec_vc1.1_"))
})
subset_genes <- c(
  # cnidocyt
  "PaxA", "Pou4", "Klf13", "XBP1", "BHMG1",
  # ecto_pharynx / ectoderm / ecto_aboral
  "Brachyury", "FoxB", "NvSox1", "SoxB2/Sox3", "Hes2",
  # ecto aboral / ectoderm
  "Six3/6", "FoxQ2a", "Anthox1/Ax1",
  # EMS / EMS ecto boundary
  "Six4/5", "SnailA", "Hh1", "NVHD033-ANTP", "Lbx",
  # gastro / PM / CM
  "Tbx1/10-1", "Tbx1/10-2", "Hand2", "NvSoxF1",
  # muscle
  "MyHC-st", "VAx-EMX-Like", # "Nem64", "Nem24", "Nem7",
  # digestive filaments
  "FoxA", "Rfx4/6/8",
  # epidermis
  "FoxQ2d", "PAX3/7", "ETV6/7",
  # progenitors
  "Myc2", "Ath-like",
  # neuron GATA/Islet
  "Islet", "GATA", "OtxB", "OtxC", "Pea3/Ets",
  # neuron Pou4/FoxL2
  "NvSoxA", "NvSoxB(2)", "Sp6-9", "FoxL2", "Insm1", "AshA", "Grainyhead", "Zic-C",
  # gland
  "NOTO", "Pou3F1/2/3/4", "CREB3", "PTF1a", "RFX1/2/3", "Rfx4"
)
subset_genes <- marks[match(subset_genes, name_old)]$gene
plot_dt <- exp_chromvar_dt[gene %in% subset_genes]
plot_dt[, gene := factor(gene, levels = subset_genes)]

# aggregate metacells per cell type
plot_dt[, zscore := pmax(0, zscore)]
if (exp == "umifrac") {
    plot_dt[, ':='(
        zscore = mean(zscore, na.rm = TRUE),
        expression = mean(expression, na.rm = TRUE)
    ), .(id, gene, cell_type)]
} else if (exp == "fc") {
    plot_dt[, ':='(
        zscore = exp(mean(log(zscore), na.rm = TRUE)),
        expression = exp(mean(log(expression), na.rm = TRUE))
    ), .(id, gene, cell_type)]
}
plot_dt[, metacell := NULL]
plot_dt <- unique(plot_dt)
plot_dt[, cell_type_thrs := ""]
plot_dt <- merge.data.table(
    plot_dt, data_thrs[, .(cell_type, exp_thrs)],
    by = "cell_type", all.x = TRUE, sort = FALSE
)
plot_dt[expression > exp_thrs & zscore > chr_thrs,
    cell_type_thrs := cell_type
]
```

Scatterplot

```{r}

# plot
gp_scat <- ggplot(
        plot_dt, aes(
            expression, zscore, label = cell_type,
            fill = cell_type, color = cell_type,
            shape = stage
        )
    ) +
    geom_point(size = 2) +
    ggrepel::geom_text_repel(size = 2, alpha = 0.6) +
    # geom_smooth(method = "lm", se = FALSE, color = "#383838") +
    # geom_hline(
    #     yintercept = chr_thrs, linetype = 3
    # ) +
    #geom_vline(
    #    data = data_thrs,
    #    aes(xintercept = exp_thrs, color = cell_type),
    #    inherit.aes = FALSE, linetype = 3
    #) +
    scale_fill_manual(values = ct_cols) +
    scale_color_manual(
      values = c(
        structure(
          colorspace::darken(ct_cols, 0.5),
          names = names(ct_cols)
        ),
        structure(
          colorspace::lighten(ct_cols, 0.5),
          names = paste0(names(ct_cols), "_sc")
        )
      )
    ) +
    scale_x_continuous(limits = c(0, NA)) +
    scale_shape_manual(
        values = c("adult" = 21, "gastrula" = 24)
    ) +
  facet_wrap(
    "gene", ncol = 5,
    scales = "free", labeller = marker_label
  ) +
    labs(
        x = sprintf("TF expression (%s)", exp),
        y = "TF activity"
    ) +
    theme(
      strip.text = element_text(size = 8),
      axis.text = element_text(size = 8),
      axis.title = element_text(size = 8),
      legend.position = "none"
    )

ggsave(
    file.path(
        fig_dir,
        sprintf("TFs_scatter_activity_expression_%s.pdf", exp)
    ),
    width = 8, height = 16
)
```

Barplot

```{r}

```
## GRNs

```{r}
data_dir <- file.path(adult_dir, "insilicoChIP")
lvl <- "metacell"
thrs <- 0.1
itr <- "03"
exp <- "umifrac"
id <- "genes_exp_FC2_acc_FC4_spearman"
```

### Cell type POV

For global network

-   distribution of TF inputs per target gene
-   distribution of target genes per TF

```{r}
grn_dt <- readRDS(file.path(
    data_dir, lvl, itr, sprintf("insilico-chip-grn-%s.rds", id)
))
grn_dt <- unique(grn_dt[score > thrs])

# number of target genes per TF per cell type
dt_tf_gen <- unique(
  grn_dt[, .(gene, target_gene)]
)
tfs_target_self <- unique(dt_tf_gen[gene == target_gene]$gene)
dt_tf_gen[, target_self := gene %in% tfs_target_self]
dt_tf_gen <- dt_tf_gen[, .N, .(gene, target_self)]
dt_tf_gen[, median(N), target_self]

# plot
gp_tf_gen <- ggplot(
        dt_tf_gen, aes(
          target_self, N
        )
    ) +
    ggbeeswarm::geom_quasirandom(
      aes(shape = target_self),
      size = 1, alpha = 1, fill = "#8a8a8a", color = "#3d3d3d"
    ) +
    geom_boxplot(outlier.shape = NA, alpha = 0.5) +
    scale_x_discrete(drop = TRUE) +
    scale_shape_manual(values = c("TRUE" = 25, "FALSE" = 21)) +
    scale_y_continuous(
      expand = expansion(mult = c(0.1, 0.1)),
      trans = "log10"
    ) +
    guides(
      shape = guide_legend(override.aes = list(size = 5))
    ) +
    theme(
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank(),
      axis.title.x = element_blank()
    ) +
    labs(y = "target genes\nper TF")


# number of TFs per target gene
dt_tg_tfs <- unique(
  grn_dt[, .(gene, target_gene)]
)
tfs_target_gene <- unique(dt_tg_tfs[gene == target_gene]$gene)
dt_tg_tfs[, target_TF := gene %in% tfs_target_gene]
dt_tg_tfs <- dt_tg_tfs[, .N, .(target_gene, target_TF)]
median(dt_tg_tfs$N) # 3

# plot
gp_tg_tfs <- ggplot(
        dt_tg_tfs, aes(
          target_TF, N
        )
    ) +
    ggbeeswarm::geom_quasirandom(
      aes(shape = target_TF),
      size = 1, alpha = 1, fill = "#8a8a8a", color = "#3d3d3d"
    ) +
    geom_boxplot(outlier.shape = NA, alpha = 0.5) +
    scale_x_discrete(drop = TRUE) +
    scale_shape_manual(values = c("TRUE" = 24, "FALSE" = 22)) +
    scale_y_continuous(
      expand = expansion(mult = c(0.1, 0.1)),
      trans = "log2"
    ) +
    guides(shape = guide_legend(override.aes = list(size = 5))) +
    theme(
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank(),
      axis.title.x = element_blank()
    ) +
    labs(y = "TFs per\ntarget gene")


# save plot
gp_grn <- gp_tf_gen / gp_tg_tfs + 
  plot_layout(guides = "collect")
ggsave(
  file.path(fig_dir, "GRN_stats_global.pdf"),
  gp_grn, height = 6, width = 5
)
```

Per cell type

-   number of TFs per cell type
-   distribution of TF inputs per target gene
-   distribution of target genes per TF

```{r}
# GRN data
exp <- "fc"
acc <- "access"

# filter by quantile expression
thr_q_exp <- 0.4
thr_q_acc <- thr_q_exp
thr_exp <- NULL

# filter by expression fc
thr_exp <- 1.4
thr_q_exp <- NULL

chr_thrs <- 4
grn_ct_dt <- fread(file.path(
    data_dir, lvl, itr, sprintf(
        "grn_tf_target_genes_expression_%s_%s_accessibility_%s_%s_chromvar_%s.tsv.gz",
        exp, thr_exp, acc, thr_q_acc, chr_thrs)
))
grn_ct_dt[, cell_type := factor(cell_type, levels = names(ct_cols))]

lvl_cols <- structure(
  c("#66FF66", "#FFCC00", "#CC9900", "#FF0000", "#CC0099","#6600CC", "#0011CC", "#030B61", "#08153b", "#040a1c"),
  names = 1:10
)

# number of TFs per cell type
cp_tf_num <- ggplot(
        unique(grn_ct_dt[, .(gene, cell_type)]),
        aes(cell_type, fill = cell_type, color = cell_type)
    ) +
    geom_bar() +
    scale_x_discrete(drop = TRUE) +
    scale_fill_manual(values = ct_cols, drop = TRUE) +
    scale_color_manual(values = structure(
      colorspace::darken(ct_cols, 0.5),
      names = names(ct_cols)
    )) +
    scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
    theme(
        legend.position = "none",
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.title.x = element_blank()
    ) +
    labs(y = "TFs")


# number of target genes per TF per cell type
ct_tf_gen <- unique(
  grn_ct_dt[, .(gene, lvl, target_self, target_gene, cell_type)]
)[, .N, .(cell_type, lvl, gene, target_self)]
ct_tf_gen[, lvl := factor(lvl, levels = 1:10)]
ct_tf_gen[, cell_type_box := paste0(cell_type, "_box")]
cp_tf_gen <- ggplot(
        ct_tf_gen, aes(
          cell_type, N,
          color = cell_type
        )
    ) +
    ggrastr::rasterise(ggbeeswarm::geom_quasirandom(
      aes(fill = cell_type, shape = target_self),
      size = 1, alpha = 1
    )) +
    geom_boxplot(aes(fill = cell_type_box), outlier.shape = NA, alpha = 0.5) +
    scale_x_discrete(drop = TRUE) +
    scale_fill_manual(values = c(
      ct_cols, 
      structure(
        colorspace::lighten(ct_cols, 0.8),
        names = paste0(names(ct_cols), "_box")
      )
    ), guide = "none") +
    scale_color_manual(values = structure(
      colorspace::darken(ct_cols, 0.5),
      names = names(ct_cols)
    ), guide = "none") +
    scale_shape_manual(values = c("TRUE" = 25, "FALSE" = 21)) +
    scale_y_continuous(
      expand = expansion(mult = c(0.1, 0.1)),
      trans = "log10"
    ) +
    guides(
      shape = guide_legend(override.aes = list(size = 5))
    ) +
    theme(
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank(),
      axis.title.x = element_blank()
    ) +
    labs(y = "target genes\nper TF")


# number of TFs per target gene per cell type
ct_tg_tfs <- unique(
  grn_ct_dt[, .(gene, target_gene, target_TF, cell_type)]
)[, .N, .(cell_type, target_TF, target_gene)]
ct_tg_tfs[, cell_type_box := paste0(cell_type, "_box")]
cp_tg_tfs <- ggplot(
        ct_tg_tfs, aes(
          cell_type, N,
          color = cell_type
        )
    ) +
    ggrastr::rasterise(ggbeeswarm::geom_quasirandom(
      aes(fill = cell_type, shape = target_TF),
      size = 1, alpha = 1
    )) +
    geom_boxplot(aes(fill = cell_type_box), outlier.shape = NA, alpha = 0.5) +
    scale_x_discrete(drop = TRUE) +
    scale_fill_manual(values = c(
      ct_cols, structure(
      colorspace::lighten(ct_cols, 0.8),
      names = paste0(names(ct_cols), "_box")
    )), guide = "none") +
    scale_color_manual(values = structure(
      colorspace::darken(ct_cols, 0.5),
      names = names(ct_cols)
    ), guide = "none") +
    scale_shape_manual(values = c("TRUE" = 24, "FALSE" = 22)) +
    scale_y_continuous(
      expand = expansion(mult = c(0.1, 0.1)),
      trans = "log2"
    ) +
    guides(shape = guide_legend(override.aes = list(size = 5))) +
    theme(
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank(),
      axis.title.x = element_blank()
    ) +
    labs(y = "TFs per\ntarget gene")



# overlap of targets per TF per cell type
ct_tg_tfs <- unique(
 grn_ct_dt[, .(gene, target_gene, target_TF, cell_type, cell_type_stage)]
)
ct_tf_ovl <- rbindlist(sapply(as.character(unique(grn_ct_dt$cell_type_stage)), function(ct) {
 ct_dt <- ct_tg_tfs[cell_type_stage == ct]
 ct_tf <- unique(ct_dt$gene)
 rbindlist(lapply(seq_along(ct_tf), function(i) {
   rbindlist(lapply(seq_along(ct_tf), function(j) {
     tf1 <- ct_tf[i]
     tf2 <- ct_tf[j]
     if (i > j) {
       message(sprintf("%s: %s vs %s", ct, tf1, tf2))
       target1 <- unique(ct_dt[gene == tf1]$target_gene)
       target2 <- unique(ct_dt[gene == tf2]$target_gene)
       ovl <- length(intersect(target1, target2)) / length(union(target1, target2))
       data.table(tf_gene_1 = tf1, tf_gene_2 = tf2, target_overlap = ovl)
     }
   }))
 }))                                                                                                               
}, simplify = FALSE, USE.NAMES = TRUE), idcol = "cell_type_stage")
ct_tf_ovl[, cell_type := str_remove(cell_type_stage, "_(adult|gastrula)")]
ct_tf_ovl[, cell_type_stage := factor(cell_type_stage, levels = unique(grn_ct_dt$cell_type_stage))]
ct_tf_ovl[, cell_type_box := paste0(cell_type, "_box")]
ct_tf_ovl[, mean(target_overlap), cell_type_stage]
cp_tg_ovl <- ggplot(
        ct_tf_ovl, aes(
          cell_type_stage, target_overlap,
          color = cell_type
        )
    ) +
    # ggrastr::rasterise(ggbeeswarm::geom_quasirandom(
    #   aes(fill = cell_type),
    #   size = 1, alpha = 1, shape = 21
    # )) +
    geom_boxplot(
      aes(fill = cell_type_box),
      outlier.shape = 21, alpha = 1
    ) +
    scale_x_discrete(drop = TRUE) +
    scale_fill_manual(values = c(
      ct_cols, structure(
      ct_cols,
      names = paste0(names(ct_cols), "_box")
    )), guide = "none") +
    scale_color_manual(values = structure(
      colorspace::darken(ct_cols, 0.5),
      names = names(ct_cols)
    ), guide = "none") +
    scale_y_continuous(
      expand = expansion(mult = c(0.1, 0.1))
      #trans = "log2"
    ) +
    guides(shape = guide_legend(override.aes = list(size = 5))) +
    theme(
      axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)
      #axis.ticks.x = element_blank(),
      #axis.title.x = element_blank()
    ) +
    labs(y = "target gene overlap per pair of TFs")



# plot
gp_grn_ct <- cp_tf_num / cp_tg_ovl
if (!is.null(thr_q_exp)) {
  gp_grn_ct <-  gp_grn_ct + 
    plot_layout(guides = "collect") +
    plot_annotation(title = sprintf(
        "Expression %s quantile %s & chromVAR Z %s",
        exp, thr_q_exp, chr_thrs
    ))
  grn_gp_fn <- file.path(fig_dir, sprintf(
      "GRN_stats_cell_type_%s_%s_%s_%s_chromvar_%s.pdf",
      exp, thr_q_exp, acc, thr_q_acc, chr_thrs
  ))
} else if (!is.null(thr_exp)) {
  gp_grn_ct <- gp_grn_ct +
    plot_annotation(title = sprintf(
        "Expression %s %s & chromVAR Z %s",
        exp, thr_exp, chr_thrs
    ))
  grn_gp_fn <- file.path(fig_dir, sprintf(
      "GRN_stats_cell_type_%s_%s_%s_%s_chromvar_%s.pdf",
      exp, thr_exp, acc, thr_q_acc, chr_thrs
  ))
}

# save
ggsave(grn_gp_fn, gp_grn_ct, height = 8, width = 8)
```

```{r}
design <- "#AAAAAAAA
           BCCCCCCCC
           DEEEEEEEE
           FGGGGGGGG"

gp_grn_stats <- cp_tf_num + gp_tf_gen + cp_tf_gen + gp_tg_tfs + cp_tg_tfs +
  plot_layout(
    design = design,
    # widths = c(1, 5),
    guides = "collect"
  )

if (!is.null(thr_q_exp)) {
  gp_grn_stats <- gp_grn_stats + 
    plot_layout(guides = "collect") +
    plot_annotation(title = sprintf(
        "Expression %s quantile %s & chromVAR Z %s",
        exp, thr_q_exp, chr_thrs
    ))
  grn_gp_fn <- file.path(fig_dir, sprintf(
      "GRN_stats_%s_%s_%s_%s_chromvar_%s.pdf",
      exp, thr_q_exp, acc, thr_q_acc, chr_thrs
  ))
} else if (!is.null(thr_exp)) {
  gp_grn_stats <- gp_grn_stats +
    plot_annotation(title = sprintf(
        "Expression %s %s & chromVAR Z %s",
        exp, thr_exp, chr_thrs
    ))
  grn_gp_fn <- file.path(fig_dir, sprintf(
      "GRN_stats_%s_%s_%s_%s_chromvar_%s.pdf",
      exp, thr_exp, acc, thr_q_acc, chr_thrs
  ))
}

# save
ggsave(grn_gp_fn, gp_grn_stats, height = 8, width = 12)
```

TF view:

-   calculate for all TFs an "overlapping index" (N cell-specific targets / total targets)

```{r}
# grn_ntg <- unique(
  grn_ct_dt[, .(cell_type, gene, target_gene, n_cell_types)]
)

# summarize per broad cell type
grn_ntg <- merge.data.table(grn_ntg, bct_maps, all.x = TRUE, sort = FALSE)
grn_ntg[, cell_type := broad_cell_type][, broad_cell_type := NULL]
grn_ntg[, n_cell_types := length(unique(.SD$cell_type)), .(gene)]
grn_ntg[, target_genes := length(unique(.SD$target_gene)), .(gene, cell_type)]
grn_ntg[, target_n_cell_types := length(unique(.SD$cell_type)), .(gene, target_gene)]

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# global union: target_genes_union
grn_uni <- grn_ntg[, .(target_genes_union = length(unique(.SD$target_gene))), gene]
# global intersect: target_genes_intersect
grn_int <- grn_ntg[, .(target_genes_intersect = length(unique(.SD[target_n_cell_types == n_cell_types]$target_gene))), gene]

# overlap index
grn_ovl <- merge.data.table(grn_uni, grn_int, by = "gene", all = TRUE)
grn_ovl[, overlap_index := target_genes_intersect / target_genes_union]

# add metadata
tfs_target_self <- grn_ct_dt[target_self == TRUE]$gene
grn_ovl[, target_self := gene %in% tfs_target_self]
grn_ovl <- merge.data.table(grn_ovl, unique(grn_ntg[, .(gene, n_cell_types)]), by = "gene")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# target genes per cell type
grn_tct <- grn_ntg[, .(cell_type_genes = length(unique(.SD$target_gene))), .(gene, cell_type)][order(gene)]

# target genes per TF
grn_ttf <- grn_ntg[, .(target_genes = length(unique(.SD$target_gene))), .(gene)][order(gene)]

# diversity index
grn_div <- merge.data.table(grn_tct, grn_ttf, by = "gene", all = TRUE)
grn_div[, diversity_index := sum((cell_type_genes / target_genes)^2), gene]

# add metadata
tfs_target_self <- grn_ct_dt[target_self == TRUE]$gene
grn_div[, target_self := gene %in% tfs_target_self]
grn_div <- merge.data.table(grn_div, unique(grn_ntg[, .(gene, n_cell_types)]), by = "gene")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# plot overlap
gp1 <- ggplot(grn_ovl, aes(
    target_genes_union + 1, target_genes_intersect + 1,
    shape = target_self, size = n_cell_types, fill = overlap_index
  )) +
  geom_point(alpha = 0.8) +
  scale_shape_manual(values = c("TRUE" = 25, "FALSE" = 21)) +
  scale_x_continuous(trans = "log10") +
  scale_y_continuous(trans = "log10") +
  guides(shape = guide_legend(override.aes = list(size = 5)))
gp2 <- ggplot(grn_ovl, aes(
    n_cell_types, overlap_index,
    shape = target_self, size = target_genes_union, fill = target_genes_intersect
  )) +
  geom_jitter(alpha = 0.8) +
  scale_shape_manual(values = c("TRUE" = 25, "FALSE" = 21)) +
  guides(shape = guide_legend(override.aes = list(size = 5)))
gp3 <- ggplot(grn_ovl, aes(overlap_index)) +
  geom_histogram(color = "white") + 
  scale_y_continuous(
    trans = "log10",
    expand = expansion(mult = c(0, 0.1))
  ) +
  labs(x = "overlap index", y = "number of TFs")


# plot diversity
gp1 <- ggplot(grn_div, aes(
    target_genes, cell_type_genes,
    shape = target_self, size = n_cell_types, fill = diversity_index
  )) +
  geom_point(alpha = 0.8) +
  scale_shape_manual(values = c("TRUE" = 25, "FALSE" = 21)) +
  scale_x_continuous(trans = "log10") +
  scale_y_continuous(trans = "log10") +
  guides(shape = guide_legend(override.aes = list(size = 5)))
gp2 <- ggplot(grn_div, aes(
    n_cell_types, diversity_index,
    shape = target_self, size = cell_type_genes, fill = target_genes
  )) +
  geom_jitter(alpha = 0.8) +
  scale_shape_manual(values = c("TRUE" = 25, "FALSE" = 21)) +
  guides(shape = guide_legend(override.aes = list(size = 5)))
gp3 <- ggplot(grn_div, aes(diversity_index)) +
  geom_histogram(color = "white") + 
  scale_y_continuous(
    trans = "log10",
    expand = expansion(mult = c(0, 0.1))
  ) +
  labs(x = "diversity index", y = "number of TFs")


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# 
# # save plots
# metric <- "div"
# gp_ovl_glob <- (gp1 + gp2) / gp3 + plot_layout(
#   heights = c(3, 1)
# )
# if (is.null(thr_exp)) thr_exp <- thr_q_exp
# ggsave(file.path(
#   fig_dir, sprintf(
#     "GRN_%s_index_global_%s_%s_%s_%s_chromvar_%s.pdf",
#     metric, exp, thr_exp, acc, thr_q_acc, chr_thrs
#   )
# ), height = 8, width = 14)
# 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# compare index
grn_comp <- unique(merge.data.table(
  grn_ovl[, .(gene, overlap_index, target_self, n_cell_types)],
  grn_div[, .(gene, diversity_index, target_genes)]
))
if (is.null(thr_exp)) thr_exp <- thr_q_exp
fwrite(grn_comp, file.path(
  data_dir, lvl, itr, sprintf(
    "GRN_index_global_%s_%s_%s_%s_chromvar_%s.tsv",
    exp, thr_exp, acc, thr_q_acc, chr_thrs
  )
), sep = "\t")
grn_comp[, gene := factor(
  gene, levels = unique(grn_comp[order(target_genes)]$gene)
)]
setorder(grn_comp, gene)
gp_ind <- ggplot(grn_comp, aes(
    overlap_index, diversity_index,
    shape = target_self, size = target_genes, fill = n_cell_types,
    label = str_remove(gene, "Nvec_(vc1.1_)*")
  )) + 
  geom_point() +
  scale_fill_gradientn(colours = c("#d9d9d9", "#bdbdbd", "#969696", "#737373", "#525252", "#252525")) +
  scale_shape_manual(values = c("TRUE" = 25, "FALSE" = 21)) +
  guides(shape = guide_legend(override.aes = list(size = 5)))

ind_fn <- file.path(fig_dir, sprintf(
  "GRN_ovl_vs_div_index_global_%s_%s_%s_%s_chromvar_%s.pdf",
  exp, thr_exp, acc, thr_q_acc, chr_thrs
))
ggsave(
  str_replace(ind_fn, ".pdf", "_minimal.pdf"),
  gp_ind,
  height = 6, width = 8
)
ggsave(
  ind_fn,
  gp_ind + geom_text_repel(),
  height = 18, width = 20
)
```

- overlap index vs N of cell types

```{r}
grn_comp <- fread(file.path(
  data_dir, lvl, itr, sprintf(
    "GRN_index_global_%s_%s_%s_%s_chromvar_%s.tsv",
    exp, thr_exp, acc, thr_q_acc, chr_thrs
  )
))
grn_comp <- merge.data.table(grn_comp, marks, by = "gene", all.x = TRUE, sort = FALSE)
ovl_n_gp <- ggplot(grn_comp, aes(n_cell_types, overlap_index, size = target_genes, label = name_old)) +
  ggbeeswarm::geom_quasirandom(
    shape = 21, alpha = 1, fill = "#8a8a8a", color = "#3d3d3d"
  ) +
  # geom_text_repel() +
  labs(x = "number of cell types", y = "overlap index")


ind_fn <- file.path(fig_dir, sprintf(
  "GRN_ovl_vs_nct_global_%s_%s_%s_%s_chromvar_%s.pdf",
  exp, thr_exp, acc, thr_q_acc, chr_thrs
))

ggsave(
  file.path(ind_fn), ovl_n_gp,
  width = 8, height = 4
)

```

- show examples of target genes euler diagram for broad cell types (maybe GOs/pfam enrichments?)

```{r}
require(eulerr)

# index data
if (is.null(thr_exp)) thr_exp <- thr_q_exp
grn_comp <- fread(file.path(
  data_dir, lvl, itr, sprintf(
    "GRN_index_global_%s_%s_%s_%s_chromvar_%s.tsv",
    exp, thr_exp, acc, thr_q_acc, chr_thrs
  )
))

# get links data
ic_dt <- unique(grn_ct_dt[, .(cell_type, gene, target_gene, in_silico_chip_score)])
dt <- dcast.data.table(ic_dt,
  gene + target_gene ~ cell_type, value.var = "in_silico_chip_score"
)
dt[is.na(dt)] <- 0
cts <- colnames(dt)[-c(1:2)]

# save plots to file
gp_fn <- file.path(fig_dir, sprintf(
  "GRN_euler_div_%s_%s_%s_%s_chromvar_%s.pdf",
  exp, thr_exp, acc, thr_q_acc, chr_thrs
))
pdf(gp_fn, height = 5, width = 10)

# select TF
for (g in unique(grn_comp[gene %in% dt$gene][order(diversity_index)]$gene)) {
#for (g in marks[gene %in% dt$gene]$gene) {

  if (g %in% marks$gene) {
    gnm <- marks[gene == g]$name_old
  } else {
    gnm <- rev(tfan[gene == g]$og)[1]
    if (nchar(gnm) > 45) gnm <- paste0(substr(gnm, 1, 42), "...")
  }
  dtg <- dt[gene == g]
  if (nrow(dtg) > 1) {

    ovl <- grn_comp[gene == g]$overlap_index[1]
    div <- grn_comp[gene == g]$diversity_index[1]
    message(gnm)
    mat <- sapply(cts, function(ct) {
      abs(dtg[[ct]]) > 0
    })
    mat <- mat[, apply(mat, 2, sum) > 0, drop = FALSE]

    # group broad cell types
    bc_list <- tapply(
      colnames(mat),
      bct_maps[match(colnames(mat), cell_type),]$broad_cell_type,
      function (x) rowSums(mat[, x, drop = FALSE])
    )
    bc_mat <- do.call("cbind", bc_list)
    bc_mat <- sapply(colnames(bc_mat), function(ct) {
      bc_mat[, ct] > 0
    })
    bc_mat <- bc_mat[, apply(bc_mat, 2, sum) > 0, drop = FALSE]

    # euler diagram
    top_cts <- sort(apply(bc_mat, 2, sum), decreasing = TRUE)
    fit <- euler(bc_mat[, names(top_cts), drop = FALSE])
    p1 <- plot(
      fit,
      quantities = TRUE,
      labels = list(font = 4),
      fill = bct_cols[names(top_cts)],
      main = sprintf(
        "%s (%s) ovl %.2f; div %.2f",
        gnm, str_remove(g, "Nvec_vc1.1_"), ovl, div
      )
    )
    print(p1)
  }
}
dev.off()
```

Network cartography

```{r}
source("../../../motif-analysis/mta_grn_functions.R")
cts <- unique(grn_ct_dt$cell_type_stage)
cart_list <- lapply(cts, function(ct) {
  message("Cartography for ", ct, " GRN")
  grn_ct <- grn_ct_dt[cell_type_stage == ct][, .(gene, target_gene, in_silico_chip_score)]
  mta_network_scores(coef_dt = grn_ct)[, cell_type_stage := ct]
})
if (is.na(thr_exp)) thr_exp <- thr_q_exp
cart_dt <- rbindlist(cart_list)

# save
# fwrite(cart_dt, file.path(
#   data_dir, lvl, itr, sprintf(
#     "GRN_cartography_%s_%s_%s_%s_chromvar_%s.tsv",
#     exp, thr_exp, acc, thr_q_acc, chr_thrs
#   )
# ), sep = "\t")

# add annots
nodes_ann <- merge.data.table(
  cart_dt,
  unique(grn_ct_dt[, .(
    cell_type, cell_type_stage, gene, og, marker_name,
    expression_fc, zscore, n_cell_types,
    target_genes, target_TFs, target_not_TFs, target_self
  )])[, active_TF := TRUE],
  by = c("gene", "cell_type_stage"), all.x = TRUE, sort = FALSE
)
nodes_ann[is.na(active_TF), active_TF := FALSE]
nodes_ann[, label := marker_name]
nodes_ann[role == "Connector Hub" & marker_name == "" , label := og]
nodes_ann[nchar(label) > 30,  label := paste0(substr(label, 1, 27), "...")]
nodes_ann[is.na(label), label := ""]

# save
fwrite(nodes_ann, file.path(
  data_dir, lvl, itr, sprintf(
    "GRN_cartography_%s_%s_%s_%s_chromvar_%s.tsv",
    exp, thr_exp, acc, thr_q_acc, chr_thrs
  )
), sep = "\t")


```

Plot cartography

```{r}
# plot network scores
cart_cols <- c(
  "Peripheral" = "#b6b6b6ff",
  "Connector" = "#ec7c6fff",
  "Kinless" = "#83bbd7ff",
  "Peripheral Hub" = "#878787ff",
  "Connector Hub" = "#b42536ff",
  "Kinless Hub" = "#2a70b8ff"
)

# plot
minx <- min(nodes_ann$participation, na.rm = TRUE)
maxx <- max(nodes_ann$participation, na.rm = TRUE) 
miny <- min(nodes_ann$connectivity, na.rm = TRUE)
maxy <- max(nodes_ann$connectivity, na.rm = TRUE) 
seg_df <- data.frame(
  x1 = c(0.05, 0.62, minx, 0.75, 0.80),
  x2 = c(0.05, 0.62, 1.00, 0.75, 0.80),
  y1 = c(2.50, miny, 2.50, 2.50, miny),
  y2 = c(maxy, 2.50, 2.50, maxy, 2.50)
)
gp_cart <- ggplot(nodes_ann[active_TF==TRUE], aes(
    participation, connectivity,
    fill = role, shape = active_TF, label = label
  )) +
  geom_segment(
    data = seg_df, aes(x = x1, y = y1, xend = x2, yend = y2),
    inherit.aes = FALSE, linetype = 2
  ) +
  geom_point(size = 5, color = "black") +
  ggrepel::geom_text_repel(max.overlaps = Inf) +
  scale_fill_manual(values = cart_cols) +
  scale_shape_manual(values = c("TRUE" = 21, "FALSE" = 22)) +
  scale_y_continuous(expand = c(0,0)) + #expansion(mult = c(0.1, 0.1))
  scale_x_continuous(limits = c(0,1), expand = c(0,0)) +
  facet_wrap("cell_type_stage") +
  labs(
    x = "Participation coefficient P",
    y = "Within-module degree, z",
    title = sprintf(
      "Cartography (expression %s %s %s %s)",
      thr_exp, acc, thr_q_acc, chr_thrs
    )
  ) +
  guides(
    fill = guide_legend(override.aes = list(shape = 21, size = 5)),
  ) +
  theme(legend.position = "bottom")

ggsave(file.path(
  fig_dir, sprintf(
    "GRN_cartography_TFs_%s_%s_%s_%s_chromvar_%s.pdf",
    exp, thr_exp, acc, thr_q_acc, chr_thrs
  )
), gp_cart, height = 28, width = 32)

```

Centrality distribution

```{r}
gp_cent_dist <- ggplot(
    nodes_ann[active_TF == TRUE], aes(
      degree_centrality_all,
      fill = cell_type
    )
  ) +
  geom_histogram() +
  scale_y_continuous(trans = "log10") +
  scale_fill_manual(values = ct_cols) +
  facet_wrap("cell_type_stage") +
  theme(legend.position = "none")

ggsave(file.path(
  fig_dir, sprintf(
    "GRN_centrality_dist_TFs_%s_%s_%s_%s_chromvar_%s.pdf",
    exp, thr_exp, acc, thr_q_acc, chr_thrs
  )
), gp_cent_dist, height = 18, width = 18)
```

Compare network metrics

```{r}
pdf(file.path(
  fig_dir, sprintf(
    "GRN_centrality_compare_cell_type_TFs_%s_%s_%s_%s_chromvar_%s.pdf",
    exp, thr_exp, acc, thr_q_acc, chr_thrs
  )
), height = 10, width = 15)

for (ct in unique(nodes_ann$cell_type_stage)) {

  message(ct)
  plot_list <- lapply(list(
    c("connectivity", "degree_centrality_all"),
    c("connectivity", "betweenness_centrality"),
    c("connectivity", "eigenvector_centrality"),
    c("participation", "degree_centrality_all"),
    c("participation", "betweenness_centrality"),
    c("participation", "eigenvector_centrality")
  ), function(i) {
    x <- i[[1]]
    y <- i[[2]]
    nodes_dt <- nodes_ann[cell_type_stage == ct]
    nodes_dt[, cell_type := str_remove(ct, "_(adult|gastrula)")]
    ggplot(
          nodes_dt,
          aes_string(
            x, y,
            fill = "cell_type", 
            color = "cell_type",
            label = "label",
            shape = "active_TF"
          )
        ) +
        geom_smooth(
          aes_string(x, y, color = "cell_type"),
          inherit.aes = FALSE, method = "lm", se = FALSE
        ) +
        geom_point(
          data = nodes_dt[active_TF == FALSE],
          size = 3, shape = 22
        ) +
        geom_point(
          data = nodes_dt[active_TF == TRUE],
          size = 3, shape = 21
        ) +
        ggrepel::geom_text_repel() +
        ggpubr::stat_cor(
          mapping = aes_string(x, y),
          inherit.aes = FALSE,
          method = "pearson",
          label.x = 0,
          label.y = max(nodes_dt[[y]])
        ) +
        scale_shape_manual(values = c("TRUE" = 21, "FALSE" = 22)) +
        scale_fill_manual(values = ct_cols) +
        scale_color_manual(values = structure(
          colorspace::darken(ct_cols, 0.5),
          names = names(ct_cols)
        )) +
        guides(color = "none", fill = "none") +
        theme(legend.position = "bottom")
  })
  gp_cent_comp <- patchwork::wrap_plots(plot_list, nroow = 2) +
    plot_annotation(title = ct)
  print(gp_cent_comp)

}
dev.off()
```

Plot top genes per GRN

```{r}
pdf(file.path(
  fig_dir, sprintf(
    "GRN_top_genes_metrics_%s_%s_%s_%s_chromvar_%s.pdf",
    exp, thr_exp, acc, thr_q_acc, chr_thrs
  )
), height = 8, width = 32)

for (ct in unique(nodes_ann$cell_type_stage)) {

  message(ct)
  plot_list <- lapply(c(
    "degree_centrality_all",
    "betweenness_centrality",
    "eigenvector_centrality",
    "connectivity",
    "participation"
  ), function(i) {
    nodes_dt <- copy(nodes_ann[cell_type_stage == ct])
    nodes_dt[, cell_type := str_remove(ct, "_(adult|gastrula)")]
    setnames(nodes_dt, i, "y")
    setorder(nodes_dt, -y)
    nodes_dt <- nodes_dt[active_TF == TRUE]
    nodes_dt[label == "", label := substr(og, 1, 25)]
    nodes_dt <- nodes_dt[1:pmin(.N, 30)]
    setorder(nodes_dt, y)
    nodes_dt[, gene := factor(gene, levels = unique(nodes_dt$gene))]
    # plot values
    nodes_dt[, zscore_scaled := pmin(zscore, 25)]
    nodes_dt[, expression_fc_scaled := pmin(expression_fc, 6)]
    # plot
    ggplot(
        nodes_dt,
        aes(
          gene, y,
          shape = active_TF,
          fill = expression_fc_scaled,
          size = zscore_scaled
        )
      ) +
      geom_segment(aes(x = gene, xend = gene, y = 0, yend = y), inherit.aes = FALSE) +
      geom_point(shape = 21) +
      scale_fill_gradientn(
        name = "expression\nfold change",
        breaks = c(0, 2, 4, 6, 8),
        colours = c(
          "gray99", "#ffd195", "orange", "orangered2",
          "#a71414", "#68093d", "#470447"
        )
      ) +
      scale_size_continuous(
        name = "TF activity",
        breaks = c(0, 5, 10, 15, 20, 25, 30),
        range = c(0, 5)
      ) +
      scale_x_discrete(
        breaks = nodes_dt$gene,
        labels = nodes_dt$label
      ) +
      scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
      theme(legend.position = "bottom") +
      labs(x = "", y = str_replace_all(str_remove(i, "_all"), "_", "\n")) +
      coord_flip()
  })
  gp_met <- patchwork::wrap_plots(plot_list, nrow = 1) +
    plot_layout(guides = "collect") +
    plot_annotation(title = ct) & theme(legend.position = "bottom")
  print(gp_met)

}
dev.off()
```

Compare modules in cell types

```{r}
# how many modules per GRN?
nodes_ann[,.N,.(cell_type_stage,module)][,.N,cell_type_stage]

# overlap modules
setorder(nodes_ann, cell_type_stage)
nodes_ann[, module := paste0(cell_type_stage, "_M", module)]
modules <- unique(nodes_ann$module)

jacc_mt <- matrix(
  NA,
  nrow = length(modules),
  ncol = length(modules),
  dimnames = list(modules, modules)
)
for (m1 in modules) {
  for (m2 in modules) {
    pk1 <- nodes_ann[module == m1]$gene
    pk2 <- nodes_ann[module == m2]$gene
    jac <- length(intersect(pk1, pk2)) / length(union(pk1, pk2))
    jacc_mt[m1, m2] <- jac
  }
}

# distance matrix
dmatrix <- tgstat::tgs_dist(jacc_mt)

# NJ clustering
require(ape)
tree <- nj(dmatrix)
tree_nm <- sprintf(
  "GRN modules_jacc_tree_%s_%s_%s_%s_chromvar_%s",
  exp, thr_exp, acc, thr_q_acc, chr_thrs
)
tree_fn <- file.path(fig_dir, paste0(tree_nm, ".txt"))
ape::write.tree(tree, tree_fn)

# tree visuals
tree <- ape::read.tree(tree_fn)
tips <- tree$tip.label
tree <- groupOTU(
    tree,
    sapply(
        cell_types,
        function(ct) grep(ct, tips),
        USE.NAMES = TRUE,
        simplify = FALSE
    )
)
gt <- ggtree(tree, aes(color = group), ladderize = FALSE) +
  scale_color_manual(values = ct_cols) +
  theme_tree2() +
  geom_tiplab() +
  scale_x_continuous(limits = c(NA, 1.6)) +
  theme(legend.position = "none")
ggsave(file.path(
    fig_dir,
    paste0(tree_nm, ".pdf")
), gt, height = 21, width = 7)

# order
jacc_mt <- jacc_mt[tree$tip.label, tree$tip.label]

# plot
require(ComplexHeatmap)
hm_mat <- jacc_mt
diag(hm_mat) <- NA
colnames(hm_mat) <- str_extract(colnames(hm_mat), "M\\d+")
rownames(hm_mat) <- str_extract(rownames(hm_mat), "M\\d+")

# colors
col_vec_pks <- c("white", RColorBrewer::brewer.pal(8, "Blues"))
col_val_pks = seq(
  quantile(hm_mat, 0.01, na.rm = TRUE), quantile(hm_mat, 0.99, na.rm = TRUE),
  length.out = length(col_vec_pks)
)
hm_col <- circlize::colorRamp2(col_val_pks, col_vec_pks)

# cell type color annotations
col_ann <- HeatmapAnnotation(
  which = "column",
  "cell type" = str_remove(colnames(jacc_mt), "_(gastrula|adult)_M\\d+"),
  col = list("cell type" = ct_cols),
  show_legend = FALSE
)
row_ann <- HeatmapAnnotation(
  which = "row",
  "cell type" = str_remove(rownames(jacc_mt), "_(gastrula|adult)_M\\d+"),
  col = list("cell type" = ct_cols),
  show_legend = FALSE
)

hm_grn_mod <- Heatmap(
  hm_mat, name = "jaccard",
  col = hm_col, na_col = "#ffffff",
  border = TRUE, use_raster = FALSE,
  cluster_rows = FALSE, cluster_columns = FALSE,
  show_row_dend = FALSE, show_column_dend = FALSE,
  show_row_names = TRUE, show_column_names = TRUE,
  bo_annotation = col_ann,
  right_annotation = row_ann,
  row_title = sprintf("%i GRN modules", nrow(hm_mat)),
  column_title = sprintf("%i GRN modules", ncol(hm_mat)),
  column_title_side = "top"
)

pdf(file.path(
  fig_dir, sprintf(
    "GRN modules_jacc_%s_%s_%s_%s_chromvar_%s.pdf",
    exp, thr_exp, acc, thr_q_acc, chr_thrs
  )), width = 20, height = 18)
print(hm_grn_mod)
dev.off()
```

# Figure 4

## Trees

Cell type comparisons (trees)

```{r}
tree_dir <- file.path(res_dir, "Trees")
dir.create(tree_dir, showWarnings = FALSE)
dir.create(file.path(tree_dir, "data"), showWarnings = FALSE)

# function for bootstrap
boot.tree <- function(data, B = 100, tree = "nj", func = dist, ...) {
    library(phangorn)
    if (tree == "UPGMA") {
      tree_func <- function(x) upgma(func(x, ...), method = "average")
    } else if (tree == "nj") {
      tree_func <- function(x) nj(func(x, ...))
    } else if (tree == "hclust") {
        tree_func <- function(x) {
            tr = hclust(func(x, ...))
            tr = as.phylo(tr)
            return(tr)
        }
    }
    tr_real <- tree_func(data)
    bp <- boot.phylo(tr_real, data, FUN = tree_func, B = B)
    tr_real$node.label <- as.character(bp)
    return(tr_real)
}

```

### Expression based trees

Expression data mapped to accessibility

```{r}
lvl <- "cell_type"
itr <- "03"
exp <- "fc"
id <- "genes_exp_FC2_acc_FC4_spearman"

# all RNA metacells
exp_mt <- readRDS(file.path(
  adult_dir, "Metacells", lvl, sprintf(
    "gene_expression_%s_%s.rds", lvl, exp
  )
))

# # mapped RNA metacells
# exp_mt <- readRDS(
#     file.path(
#         adult_dir, "Metacells", lvl, itr,
#         sprintf("gene_expression_%s_%s.rds", exp, id)
#     )
# )

# mapping of metacells
map_dt <- rbindlist(sapply(c(
    adult = file.path(
        adult_dir, "Metacells", lvl, itr, sprintf("mapping_%s_%s_adult.tsv.gz", lvl, id)
    ),
    gastrula = file.path(
        adult_dir, "Metacells", lvl, itr, sprintf("mapping_%s_%s_gastrula.tsv.gz", lvl, id)
    )
), fread, simplify = FALSE, USE.NAMES = TRUE), idcol = "stage")
setnames(map_dt, c("SEACell_cell_type", "metacell_cell_type"), c("cell_type_ATAC", "cell_type_RNA"))
map_dt[, cell_type_ATAC := str_replace_all(cell_type_ATAC, cell_type_rename)]
map_dt[, cell_type_RNA := paste(stage, cell_type_RNA, sep = "_")]
map_dt[, cell_type_ATAC := paste(stage, cell_type_ATAC, sep = "_")]
map_dt[, .N, cell_type_RNA %in% colnames(exp_mt)]
map_dt <- map_dt[cell_type_RNA %in% colnames(exp_mt)]
map_ct <- colnames(exp_mt)[colnames(exp_mt) %in% map_dt$cell_type_RNA]
map_dt <- map_dt[match(map_ct, cell_type_RNA)]
map_dt <- map_dt[!is.na(cell_type_RNA)]

# fix mapping
map_dt[cell_type_ATAC == "adult_cnidocyte"
, cell_type_RNA := "adult_cnidocyte_nematocytes"
]

exp_mt <- exp_mt[, map_dt$cell_type_RNA]
colnames(exp_mt) <- map_dt$cell_type_ATAC

# save for trees app
saveRDS(
  exp_mt,
  file.path(tree_dir, "data", "genes.rds")
)
```

What is the correlation between expression and accessibility?

```{r}
# compare expression and gene scores
exp_mt <- readRDS(
  file.path(tree_dir, "data", "genes.rds")
)
gene_sco <- readRDS(file.path(
  adult_dir, "Metacells", "cell_type", "gene_scores_cell_type.rds"
))
colnames(gene_sco) <- str_replace_all(colnames(gene_sco), "\\.", "_")
colnames(gene_sco) <- str_replace_all(colnames(gene_sco), cell_type_rename)
colnames(gene_sco) <- str_replace_all(colnames(gene_sco), c(
  "gastrula_gland_mucous" = "gastrula_gland"
))
stopifnot(all(colnames(exp_mt) %in% colnames(gene_sco)))
gns <- intersect(rownames(exp_mt), rownames(gene_sco))
gns <- gns[apply(exp_mt[gns, ], 1, max) > 2]
cts <- colnames(exp_mt)
gene_sco <- gene_sco[gns, cts]
exp_mt <- exp_mt[gns, cts]
# paorwise correlation between gene scores and gene expression
gene_cors <- cor(
  t(exp_mt),
  t(gene_sco),
  method = "spearman"
)
gene_cors <- diag(gene_cors)

```

Joint tree

```{r}
exp_mt <- readRDS(
  file.path(tree_dir, "data", "genes.rds")
)

# features for clustering
adult_ids <- grep("adult", colnames(exp_mt))
gastr_ids <- grep("gastrula", colnames(exp_mt))
fc_thrs <- 2
thrs <- sprintf("FC%s_qnorm", fc_thrs)
feats <- names(which(apply(
    exp_mt, 1, function(x) {
      max(x) > fc_thrs
    }
)))
sum(rownames(exp_mt) %in% feats)
mean(rownames(exp_mt) %in% feats)

# selected features
feats_select <- intersect(feats, rownames(exp_mt))

# subset matrices
table_fp <- exp_mt[feats_select, ]

# distance matrix
dmatrix <- tgstat::tgs_dist(t(table_fp))

# NJ clustering
require(ape)
tmatrix <- t(table_fp)
tree <- boot.tree(tmatrix, B=100, tree='nj')
tree_nm <- sprintf("NJ_genes_adult_gastrula_tree_%s", thrs)
tree_fn <- file.path(fig_dir, paste0(tree_nm, ".txt"))
ape::write.tree(tree, tree_fn)

# tree visuals
tree <- ape::read.tree(tree_fn)
tips <- tree$tip.label
tree <- groupOTU(
    tree,
    sapply(
        cell_types,
        function(ct) grep(ct, tips),
        USE.NAMES = TRUE,
        simplify = FALSE
    )
)
gt <- ggtree(tree, aes(color = group), ladderize = FALSE) +
  scale_color_manual(values = ct_cols) +
  theme_tree2() +
  geom_tiplab() +
  scale_x_continuous(limits = c(NA, 450)) +
  geom_text2(aes(label = node), hjust = -0.2, size = 3) +   
  theme(legend.position = "none")
ggsave(file.path(
    fig_dir,
    paste0(tree_nm, ".pdf")
), gt, height = 6, width = 7)

```

Separate trees for adult and gastrula

```{r}
# rows and columns per dtage
dmatrix <- as.matrix(dmatrix)
adult_ids_row <- grep("adult", rownames(dmatrix))
adult_ids_col <- grep("adult", colnames(dmatrix))
gastr_ids_row <- grep("gastrula", rownames(dmatrix))
gastr_ids_col <- grep("gastrula", colnames(dmatrix))

for (stage in c("adult", "gastrula")) {
  
  # get ids
  ids <- switch(
    stage,
    "adult" = list(adult_ids_row, adult_ids_col),
    "gastrula" = list(gastr_ids_row, gastr_ids_col)
  )

  # NJ clustering
  require(ape)
  # tree <- nj(dmatrix[ids[[1]], ids[[2]]])
  tree <- boot.tree(tmatrix, B=100, tree='nj')
  tree_nm <- sprintf("NJ_genes_%s_tree_%s", stage, thrs)
  tree_fn <- file.path(fig_dir, paste0(tree_nm, ".txt"))
  ape::write.tree(tree, tree_fn)

  # tree visuals
  tree <- ape::read.tree(tree_fn)
  tips <- tree$tip.label
  tree <- groupOTU(
      tree,
      sapply(
          cell_types,
          function(ct) grep(ct, tips),
          USE.NAMES = TRUE,
          simplify = FALSE
      )
  )
  gt <- ggtree(tree, aes(color = group), ladderize = FALSE) +
    scale_color_manual(values = ct_cols) +
    theme_tree2() +
    geom_tiplab() +
    geom_text2(aes(label = node), hjust = -0.2, size = 3) +   
    scale_x_continuous(limits = c(NA, 450)) +
    theme(legend.position = "none")
  ggsave(file.path(
      fig_dir,
      paste0(tree_nm, ".pdf")
  ), gt, height = 6, width = 7)


}
```

### Gene score based trees

```{r}
# load tree data
data_dir <- file.path(res_dir, "Metacells", "cell_type")
gene_sco <- readRDS(file.path(
  data_dir, "gene_scores_cell_type.rds"
))
stopifnot(all(colnames(gene_sco) %in% cell_types))

# save peaks matrix
saveRDS(
  as.matrix(gene_sco),
  file.path(tree_dir, "data", "gene_scores.rds")
)

# load data per stage
for (stage in c("adult", "gastrula")) {

  gene_sco_fn <- switch(
    stage,
    "adult" = file.path(adult_dir, "ArchRProj", "GeneScoreMatrix", "Matrix-Gene-Scores-Dist-Var-Coacces-cell-type-FC.rds"),
    "gastrula" = file.path(gastr_dir, "ArchRProj", "GeneScoreMatrix", "Matrix-Gene-Scores-Dist-Var-Weighted-cell_type-FC.rds")
  )
  gene_sco <- readRDS(gene_sco_fn)
  stopifnot(all(colnames(gene_sco) %in% cell_types))

  # save peaks matrix
  saveRDS(
    as.matrix(gene_sco),
    file.path(tree_dir, "data", sprintf("gene_scores_%s.rds", stage))
  )

}
```

Tree

```{r}
fp_clusters <- readRDS(
  file.path(tree_dir, "data", "gene_scores.rds")
)

# features for clustering
fc_thrs <- 3.5
thrs <- sprintf("FC%s_qnorm", fc_thrs)
feats <- names(which(apply(
    fp_clusters, 1, function(x) {
      max(x) > fc_thrs
    }
)))
sum(rownames(fp_clusters) %in% feats)
mean(rownames(fp_clusters) %in% feats)

# selected features
feats_select <- intersect(feats, rownames(fp_clusters))


# make trees with different data processing
gt_list <- list()

set.seed(123)

trim <- FALSE
scale <- FALSE

#for (trim in c(TRUE, FALSE)) {
#  for (scale in c(TRUE, FALSE)) {

    proc <- sprintf(
      "%s %s",
      ifelse(trim, "trim", ""),
      ifelse(scale, "scale", "")
    )
    proc <- str_trim(proc)

    # subset matrices
    table_fp <- fp_clusters[feats_select, ]
    if (trim) {
      q <- quantile(table_fp, probs = c(0.01, 0.99))
      table_fp <- pmin(pmax(table_fp, q[1]), q[2])
    }
    if (scale) {
      table_fp <- scale(table_fp)
    }
    tmatrix <- t(table_fp)

    require(ape)
    if (proc != "") {
      tree_nm <- sprintf("NJ_gene_scores_adult_gastrula_tree_%s_%s_bootstrap", thrs, proc)
      tree_cp <- sprintf(
        "%s genes with gene score > %s; %s; BP %.1f", 
        length(feats_select), fc_thrs, proc, bp
      )
    } else {
      tree_nm <- sprintf("NJ_gene_scores_adult_gastrula_tree_%s_bootstrap", thrs)
      tree_cp <- sprintf(
        "%s genes with gene score > %s; BP %.1f", 
        length(feats_select), fc_thrs, bp
      )
    }

    # bootstrap tree
    bptree <- boot.tree(tmatrix, B = 100, tree = "nj")
    bp <- sum(as.integer(bptree$node.label), na.rm=TRUE)/bptree$Nnode

    bptree <- phytools::midpoint.root(bptree)

    # save tree
    tree_fn <- paste0(tree_nm, ".txt")
    ape::write.tree(bptree, file.path(tree_dir, tree_fn))

    # plot tree
    require(ggtree)
    gt <- ggtree(bptree, ladderize = FALSE, branch.length = "none") +
      theme_tree2() +
      geom_tiplab(aes(color = label)) +
      geom_nodelab(aes(label = label), size = 2, hjust = -0.2) +
      scale_x_continuous(expand = expansion(mult = c(0, 2))) +
      scale_color_manual(values = ct_cols) +
      theme(
        legend.position = "none",
        axis.line.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank()
      ) +
      labs(caption = tree_cp)
    gt_list[[proc]] <- gt

#  }
#}

# save all trees plots
tree_nm <- sprintf("NJ_gene_scores_adult_gastrula_tree_%s_bootstrap", thrs)
pdf(file.path(
    fig_dir,
    paste0("fig4_", tree_nm, ".pdf")
), height = 6, width = 5)
print(gt)
dev.off()

```

```{r}
# load re-rooted tree
thrs <- 2.5
tree_nm <- sprintf("NJ_gene_scores_adult_gastrula_tree_FC%s_qnorm_bootstrap_rerooted", thrs)
tree_fn <- file.path(tree_dir, paste0(tree_nm, ".nexus"))
tree <- ape::read.nexus(tree_fn)

# plot tree
require(ggtree)
gt <- ggtree(tree, ladderize = FALSE, branch.length = "none") +
  theme_tree2() +
  geom_tiplab(aes(color = label)) +
  geom_nodelab(aes(label = label), size = 2, hjust = -0.2) +
  scale_x_continuous(expand = expansion(mult = c(0, 2))) +
  scale_color_manual(values = ct_cols) +
  theme(
    legend.position = "none",
    axis.line.x = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank()
  )
  
pdf(file.path(
    fig_dir,
    paste0("fig4_", tree_nm, ".pdf")
), height = 6, width = 5)
plot(tree)
dev.off()
```

Separate for adult and gastrula

```{r}
for (stage in c("adult", "gastrula")) {

  # read peaks matrix
  fp_clusters <- readRDS(
    file.path(tree_dir, "data", sprintf("gene_scores_%s.rds", stage))
  )

  # select features
  feats <- names(which(apply(
      fp_clusters, 1, function(x) {
        max(x) > fc_thrs
      }
  )))
  sum(rownames(fp_clusters) %in% feats)
  mean(rownames(fp_clusters) %in% feats)

  # selected features
  feats_select <- intersect(feats, rownames(fp_clusters))

  # subset matrices
  table_fp <- fp_clusters[feats_select, ]
  trim <- FALSE
  scale <- TRUE
  if (trim) {
    q <- quantile(table_fp, probs = c(0.01, 0.99))
    table_fp <- pmin(pmax(table_fp, q[1]), q[2])
  }
  if (scale) {
    table_fp <- scale(table_fp)
  }
  tmatrix_stage <- t(table_fp)

  require(ape)

  # bootstrap tree
  bptree_stage <- boot.tree(tmatrix_stage, B = 100, tree = "nj")
  bp_stage <- sum(as.integer(bptree$node.label), na.rm=TRUE)/bptree$Nnode

  # save tree
  tree_nm <- sprintf("NJ_gene_scores_%s_tree_%s_bootstrap", stage, thrs)
  tree_fn <- paste0(tree_nm, ".txt")
  ape::write.tree(bptree_stage, file.path(tree_dir, tree_fn))

  # plot tree
  require(ggtree)
  gt_stage <- ggtree(bptree_stage, ladderize = FALSE, branch.length = "none") +
    theme_tree2() +
    geom_tiplab(aes(color = label)) +
    geom_nodelab(aes(label = label), hjust = -0.2, size = 3) +
    scale_color_manual(values = ct_cols) +
    scale_x_continuous(expand = expansion(mult = c(0, 2))) +
    theme(
      legend.position = "none",
      axis.line.x = element_blank(),
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank()
    ) +
    labs(caption = sprintf(
      "%s genes with gene score > %s; BP %.1f", 
      length(feats_select), fc_thrs, bp_stage
    ))
  ggsave(file.path(
      fig_dir,
      paste0("fig4_", tree_nm, ".pdf")
  ), gt_stage, height = 6, width = 7)

}
```

### Peak based trees

Prepare data

```{r}
# load tree data
data_dir <- file.path(res_dir, "Clustering")

fp_clusters <- readRDS(file.path(
    data_dir, "Footprint_Adult_Gastrula_Peaks_cell_type_qnorm.rds"
))

# save peaks matrix
saveRDS(
  fp_clusters,
  file.path(tree_dir, "data", "peaks.rds")
)

# load data per stage
for (stage in c("adult", "gastrula")) {
  Stage <- switch(stage, "adult" = "Adult", "gastrula" = "Gastrula")
  fp_clusters <- readRDS(file.path(
      data_dir, sprintf("Footprint_%s_Peaks_cell_type.rds", Stage)
  ))
  stopifnot(all(colnames(fp_clusters) %in% cell_types))
  # save peaks matrix
  saveRDS(
    fp_clusters,
    file.path(tree_dir, "data", sprintf("peaks_%s.rds", stage))
  )
}
```

Euler diagram of overlapping adult and gastrula peaks

```{r}
pks_map <- fread(
  file.path(res_dir, "Peaks", "Peaks_cell_type_mapped.tsv.gz")
)
pks_ovl_mt <- unique(pks_map[, .(peak_adult, peak_gastrula)])
pks_ovl_mt <- pks_ovl_mt != ""
pks_ovl_mt <- as.matrix(pks_ovl_mt)
colnames(pks_ovl_mt) <- str_remove(colnames(pks_ovl_mt), "peak_")

require(eulerr)
stage_cols <- c("adult" = "#fdbf6f", "gastrula" = "#fde7ab")
fit <- euler(pks_ovl_mt)
p1 <- plot(
  fit,
  quantities = TRUE,
  fill = stage_cols,
  labels = list(font = 4)
)
pdf(
  file.path(fig_dir, "fig4_peaks_adult_gastrula_ovl.pdf"),
  width = 4, height = 2
)
print(p1)
dev.off()
```

Matrix of shared peaks in adult and gastrula

```{r}
# load data
fp_clusters <- readRDS(
  file.path(tree_dir, "data", "peaks.rds")
)
fc_thrs <- 2
thrs <- sprintf("FC%s_qnorm", fc_thrs)
feats_select <- rownames(fp_clusters)[!apply(fp_clusters, 1, max) < fc_thrs]
table_fp <- fp_clusters[feats_select, ]

#' Function to calculate jaccard overlap of features above given thrs
#' @param data matrix with groups in rows and features in columns
#' @param thrs threshold to consider a feature as present
jacc_ovl <- function(data, thrs) {
  data <- t(data)
  jacc_mt <- matrix(
    NA,
    nrow = ncol(data),
    ncol = ncol(data),
    dimnames = list(
      colnames(data), colnames(data)
    )
  )
  for (ct_1 in colnames(data)) {
    for (ct_2 in colnames(data)) {
      pk1 <- names(which(data[, ct_1] > thrs))
      pk2 <- names(which(data[, ct_2] > thrs))
      jac <- length(intersect(pk1, pk2)) / length(union(pk1, pk2))
      jacc_mt[ct_1, ct_2] <- jac
    }
  }
  1-jacc_mt
}


```

Peaks based tree

```{r}
# data
require(ape)

# single tree
jacc_mt <- jacc_ovl(t(table_fp), fc_thrs)
tree <- nj(as.dist(jacc_mt))

# bootstrap tree
tmatrix <- t(table_fp)
bptree <- boot.tree(tmatrix, B = 100, tree = "nj", func = jacc_ovl, thrs = fc_thrs)

bptree <- phytools::midpoint.root(bptree)

# save tree
tree_nm <- sprintf("NJ_peaks_ovl_adult_gastrula_tree_%s_bootstrap", thrs)
tree_fn <- paste0(tree_nm, ".txt")
ape::write.tree(bptree, file.path(tree_dir, tree_fn))

# plot tree
require(ggtree)
gt <- ggtree(bptree, ladderize = FALSE, branch.length = "none") +
  theme_tree2() +
  geom_tiplab(aes(color = label)) +
  geom_nodelab(aes(label = label), hjust = -0.2, size = 3) +
  scale_color_manual(values = ct_cols) +
  scale_x_continuous(expand = expansion(mult = c(0, 2))) +
  theme(
    legend.position = "none",
    axis.line.x = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank()
  ) +
  labs(caption = sprintf("%s peaks", length(feats_select)))


ggsave(file.path(
    fig_dir,
    paste0("fig4_", tree_nm, ".pdf")
), gt, height = 6, width = 4)

```

Separate trees for adult and gastrula

```{r}
for (stage in c("adult", "gastrula")) {

  # read peaks matrix
  fp_clusters <- readRDS(
    file.path(tree_dir, "data", sprintf("peaks_%s.rds", stage))
  )
  fc_stage_thrs <- switch(
    stage,
    "adult" = 2.5,
    "gastrula" = 2
  )

  # subset matrices
  table_fp_stage <- fp_clusters[!apply(fp_clusters, 1, max) < fc_stage_thrs, ]
  tmatrix <- t(table_fp_stage)

  # bootstrap tree
  bptree <- boot.tree(tmatrix, B = 100, tree = "nj")

  # save tree
  tree_nm <- sprintf("NJ_peaks_ovl_%s_tree_FC%s_bootstrap", stage, fc_stage_thrs)
  tree_fn <- paste0(tree_nm, ".txt")
  ape::write.tree(bptree, file.path(tree_dir, tree_fn))

  # plot tree
  require(ggtree)
  gt <- ggtree(bptree, ladderize = FALSE, branch.length = "none") +
    theme_tree2() +
    geom_tiplab(aes(color = label)) +
    geom_nodelab(aes(label = label), hjust = -0.2, size = 3) +
    scale_color_manual(values = ct_cols) +
    scale_x_continuous(expand = expansion(mult = c(0, 2))) +
    theme(
      legend.position = "none",
      axis.line.x = element_blank(),
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank()
    ) +
    labs(caption = sprintf("%s peaks", length(feats_select)))
  ggsave(file.path(
      fig_dir,
      paste0("fig4_", tree_nm, ".pdf")
  ), gt, height = 6, width = 4)

}
```

Heatmap of peak overlaps between cell types of different stages, each stage ordered by NJ clustering

```{r}
hm_name <- "peaks\njaccard\noverlap"

adult_ids <- which(rownames(jacc_mt) %in% adult_cell_types)
gastr_ids <- which(colnames(jacc_mt) %in% gastr_cell_types)

adult_cts <- rownames(jacc_mt)[adult_ids]
gastr_cts <- colnames(jacc_mt)[gastr_ids]

hm_mat <- jacc_mt[adult_ids, gastr_ids]

# order cell types
ct_ord <- sapply(c("adult", "gastrula"), function(stage) {
  fc_stage_thrs <- switch(
    stage,
    "adult" = 2.5,
    "gastrula" = 2
  )
  tree_nm <- sprintf("NJ_peaks_ovl_%s_tree_FC%s", stage, fc_stage_thrs)
  tree_fn <- file.path(tree_dir, paste0(tree_nm, "_consensus.txt"))
  tree <- ape::read.tree(tree_fn)
  tree$tip.label
}, simplify = FALSE, USE.NAMES = TRUE)
stopifnot(all(ct_ord[["adult"]] %in% rownames(hm_mat)))
stopifnot(all(ct_ord[["gastrula"]] %in% colnames(hm_mat)))
hm_mat <- hm_mat[ct_ord[["adult"]], ct_ord[["gastrula"]]]

# plot
require(ComplexHeatmap)

# colors
col_vec_pks <- c("#ffffb2", "#fecc5c", "#fd8d3c", "#f03b20", "#bd0026")
col_val_pks = seq(
  quantile(hm_mat, 0.01), quantile(hm_mat, 0.99),
  length.out = length(col_vec_pks)
)
hm_col <- circlize::colorRamp2(col_val_pks, col_vec_pks)
stage_cols <- c("gastrula" = "#fde7ab", "adult" = "#fdbf6f")

# cell type color annotations
col_ann <- HeatmapAnnotation(
  which = "column",
  "cell type" = colnames(hm_mat),
  col = list("cell type" = ct_cols),
  show_legend = FALSE
)
row_ann <- HeatmapAnnotation(
  which = "row",
  "cell type" = rownames(hm_mat),
  col = list("cell type" = ct_cols),
  show_legend = FALSE
)

hm_pks <- Heatmap(
  hm_mat, name = hm_name,
  col = hm_col, na_col = "#ffffff",
  border = TRUE, use_raster = FALSE,
  cluster_rows = FALSE, cluster_columns = FALSE,
  show_row_dend = FALSE, show_column_dend = FALSE,
  show_row_names = TRUE, show_column_names = TRUE,
  top_annotation = col_ann,
  left_annotation = row_ann,
  row_title = sprintf("%i adult cell types", nrow(hm_mat)),
  column_title = sprintf("%i gastrula cell types", ncol(hm_mat)),
  column_title_side = "top"
)

pdf(
    file.path(fig_dir, "fig1_adult_gastrula_cell_type_marker_peaks_ovl.pdf"),
    width = 5, height = 6.5
)
print(hm_pks)
dev.off()
```

### Motif based trees

-   all motifs - not used

```{r}
# motif enrichment data
adult_dt <- fread(file.path(
  adult_dir, "Archetypes",
  "archetype-motif-enrichment-gene-expression-accessibility.tsv.gz"
))
adult_dt[, cell_type := str_replace_all(cell_type, cell_type_rename)]
adult_dt[, cell_type_label := paste0("adult__", cell_type)]
setnames(
  adult_dt,
  c("archetype_name", "archetype_fc", "archetype_padj"),
  c("motif", "fc", "padj")
)

gastr_dt <- fread(file.path(
  gastr_dir, "Motifs",
  "archetype-motif-enrichment-gene-expression-accessibility.tsv.gz"
))
gastr_dt[, cell_type := str_replace_all(cell_type, "\\.", "_")]
gastr_dt[, cell_type := str_replace_all(cell_type, cell_type_rename)]
gastr_dt[, cell_type_label := paste0("gastrula__", cell_type)]
setnames(
  gastr_dt,
  c("archetype_name", "archetype_fc", "archetype_padj"),
  c("motif", "fc", "padj")
)

# check if all motifs are in both adult and gastrula
intersect_mots <- intersect(
  unique(adult_dt$motif),
  unique(gastr_dt$motif)
)
length(intersect_mots)
mean(unique(adult_dt$motif) %in% intersect_mots)
mean(unique(adult_dt$motif) %in% intersect_mots)

# combine data
mot_dt <- rbindlist(list(
  adult = adult_dt[],
  gastrula = gastr_dt[]
), fill = TRUE, idcol = "stage")
mot_dt <- unique(mot_dt[, .(
  cell_type, stage, cell_type_label, motif, fc, padj
)])

# sanity check that there is only one entry per motif per cell type
mot_dt[,.N,.(motif, cell_type_label)][N>1]

# save all motifs
saveRDS(
  mot_dt,
  file.path(
    tree_dir, "data", "motifs_all.rds"
  )
)

# subset only dissimilar motifs
mots_arc_lst <- readRDS(file.path(
  adult_dir, "Archetypes",
  "motif-archetypes-PPM-PCCnorm-0.8-IC0.5-8bp-pwms.rds"
))
mots_arc_lst <- sapply(names(mots_arc_lst), function(x) {
  mots_arc_lst[[x]]@alphabet <- "DNA"
  mots_arc_lst[[x]]
}, USE.NAMES = TRUE, simplify = FALSE)

# motif similarity
similarity <- "PPM"
method <- "PCC"
normalise_scores <- TRUE
hclust_method <- "complete"
dist_method <- "euclidean"
sim_mat <- compare_motifs(
  motifs = mots_arc_lst,
  use.type = similarity,
  method = method,
  normalise.scores = FALSE,
  min.position.ic = 0,
  min.mean.ic = 0,
  nthreads = 0
)
rownames(sim_mat) <- colnames(sim_mat) <- names(mots_arc_lst)

# ordering
ord <- rownames(sim_mat)
hc <- hclust(
  tgs_dist(sim_mat # method = dist_method
), method = hclust_method)
ord <- hc$labels[hc$order]
sim_mat <- sim_mat[ord, ord]
saveRDS(
  sim_mat,
  file.path(tree_dir, "data", "motifs_similarity.rds")
)
saveRDS(
  hc,
  file.path(tree_dir, "data", "motifs_hclust.rds")
)

# clusters
cuts <- seq(200, 1600, 50)
cuts_scores <- sapply(cuts, function(h) {
  ctr <- cutree(hc, k = h)
  cl_scores <- sapply(unique(ctr), function(x) {
    ms <- names(ctr[ctr == x])
    within_cl <- median(sim_mat[ms, ms], na.rm = TRUE)
    between_cl <- median(
      unlist(sim_mat[!(rownames(sim_mat) %in% ms), ms]),
      unlist(sim_mat[ms, !(colnames(sim_mat) %in% ms)]),
      na.rm = TRUE
    )
    if (is.na(between_cl)) between_cl <- 1
    within_cl / between_cl
  })
  mean(cl_scores, na.rm = TRUE)
})
k <- cuts[which.max(cuts_scores)]
k <- 1250
plot(cuts, cuts_scores)
abline(v = k)

ctr <- cutree(hc, k = k)

mot_dt[, cluster := ctr[motif]]
setorder(mot_dt, cluster, padj)
select_motifs <- mot_dt[padj < 0.05][fc != Inf][order(-fc)][, .SD[1], cluster]$motif
mot_dt <- mot_dt[motif %in% select_motifs]


```

```{r}
# check distributions
mot_dc <- dcast.data.table(
  unique(mot_dt[cell_type %in% c("cnidocyte", "gland")]),
  motif ~ stage + cell_type, value.var = "fc"
)
mot_dm <- melt.data.table(mot_dc, id.vars = "motif")
mot_dm[, stage := str_extract(variable, "adult|gastrula")]
mot_dm[, cell_type := str_extract(variable, "gland|cnidocyte")]
mot_dc <- dcast.data.table(
  mot_dm,
  motif + cell_type ~ stage, value.var = "value"
)
mot_dc[, diff := adult - gastrula]
mot_dc[, label := ""]
mot_dc[abs(diff) > 1, label := str_remove(motif, "(?<=Nvec).+")]
gp_mot_fc_dist <- ggplot(
    mot_dc,
    aes(adult, gastrula, label = label)
  ) +
  geom_point(aes(color = cell_type)) +
  geom_abline() +
  geom_text_repel(max.overlaps = Inf) +
  scale_color_manual(values = ct_cols) +
  facet_wrap("cell_type") +
  coord_fixed() +
  theme(legend.position = "none")
ggsave(
  file.path(fig_dir, "motif_fc_per_cell_type.pdf"),
  height = 12, width = 14
)
```

```{r}
# features selection
fc_thrs <- 1.5
padj_thrs <- 0.05
thrs <- sprintf("FC%s_padj_%s", fc_thrs, padj_thrs)

sg_mot <- mot_dt[padj < padj_thrs & fc > fc_thrs]$motif
mot_sg <- mot_dt[motif %in% sg_mot]
sum(unique(mot_dt$motif) %in% sg_mot)
mean(unique(mot_dt$motif) %in% sg_mot)

# transfor data for clustering
mot_dc <- dcast.data.table(
  mot_sg, motif ~ cell_type_label,
  value.var = "fc"
)
mot_mt <- data.matrix(mot_dc[, -1])
rownames(mot_mt) <- mot_dc$motif

# distance matrix
dmatrix <- tgstat::tgs_dist(t(mot_mt))

# NJ clustering
require(ape)
tree <- nj(dmatrix)
tree_nm <- sprintf("NJ_motifs_adult_gastrula_tree_%s", thrs)
tree_fn <- file.path(fig_dir, paste0(tree_nm, ".txt"))
ape::write.tree(tree, tree_fn)

# tree visuals
tree <- ape::read.tree(tree_fn)
tips <- tree$tip.label
tree <- groupOTU(
    tree,
    sapply(
        cell_types,
        function(ct) grep(ct, tips),
        USE.NAMES = TRUE,
        simplify = FALSE
    )
)
gt <- ggtree(tree, aes(color = group), ladderize = FALSE) +
  scale_color_manual(values = ct_cols) +
  theme_tree2() +
  geom_tiplab() +
  scale_x_continuous(limits = c(NA, 40)) +
  theme(legend.position = "none")
ggsave(file.path(
    fig_dir,
    paste0(tree_nm, ".pdf")
), gt, height = 6, width = 7)

```

-   motifs assigned to TFs

Plot motifs

```{r}
# assigned tfs
exp_chromvar_dt <- fread(
    file.path(
        adult_dir, "insilicoChIP", "metacell", "03",
        "gene_expression_umifrac_chromVAR_genes_exp_FC2_acc_FC4_spearman.tsv.gz"
    )
)

# select best motif for each gene based on correlation
exp_chromvar_dt[, cor := cor(.SD$expression, .SD$zscore), .(
    gene, og, pfam, motif, id
)]
exp_chromvar_cor_dt <- unique(
    exp_chromvar_dt[, .(gene, og, pfam, motif, id, cor)]
)
exp_chromvar_cor_top <- exp_chromvar_cor_dt[
    order(cor, decreasing = TRUE)
][, .SD[1], gene]
tf_dt <- exp_chromvar_dt[id %in% exp_chromvar_cor_top$id]
tf_dt <- unique(tf_dt[, .(motif, gene, og, pfam)])
tf_dt <- merge.data.table(
  tf_dt, marks[, .(gene, name_old)], by = "gene", all.x = TRUE, sort = FALSE
)
tf_dt[is.na(name_old), name_old := substr(og, 1, 15)]
tf_dt[, arch := str_extract(motif, "ARCH\\d+")]
tf_dt[, label := paste(arch, name_old, str_remove(gene, "Nvec(_vc1.1|_v1g)*_"), sep = "_")]
tf_dt[, label := substr(label, 1, 40)]

# load motifs pwms and subset tfs
arch_list_nm <- universalmotif::read_meme(file.path(
  adult_dir, "Archetypes", "motif-archetypes-PPM-PCCnorm-0.8-IC0.5-8bp-pwms.meme"
))
names(arch_list_nm) <- sapply(arch_list_nm, function(x) str_extract(x@name, "ARCH\\d+"))
mot_tf <- unique(mot_dt[, .(gene, motif)])
mot_tf[, arch := str_extract(motif, "ARCH\\d+")]
arch_list_tf <- arch_list_nm[names(arch_list_nm) %in% tf_dt$arch]
arch_list_tf <- sapply(names(arch_list_tf), function(i) {
  x <- arch_list_tf[[i]]
  s <- unique(tf_dt[arch == i]$label)
  n <- paste0(str_remove_all(s, i), collapse = "")
  m <- paste0(i, n, collapse = "")
  m <- substr(m, 1, 40)
  m <- str_replace_all(m, "[:\\/]", "_")
  x@name <- m
  x
}, simplify = FALSE, USE.NAMES = TRUE)

# save pwms
universalmotif::write_meme(
  motifs = arch_list_tf,
  file = file.path(
    adult_dir, "Archetypes", "motif-archetypes-PPM-PCCnorm-0.8-IC0.5-8bp-pwms-tfs.meme"
  ),
  overwrite = TRUE
)
```

Clustering

```{r}
# motif enrichment data
adult_dt <- fread(file.path(
  adult_dir, "Archetypes",
  "motif-enrichment-cell-type-archetypes-all.tsv"
))
setnames(adult_dt, "label", "cell_type")
adult_dt[, cell_type := str_replace_all(cell_type, cell_type_rename)]
adult_dt[, cell_type_label := paste0("adult__", cell_type)]

gastr_dt <- fread(file.path(
  gastr_dir, "Motifs",
  "motif-enrichment-cell-type.tsv"
))
gastr_dt[, cell_type := str_replace_all(cell_type, cell_type_rename)]
gastr_dt[, cell_type_label := paste0("gastrula__", cell_type)]
gastr_dt[, cell_type_label := str_replace_all(cell_type, "\\.", "_")]

# sanity check all motifs are in both adult and gastrula
intersect_mots <- intersect(
  unique(adult_dt$motif),
  unique(gastr_dt$motif)
)
length(intersect_mots)
all(unique(adult_dt$motif) %in% intersect_mots)
all(unique(gastr_dt$motif) %in% intersect_mots)

# check distributions
mot_dc <- dcast.data.table(
  unique(mot_dt[cell_type %in% c("cnidocyte", "gland")]),
  motif ~ stage + cell_type, value.var = "fc"
)
mot_dm <- melt.data.table(mot_dc, id.vars = "motif")
mot_dm[, stage := str_extract(variable, "adult|gastrula")]
mot_dm[, cell_type := str_extract(variable, "gland|cnidocyte")]
mot_dc <- dcast.data.table(
  mot_dm,
  motif + cell_type ~ stage, value.var = "value"
)
mot_dc[, diff := adult - gastrula]
mot_dc[, label := ""]
mot_dc[abs(diff) > 1.2, label := str_remove(motif, "(?<=Nvec).+")]
gp_mot_fc_dist <- ggplot(
    mot_dc,
    aes(adult, gastrula, label = label)
  ) +
  geom_point(aes(color = cell_type)) +
  geom_abline() +
  geom_text_repel(max.overlaps = Inf) +
  scale_color_manual(values = ct_cols) +
  facet_wrap("cell_type") +
  coord_fixed() +
  theme(legend.position = "none")
ggsave(
  file.path(fig_dir, "motif_fc_per_cell_type.pdf"),
  height = 16, width = 24
)

# features selection
fc_thrs <- 2.5
padj_thrs <- 0.05
thrs <- sprintf("FC%s_padj_%s", fc_thrs, padj_thrs)
sg_mot <- mot_dt[padj < padj_thrs & fc > fc_thrs]$motif
mot_sg <- mot_dt[motif %in% sg_mot]
sum(unique(mot_dt$motif) %in% sg_mot)
mean(unique(mot_dt$motif) %in% sg_mot)

# transfor data for clustering
mot_dc <- dcast.data.table(
  mot_sg, motif ~ cell_type_label,
  value.var = "fc"
)
mot_mt <- data.matrix(mot_dc[, -1])
rownames(mot_mt) <- mot_dc$motif

# distance matrix
dmatrix <- tgstat::tgs_dist(t(mot_mt))

# NJ clustering
require(ape)
tree <- nj(dmatrix)
tree_nm <- sprintf("NJ_motifs_adult_gastrula_tree_%s", thrs)
tree_fn <- file.path(fig_dir, paste0(tree_nm, ".txt"))
ape::write.tree(tree, tree_fn)

# tree visuals
tree <- ape::read.tree(tree_fn)
tips <- tree$tip.label
tree <- groupOTU(
    tree,
    sapply(
        cell_types,
        function(ct) grep(ct, tips),
        USE.NAMES = TRUE,
        simplify = FALSE
    )
)
gt <- ggtree(tree, aes(color = group), ladderize = FALSE) +
  scale_color_manual(values = ct_cols) +
  theme_tree2() +
  geom_tiplab() +
  scale_x_continuous(limits = c(NA, 40)) +
  theme(legend.position = "none")
ggsave(file.path(
    fig_dir,
    paste0(tree_nm, ".pdf")
), gt, height = 6, width = 7)

```

Separate trees for adult and gastrula

```{r}
# rows and columns per dtage
dmatrix <- as.matrix(dmatrix)
adult_ids_row <- grep("adult", rownames(dmatrix))
adult_ids_col <- grep("adult", colnames(dmatrix))
gastr_ids_row <- grep("adult", rownames(dmatrix), invert = TRUE)
gastr_ids_col <- grep("adult", colnames(dmatrix), invert = TRUE)

for (stage in c("adult", "gastrula")) {
  
  # get ids
  ids <- switch(
    stage,
    "adult" = list(adult_ids_row, adult_ids_col),
    "gastrula" = list(gastr_ids_row, gastr_ids_col)
  )

  # NJ clustering
  require(ape)
  tree <- nj(dist(dmatrix[ids[[1]], ids[[2]]]))
  tree_nm <- sprintf("NJ_motifs_%s_tree_%s", stage, thrs)
  tree_fn <- file.path(fig_dir, paste0(tree_nm, ".txt"))
  ape::write.tree(tree, tree_fn)

  # tree visuals
  tree <- ape::read.tree(tree_fn)
  tips <- tree$tip.label
  tree <- groupOTU(
      tree,
      sapply(
          cell_types,
          function(ct) grep(ct, tips),
          USE.NAMES = TRUE,
          simplify = FALSE
      )
  )
  gt <- ggtree(tree, aes(color = group), ladderize = FALSE) +
    scale_color_manual(values = ct_cols) +
    theme_tree2() +
    geom_tiplab() +
    scale_x_continuous(limits = c(NA, 60)) +
    theme(legend.position = "none")
  ggsave(file.path(
      fig_dir,
      paste0(tree_nm, ".pdf")
  ), gt, height = 6, width = 7)


}
```

### GRN based trees

```{r}
lvl <- "metacell"
thrs <- 0.1
itr <- "03"
id <- "genes_exp_FC2_acc_FC4_spearman"
exp <- "fc"
acc <- "access"
thr_q_exp <- 1.4
thr_q_acc <- 0.4
chr_thrs <- 4

for (thr_q_exp in c(1.4)) {

  for (chr_thrs in c(4)) {
    
    for (sub in c("genes", "tf")) {
      
      insilico_chip_dir <- file.path(adult_dir, "insilicoChIP")
      thrs <- sprintf(
        "expression_%s_%s_accessibility_%s_%s_chromvar_%s",
        exp, thr_q_exp, acc, thr_q_acc, chr_thrs
      )
      jac_mt <- readRDS(file.path(tree_dir, "data", sprintf(
          "grn_cell_type_jacc_%s_%s.rds", sub, thrs
      )))
      rownames(jac_mt) <- str_replace_all(rownames(jac_mt), cell_type_rename)
      colnames(jac_mt) <- str_replace_all(colnames(jac_mt), cell_type_rename)
      saveRDS(
        jac_mt,
        file.path(tree_dir, "data", sprintf(
          "grn_cell_type_jacc_%s_%s.rds", sub, thrs
      )))
      
      # NJ clustering
      require(ape)
      tree <- nj(dist(jac_mt))
      tree_nm <- sprintf("NJ_GRN_adult_gastrula_tree_%s_%s", sub, thrs)
      tree_fn <- file.path(fig_dir, paste0(tree_nm, ".txt"))
      ape::write.tree(tree, tree_fn)
  
      # tree visuals
      tree <- ape::read.tree(tree_fn)
      tips <- tree$tip.label
      tree <- groupOTU(
          tree,
          sapply(
              cell_types,
              function(ct) grep(ct, tips),
              USE.NAMES = TRUE,
              simplify = FALSE
          )
      )
      gt <- ggtree(tree, aes(color = group), ladderize = FALSE) +
        scale_color_manual(values = ct_cols) +
        theme_tree2() +
        geom_tiplab() +
        scale_x_continuous(limits = c(NA, 4)) +
        theme(legend.position = "none")
      ggsave(file.path(
          fig_dir,
          paste0(tree_nm, ".pdf")
      ), gt, height = 6, width = 7)
  
      # rows and columns per stage
      gastr_ids_row <- grep("gastrula", rownames(jac_mt))
      gastr_ids_col <- grep("gastrula", colnames(jac_mt))
      adult_ids_row <- grep("adult", rownames(jac_mt))
      adult_ids_col <- grep("adult", colnames(jac_mt))
  
      for (stage in c("adult", "gastrula")) {
        
        # get ids
        ids <- switch(
          stage,
          "adult" = list(adult_ids_row, adult_ids_col),
          "gastrula" = list(gastr_ids_row, gastr_ids_col)
        )
  
        # NJ clustering
        require(ape)
        tree <- nj(dist(jac_mt[ids[[1]], ids[[2]]]))
        tree_nm <- sprintf("NJ_GRN_%s_tree_%s_%s", stage, sub, thrs)
        tree_fn <- file.path(fig_dir, paste0(tree_nm, ".txt"))
        ape::write.tree(tree, tree_fn)
  
        # tree visuals
        tree <- ape::read.tree(tree_fn)
        tips <- tree$tip.label
        tree <- groupOTU(
            tree,
            sapply(
                cell_types,
                function(ct) grep(ct, tips),
                USE.NAMES = TRUE,
                simplify = FALSE
            )
        )
        gt <- ggtree(tree, aes(color = group), ladderize = FALSE) +
          scale_color_manual(values = ct_cols) +
          theme_tree2() +
          geom_tiplab() +
          scale_x_continuous(limits = c(NA, 4)) +
          theme(legend.position = "none")
        ggsave(file.path(
            fig_dir,
            paste0(tree_nm, ".pdf")
        ), gt, height = 6, width = 7)
  
      }

    }
  }
}

```

Separate trees for adult and gastrula

```{r}
```

### GKM-SVM based trees

Load data

```{r}
gkmsvm_dir <- file.path(res_dir, "gkmSVM")
test_dt <- fread(file.path(gkmsvm_dir, "models.test.scores.tsv.gz"))
```

Bootstrap trees

```{r}
require(pROC)
require(ape)

# Function to compute AUC matrix
compute_auc_matrix <- function(test_dt, mds, tst) {
    auc_mat <- matrix(NA, nrow = length(mds), ncol = length(tst), 
                      dimnames = list(mds, tst))
    for (i in mds) {
        for (j in tst) {

            cvp <- test_dt[model == i]
            cfg <- cvp[testset == j]
            cbg <- cvp[!peak %in% cfg$peak]
            
            # Skip if empty
            if (nrow(cfg) == 0 || nrow(cbg) == 0) next
            
            vpo <- cfg$score
            vne <- cbg$score
            
            roc <- tryCatch(
                pROC::roc(controls = vpo, cases = vne, direction = ">", ci = TRUE),
                error = function(e) return(NULL)
            )
            
            if (!is.null(roc)) {
                auc_mat[i, j] <- roc$auc
            }
        }
    }
    
    return(auc_mat)
}

# compute AUC matrix
testsets <- unique(test_dt$testset)
models <- unique(test_dt$model)
auc_mat <- compute_auc_matrix(test_dt, models, testsets)

# load pre computed AUC matrix
auc_mat_prec <- readRDS(file.path(tree_dir, "data", "gksvm_03.rds"))

# make single tree
tree <- nj(dist(auc_mat))

# make single tree
tree <- nj(dist(auc_mat_prec))
tree$tip.label[tree$tip.label=="gastrula_cnidocyte"] <- "gastrula_cnidocyte_gastrula"
tree$tip.label[tree$tip.label=="gastrula_gland"] <- "gastrula_gland_mucin"
tree$tip.label <- str_remove(tree$tip.label, "(adult|gastrula)_")
tree$tip.label <- str_replace_all(tree$tip.label, cell_type_rename)
tree <- phytools::midpoint.root(tree)

# save
tree_fn <- file.path(tree_dir, "NJ_gkmSVM_auc_adult_gastrula_tree.txt")
ape::write.tree(tree, tree_fn)

# plot single tree
require(ggtree)
gt <- ggtree(tree, ladderize = FALSE, branch.length = "none") +
  theme_tree2() +
  geom_tiplab(aes(color = label)) +
  scale_color_manual(values = ct_cols) +
  scale_x_continuous(expand = expansion(mult = c(0, 2))) +
  theme(
    legend.position = "none",
    axis.line.x = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank()
  )
ggsave(
  file.path(fig_dir, "fig4_NJ_gkmSVM_auc_adult_gastrula_tree.pdf"),
  gt, height = 6, width = 4
)

# bootstrap parameters
n_bootstrap <- 100

# store bootstrap trees
bootstrap_trees <- vector("list", n_bootstrap)

set.seed(123)

for (b in seq_len(n_bootstrap)) {

    print(sprintf("Bootstrap %i/%i", b, n_bootstrap))

    # sample peaks with replacement within each testset
    boot_dt <- test_dt[, .SD[sample(.N, .N, replace = TRUE)], by = .(model, testset)]
    
    # compute AUC matrix
    auc_mat <- compute_auc_matrix(boot_dt, models, testsets)
    stopifnot(all.equal(sort(rownames(auc_mat)),sort(colnames(auc_mat))))

    # construct NJ tree
    tree <- nj(dist(auc_mat))
    bootstrap_trees[[b]] <- tree
}

# remove null trees
bootstrap_trees <- bootstrap_trees[!sapply(bootstrap_trees, is.null)]

# plot bootstrap trees
require(ggtree)
pdf(file.path(
    fig_dir,
    paste0("fig4_NJ_gkmSVM_auc_adult_gastrula_trees_bootstrap.pdf")
), height = 6, width = 4)
for (bptree in bootstrap_trees) {

  clade_freqs <- prop.clades(
    phy = bptree, 
    part = prop.part(bootstrap_trees)
  )
  bptree$node.label <- clade_freqs

  # turn nodes with low support into ploitomies
  # bptree <- di2multi(bptree, tol = 0.01)

  # plot tree
  require(ggtree)
  gt <- ggtree(bptree, ladderize = FALSE) +
    theme_tree2() +
    geom_tiplab(aes(color = label)) +
    geom_nodelab(aes(label = label), hjust = -0.2, size = 3) +
    scale_color_manual(values = ct_cols) +
    scale_x_continuous(expand = expansion(mult = c(0, 2))) +
    theme(
      legend.position = "none",
      axis.line.x = element_blank(),
      axis.text.x = element_blank(),
      axis.ticks.x = element_blank()
    )
  print(gt)

}
dev.off()

# save trees
tree_nm <- "NJ_gkmSVM_auc_adult_gastrula_tree_bootstrap"
saveRDS(
  bootstrap_trees, file.path(tree_dir, paste0(tree_nm, "s.rds"))
)
```

Build consensus from bootstrap trees

```{r}
# load bootstrap trees
tree_nm <- "NJ_gkmSVM_auc_adult_gastrula_tree_bootstrap"
bootstrap_trees <- readRDS(file.path(tree_dir, paste0(tree_nm, "s.rds")))

# plot one tree
bptree <- bootstrap_trees[[5]]
clade_freqs <- prop.clades(
  phy = bptree, 
  part = prop.part(bootstrap_trees)
)
bptree$node.label <- clade_freqs

# turn nodes with low support into ploitomies
# bptree <- di2multi(bptree, tol = 0.01)

# save tree
tree_fn <- paste0(tree_nm, ".txt")
ape::write.tree(bptree, file.path(tree_dir, tree_fn))

# plot tree
require(ggtree)
gt <- ggtree(bptree, ladderize = FALSE, branch.length = "none") +
  theme_tree2() +
  geom_tiplab(aes(color = label)) +
  geom_nodelab(aes(label = label), hjust = -0.2, size = 3) +
  scale_color_manual(values = ct_cols) +
  scale_x_continuous(expand = expansion(mult = c(0, 2))) +
  theme(
    legend.position = "none",
    axis.line.x = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank()
  )
ggsave(file.path(
    fig_dir,
    paste0("fig4_", tree_nm, ".pdf")
), gt, height = 6, width = 4)



```

## Retractor muscle convergence

Load and parse peak info.

```{r}
# peaks accessibility
fp_clusters <- readRDS(file.path(
    res_dir, "Clustering", "Sum_Adult_Gastrula_Peaks_cell_type_qnorm.rds"
))
peak_acc_dt <- melt.data.table(
  as.data.table(as.matrix(fp_clusters), keep.rownames = "peak"),
  id.vars = "peak", variable.name = "cell_type", value.name = "peak_access"
)

# peaks assigned to cell types
peak_cts_dt <- fread(file.path(
  res_dir, "Peaks", "Peaks_per_cell_type_mapped.tsv.gz"
))[, .(seqnames, start, end, peak, cell_type)]

peak_acc_dt <- merge.data.table(
  peak_acc_dt, peak_cts_dt, by = c("peak", "cell_type"),
  allow.cartesian = TRUE, sort = FALSE
)

# peaks assigned to genes
peak_gen_dt <- fread(file.path(
  res_dir, "Peaks", "Peaks_cell_type_mapped_gene_assignment_coaccess.tsv.gz"
))[, .(seqnames, start, end, peak, gene)][gene != ""]

peak_acc_dt <- merge.data.table(
  peak_acc_dt, peak_gen_dt, by = c("peak", "seqnames", "start", "end"),
  allow.cartesian = TRUE, sort = FALSE
)

# promoters classification
peak_pro_dt <- fread(file.path(
  res_dir, "Peaks", "annotaton_peaks.tsv.gz"
))[, .(gene, peak, promoter)]


# exclude constitutive promoters
peak_cpr <- peak_pro_dt[promoter == "CP"]$peak
peak_acc_dt <- peak_acc_dt[!peak %in% peak_cpr]

# order
setcolorder(peak_acc_dt, c(
  "seqnames", "start", "end", "peak", "cell_type", "peak_access", "gene"
))
```

Combine peak info with gene scores.

```{r}
# genes accessibility (i.e. gene scores)
gene_sco <- readRDS(file.path(
  res_dir, "Metacells", "cell_type", "gene_scores_cell_type.rds"
))
gene_sco_dt <- melt.data.table(
  as.data.table(as.matrix(gene_sco), keep.rownames = "gene"),
  id.vars = "gene", variable.name = "cell_type", value.name = "gene_score"
)
setorder(gene_sco_dt, -gene_score)
gene_sco_dt[, gene_cell_type_rank := 1:.N, gene]

# add gene scores to peaks
peak_dt <- merge.data.table(
  peak_acc_dt, gene_sco_dt,
  by = c("gene", "cell_type"),
  sort = FALSE
)

# add gene annotation
peak_dt <- merge.data.table(
  peak_dt, gnan[, .SD[1], gene], by = "gene",
  sort = FALSE, all.x = TRUE
)

# order
setcolorder(peak_dt, colnames(peak_acc_dt))
```

Compare overlap of gene scores between selected muscle cell types.

```{r}
# select cell types we are comparing
ctn <- "muscle"
cts <- switch(
  ctn,
  "muscle" =  c("muscle_tentacle_retractor", "muscle_mesentery_retractor"),
  "TR_epidermis_1" = c("muscle_tentacle_retractor", "epidermis_1"),
  "TR_epidermis_2" = c("muscle_tentacle_retractor", "epidermis_2"),
  "TR_precursors_3" = c("muscle_tentacle_retractor", "precursors_3"),
  "TR_digfil_1" = c("muscle_tentacle_retractor", "digestive_filaments_1"),
  "TR_CM_2" = c("muscle_tentacle_retractor", "gastro_circular_muscle_2"),
  "MR_CM_2" = c("muscle_mesentery_retractor", "gastro_circular_muscle_2")
)

# colors for euler diagram plots
cts_cols <- ct_cols[cts]
both_col <- structure(colorspace::hex(colorspace::mixcolor(
    0.5, colorspace::hex2RGB(cts_cols[1]), colorspace::hex2RGB(cts_cols[2])
  )
), names = "both")
both_col <- structure(colorspace::lighten(both_col, 0.3), names = "both")
cts_cols <- c(cts_cols, both_col, "other" = "#dbdbdb")

# subset gene score data
gene_access <- gene_sco_dt[cell_type %in% cts]
gene_access_dt <- dcast.data.table(
  gene_access, gene ~ cell_type, value.var = "gene_score"
)

# filter gene scores
min_thrs_sco <- 1.5
max_thrs_sco <- 1.5
thrs_sco <- paste(min_thrs_sco, max_thrs_sco, sep = "_")
if (min_thrs_sco == max_thrs_sco) thrs_sco <- min_thrs_sco
gene_access_dt[, ratio := gene_access_dt[[cts[1]]] / gene_access_dt[[cts[2]]]]
gene_access_dt[, category := "other"]
gene_access_dt[gene_access_dt[[cts[1]]] > 1 & gene_access_dt[[cts[2]]] > 1, category := "both"]
gene_access_dt[ratio > 2 & gene_access_dt[[cts[1]]] > max_thrs_sco & gene_access_dt[[cts[2]]] < min_thrs_sco, category := cts[1]]
gene_access_dt[ratio < 0.5 & gene_access_dt[[cts[2]]] > max_thrs_sco & gene_access_dt[[cts[1]]] < min_thrs_sco, category := cts[2]]
gene_access_dt[, .N, category]

# select genes in overlap and non-overlapping
gene_acc_dt <- unique(gene_access_dt[category != "other"][, .(gene, category)])
setnames(gene_acc_dt, "category", "cell_type")

# summarize gene score overlap
gene_acc_dt[, n_cell_types := .N, gene]
gene_acc_dt <- unique(
  gene_acc_dt[, .(gene, cell_type, n_cell_types)][n_cell_types == 2, cell_type := "both"][, n_cell_types := NULL]
)
gene_acc_dt[, .N, cell_type]

```

* scatterplot of gene accessibility

```{r}
# limits for plot
lim <- pmin(
  quantile(gene_access_dt[[cts[1]]] ,0.9999),
  quantile(gene_access_dt[[cts[2]]] ,0.9999)
)

# scatterplot of gene scores
gene_sco_scat <- ggplot(gene_access_dt, aes_string(cts[1], cts[2])) +
  ggrastr::geom_point_rast(data = gene_access_dt[category == "other"], aes(color = str_remove(category, "(adult|gastrula)_"))) +
  ggrastr::geom_point_rast(data = gene_access_dt[category == "both"], aes(color = str_remove(category, "(adult|gastrula)_"))) +
  ggrastr::geom_point_rast(data = gene_access_dt[!category %in% c("other", "both")], aes(color = str_remove(category, "(adult|gastrula)_"))) +
  scale_x_continuous(limits = c(0, lim), oob = squish) +
  scale_y_continuous(limits = c(0, lim), oob = squish) +
  scale_color_manual(values = cts_cols, name = "category") +
  labs(
    title = sprintf("gene score thrs %s", thrs_sco),
    subtitle = sprintf(
      "%s %s\n%s %s\n%s %s",
      cts[1], nrow(gene_access_dt[category == cts[1]]),
      cts[2], nrow(gene_access_dt[category == cts[2]]),
      "intersect", nrow(gene_access_dt[category == "both"])
    )
  ) +
  coord_fixed()
ggsave(
  file.path(fig_dir, sprintf("fig4_gene_score_scatterplot_%s_%s.pdf", ctn, thrs_sco)),
  gene_sco_scat, width = 10, height = 5
)
```

* venn diagram of gene accessibility

```{r}
# euler diagram of gene scores overlap
gns_ovl_dt <- data.table(gene = gene_acc_dt$gene)
for (i in cts) {
  gns_ovl_dt[, I(i) := gene_acc_dt$cell_type == i]
}
gns_ovl_dt[gene %in% gene_acc_dt[cell_type == "both"]$gene, colnames(gns_ovl_dt)[-1] := TRUE]
gns_ovl_mt <- as.matrix(gns_ovl_dt[, -1])

require(eulerr)
fit <- euler(gns_ovl_mt)
p_genes <- plot(
  fit,
  quantities = TRUE,
  fill = ct_cols[str_remove(cts, "(adult|gastrula)_")],
  labels = list(font = 4),
  main = "gene score"
)
pdf(
  file.path(fig_dir, sprintf("fig4_genes_score_%s_ovl.pdf", ctn)),
  width = 4, height = 2
)
print(p_genes)
dev.off()
```

For peaks associated to expressed genes, compare their accessibility 

```{r}
# select peaks assigned to genes selected above
peak_access_dt <- unique(peak_acc_dt[cell_type %in% cts])
peak_access_dt[is.na(peak_access), peak_access := 0]
peak_access_dt <- dcast.data.table(
  peak_access_dt, peak + gene ~ cell_type, value.var = "peak_access", fill = 0
)

peak_access_dt <- merge.data.table(peak_access_dt, unique(gene_access_dt[,.(gene,category)]))
peak_access_dt <- unique(peak_access_dt[, gene := NULL])
setnames(peak_access_dt, "category", "category_gene")
peak_access_dt[, .N, category_gene]

# now assign category to peaks
min_thrs_acc <- 8
max_thrs_acc <- 8
thrs_acc <- paste(min_thrs_acc, max_thrs_acc, sep = "_")
if (min_thrs_acc == max_thrs_acc) thrs_acc <- min_thrs_acc
peak_access_dt[, ratio := peak_access_dt[[cts[1]]] / peak_access_dt[[cts[2]]]]
peak_access_dt[, category := "other"]
peak_access_dt[peak_access_dt[[cts[1]]] > 1 & peak_access_dt[[cts[2]]] > 1, category := "both"]
peak_access_dt[ratio > 2 & peak_access_dt[[cts[1]]] > max_thrs_acc & peak_access_dt[[cts[2]]] < min_thrs_acc, category := cts[1]]
peak_access_dt[ratio < 0.5 & peak_access_dt[[cts[2]]] > max_thrs_acc & peak_access_dt[[cts[1]]] < min_thrs_acc, category := cts[2]]
peak_access_dt[, .N, category][order(-N)]
```

* scatterplot of peak accessibility

```{r}
# limits for plot
lim <- pmin(
  quantile(peak_access_dt[[cts[1]]] ,0.9999),
  quantile(peak_access_dt[[cts[2]]] ,0.9999)
)

# plot scatter, color peaks by gene category
peak_acc_scat_1 <- ggplot(peak_access_dt, aes_string(cts[1], cts[2])) +
  ggrastr::geom_point_rast(data = peak_access_dt[category_gene == "other"], aes(color = str_remove(category_gene, "(adult|gastrula)_"))) +
  ggrastr::geom_point_rast(data = peak_access_dt[category_gene == "both"], aes(color = str_remove(category, "(adult|gastrula)_"))) +
  ggrastr::geom_point_rast(data = peak_access_dt[!category_gene %in% c("other", "both")], aes(color = str_remove(category_gene, "(adult|gastrula)_"))) +
  scale_x_continuous(limits = c(0, lim), oob = squish) +
  scale_y_continuous(limits = c(0, lim), oob = squish) +
  scale_color_manual(values = cts_cols, name = "category_gene") +
  labs(
    title = sprintf("peak associated to genes with score thrs %s", thrs_sco),
    subtitle = sprintf(
      "%s %s\n%s %s\n%s %s",
      cts[1], nrow(peak_access_dt[category_gene == cts[1]]),
      cts[2], nrow(peak_access_dt[category_gene == cts[2]]),
      "intersect", nrow(peak_access_dt[category_gene == "both"])
    )
  ) +
  coord_fixed()

# plot scatter, color peaks by peak category
peak_acc_scat_2 <- ggplot(peak_access_dt, aes_string(cts[1], cts[2])) +
  ggrastr::geom_point_rast(data = peak_access_dt[category == "other"], aes(color = str_remove(category, "(adult|gastrula)_"))) +
  ggrastr::geom_point_rast(data = peak_access_dt[category == "both"], aes(color = str_remove(category, "(adult|gastrula)_"))) +
  ggrastr::geom_point_rast(data = peak_access_dt[!category %in% c("other", "both")], aes(color = str_remove(category, "(adult|gastrula)_"))) +
  scale_x_continuous(limits = c(0, lim), oob = squish) +
  scale_y_continuous(limits = c(0, lim), oob = squish) +
  scale_color_manual(values = cts_cols, name = "category") +
  labs(
    title = sprintf("peak accessibility thrs %s", thrs_acc),
    subtitle = sprintf(
      "%s %s\n%s %s\n%s %s",
      cts[1], nrow(peak_access_dt[category == cts[1]]),
      cts[2], nrow(peak_access_dt[category == cts[2]]),
      "intersect", nrow(peak_access_dt[category == "both"])
    )
  ) +
  coord_fixed()

# save scatterplots
pdf(
  file.path(fig_dir, sprintf("fig4_peaks_access_scatterplot_%s_%s.pdf", ctn, thrs_sco)),
  width = 10, height = 5
)
peak_acc_scat_1
peak_acc_scat_2
dev.off()

```

* venn diagram of peak accessibility

```{r}
# euler diagram of peaks overlap
pks_ovl_dt_1 <- data.table(peak = peak_access_dt$peak)
pks_ovl_dt_2 <- data.table(peak = peak_access_dt$peak)
for (i in cts) {
  pks_ovl_dt_1[, I(i) := peak_access_dt[, category_gene %in% c(i, "both")]]
}
for (i in cts) {
  pks_ovl_dt_2[, I(i) := peak_access_dt[, category %in% c(i, "both")]]
}
pks_ovl_mt_1 <- as.matrix(pks_ovl_dt_1[, -1])
pks_ovl_mt_2 <- as.matrix(pks_ovl_dt_2[, -1])
require(eulerr)
fit1 <- euler(pks_ovl_mt_1)
p1 <- plot(
  fit1,
  quantities = TRUE,
  fill = ct_cols[str_remove(cts, "(adult|gastrula)_")],
  labels = list(font = 4),
  main = "peaks associated to genes"
)
fit2 <- euler(pks_ovl_mt_2)
p2 <- plot(
  fit2,
  quantities = TRUE,
  fill = ct_cols[str_remove(cts, "(adult|gastrula)_")],
  labels = list(font = 4),
  main = "peak accessibility"
)
pdf(
  file.path(fig_dir, sprintf("fig4_peaks_access_%s_ovl.pdf", ctn)),
  width = 4, height = 2
)
print(p1)
print(p2)
dev.off()
```

### Peaks overlap between retractor muscles

Calculate motif enrichment in retractor muscles peaks that are:
1) specific for TR vs MR
2) specific for MR vs TR
3) common to both

```{r}
# sets of peaks we want to compare
pks_both <- peak_access_dt[category=="both"]$peak
pks_tr <- peak_access_dt[category=="muscle_tentacle_retractor"]$peak
pks_mr <- peak_access_dt[category=="muscle_mesentery_retractor"]$peak

# enrichment analyses we will make
ct_comparas <- list(
  "TR" = pks_tr,
  "MR" = pks_mr,
  "both" = pks_both
)

# we will look for enichment of experimental motifs and motif archetypes
mta_dir <- "results/Motifs"
arc_dir <- "results/Archetypes"
arc_id <- "PPM-PCC-0.8-IC0.5-5bp"
q <- 0.98

# motif scores in peaks
mta_scores_mona <- readRDS(
  file.path(mta_dir, sprintf("motif-scores-mona-q%s.rds", q))
)
mta_gr <- mta_scores_mona$gw_scan
names(mcols(mta_gr))[1] <- str_replace(names(mcols(mta_gr))[1], "motif", "name")

# archetype scores in peaks
arc_scores_mona <- readRDS(
  file.path(arc_dir, sprintf("motif-scores-archetypes-%s-mona-q%s.rds", arc_id, q))
)
arc_gr <- arc_scores_mona$gw_scan
names(mcols(arc_gr))[1] <- str_replace(names(mcols(arc_gr))[1], "motif", "name")

# all peaks
pks_dir <- "results/Peaks"
peaks <- fread(file.path(pks_dir, "Peaks_cell_type_mapped.bed"))
setnames(peaks, c("seqnames", "start", "end", "peak", "score", "strand"))
peaks <- unique(peaks)
peaks_gr <- makeGRangesFromDataFrame(peaks, keep.extra.columns = TRUE)
```

Prepare input files for muscle vs all other peaks comparison

```{r}
# inputs for homer
peaks_dir <- file.path("results", "Motifs", "streme", "muscle")
dir.create(peaks_dir, showWarnings = FALSE)
fwrite(
  peaks[peak %in% pks_both],
  file.path(peaks_dir, "peaks_both.bed"),
  sep = "\t", col.names = FALSE, quote = FALSE
)
fwrite(
  peaks[!peak %in% pks_both],
  file.path(peaks_dir, "peaks_both_bg.bed"),
  sep = "\t", col.names = FALSE, quote = FALSE
)
fwrite(
  peaks[peak %in% pks_tr],
  file.path(peaks_dir, "peaks_muscle_TR.bed"),
  sep = "\t", col.names = FALSE, quote = FALSE
)
fwrite(
  peaks[!peak %in% pks_tr],
  file.path(peaks_dir, "peaks_muscle_TR_bg.bed"),
  sep = "\t", col.names = FALSE, quote = FALSE
)
fwrite(
  peaks[peak %in% pks_mr],
  file.path(peaks_dir, "peaks_muscle_MR.bed"),
  sep = "\t", col.names = FALSE, quote = FALSE
)
fwrite(
  peaks[!peak %in% pks_mr],
  file.path(peaks_dir, "peaks_muscle_MR_bg.bed"),
  sep = "\t", col.names = FALSE, quote = FALSE
)
```

Prepare input files for muscle vs other muscle peaks comparison

```{r}
peaks_dir <- file.path("results", "Motifs", "streme", "muscle_vs_muscle")
dir.create(peaks_dir, showWarnings = FALSE)
fwrite(
  peaks[peak %in% pks_both],
  file.path(peaks_dir, "peaks_both.bed"),
  sep = "\t", col.names = FALSE, quote = FALSE
)
fwrite(
  peaks[peak %in% c(pks_tr, pks_mr)][!peak %in% pks_both],
  file.path(peaks_dir, "peaks_both_bg.bed"),
  sep = "\t", col.names = FALSE, quote = FALSE
)
fwrite(
  peaks[peak %in% pks_tr],
  file.path(peaks_dir, "peaks_muscle_TR.bed"),
  sep = "\t", col.names = FALSE, quote = FALSE
)
fwrite(
  peaks[peak %in% c(pks_both, pks_mr)][!peak %in% pks_tr],
  file.path(peaks_dir, "peaks_muscle_TR_bg.bed"),
  sep = "\t", col.names = FALSE, quote = FALSE
)
fwrite(
  peaks[peak %in% pks_mr],
  file.path(peaks_dir, "peaks_muscle_MR.bed"),
  sep = "\t", col.names = FALSE, quote = FALSE
)
fwrite(
  peaks[peak %in% c(pks_both, pks_tr)][!peak %in% pks_mr],
  file.path(peaks_dir, "peaks_muscle_MR_bg.bed"),
  sep = "\t", col.names = FALSE, quote = FALSE
)
```

- homer motif enrichment

```
cd scripts
bash homer.sh > logs/homer.out 2>&1 &
```

- streme motif enrichment

```
cd scripts

genome="/users/asebe/aelek/proj/scATAC_nvec_v2/Nematostella_scATAC/genome/Nvec_vc1.1_gDNA.fasta"
beddir="/users/asebe/aelek/proj/scATAC_nvec_v2/Nematostella_scATAC/results/Motifs/streme/muscle_vs_muscle/"

for name in muscle_MR muscle_TR both
do
  sbatch streme.sh $beddir peaks_${name} $genome
done
```

- motif scores enrichment

```{r}
# enrichment per cell type
enr_list <- vector("list", length = length(ct_comparas))
names(enr_list) <- names(ct_comparas)

for (ct in names(ct_comparas)) {

  message(sprintf("\nCalculating enrichment for %s", ct))

  # foreground peaks
  pks_fg <- peaks[peak %in% ct_comparas[[ct]]]
  pks_fg <- makeGRangesFromDataFrame(pks_fg)

  # background peaks
  #pks_bg <- peaks[!peak %in% ct_comparas[[ct]]]
  bg <- setdiff(names(ct_comparas), ct)
  pks_bg <- peaks[peak %in% unlist(ct_comparas[bg])]
  pks_bg <- makeGRangesFromDataFrame(pks_bg)

  # enrichment archetypes
  enr_dt <- mta_motif_enrichment_test(
    sites_object = c(mta_gr, arc_gr),
    fg_object = pks_fg,
    bg_object = pks_bg,
    thresholds_vector = NULL,
    label = ct,
    nthreads = 1,
    pval_adjust = "fdr"
  )

  # all enrichment results
  enr_list[[ct]] <- as.data.table(enr_dt, keep.rownames = "motif")

}


# combine results from all cell types
enr_dt <- rbindlist(enr_list)

# save results archetypes
fwrite(
  enr_dt,
  file.path(mta_dir, sprintf("motif-enrichment-muscle-cell-types.tsv.gz")),
  sep = "\t"
)

enr_top <- enr_dt[padj<0.001 & fc>2]


# motif logos
mta_pwm <- readRDS(
  file.path(mta_dir, "motifs.rds")
)

# archetype logos
arc_pwm <- readRDS(
  file.path(arc_dir, sprintf("motif-archetypes-%s-pwms.rds", arc_id))
)

# all logos
pwms <- c(mta_pwm, arc_pwm[!names(arc_pwm) %in% names(mta_pwm)])
stopifnot(all(enr_top$motif %in% names(pwms)))
enr_pwms <- pwms[unique(enr_top$motif)]

# cluster enriched motifs by similarity
similarity <- "PPM"
method <- "PCC"
hclust_method <- "complete"
dist_method <- "euclidean"

sim_mat <- compare_motifs(
  motifs = enr_pwms,
  use.type = similarity,
  method = method,
  normalise.scores = FALSE,
  min.position.ic = 0,
  min.mean.ic = 0,
  nthreads = 0
)
ord <- rownames(sim_mat)
hc <- hclust(tgs_dist(1-sim_mat), method = hclust_method)
ord <- hc$labels[hc$order]
sim_mat <- sim_mat[ord, ord]

saveRDS(
  sim_mat, 
  file.path(arc_dir, sprintf(
    "muscle-motifs-similarity-%s-%s.rds", similarity, method
  ))
)

# motif enrichment annotation
enr_top_ann <- unique(enr_top[, .(motif, label)])[, .(label = paste(sort(.SD$label),collapse="+")), motif]
enr_top_lab <- enr_top_ann[, setNames(label, motif)][rownames(sim_mat)]
hm_dt <- data.table(
  motif_name = rownames(sim_mat),
  group = enr_top_lab
)
hm_dt[, both := "other"][grep("both",group), both := "both"]
hm_dt[, MR := "other"][grep("MR", group), MR := "muscle_mesentery_retractor"]
hm_dt[, TR := "other"][grep("TR",group), TR := "muscle_tentacle_retractor"]
hm_dt[, group := NULL][, motif_name := NULL]
row_ha <- HeatmapAnnotation(df = hm_dt, which = "row", col = list(
  "both" = cts_cols, "MR" = cts_cols, "TR" = cts_cols
), show_legend = FALSE)

# similarity heatmap
col_vals <- c(0,0.5,1)  
col <- colorRamp2(col_vals, c("#67a9cf", "#f7f7f7", "#ef8a62"))
hm <- ComplexHeatmap::Heatmap(
  sim_mat, name = "motif\nsimilarity",
  col = col,
  cluster_rows = FALSE, 
  cluster_columns = FALSE,
  border = TRUE,
  right_annotation = row_ha,
  row_names_max_width = max_text_width(
      rownames(sim_mat), 
      gp = gpar(fontsize = 12)
  ),
  column_names_max_height = max_text_width(
      colnames(sim_mat), 
      gp = gpar(fontsize = 12)
  )
)

# save heatmap
pdf(
  file.path(fig_dir, "fig4_muscle_motif_similarity_heatmap.pdf"),
  width = 10, height = 8
)
draw(hm)
dev.off()

# save motif logos
pdf(
  file.path(fig_dir, "fig4_muscle_motif_enrichment_logos.pdf"),
  width = 4, height = nrow(sim_mat) * 0.8
)
view_motifs(enr_pwms[rownames(sim_mat)])
dev.off()

# save motif logo
#x <- grep("ARCH1653", rownames(sim_mat), value=TRUE)
#pdf(
#  file.path(fig_dir, sprintf("fig4_muscle_motif_enrichment_logo_%s.pdf", str_replace_all(x, "/", "_"))),
#  width = 4, height = 2
#)
#view_motifs(reverseComplement(enr_pwms[[x]]@motif))
#dev.off()
```

#### Posterboys

Find candidate peaks to show in Fig.4:

```{r}
# find peaks with enriched motifs
dt <- rbindlist(sapply(names(ct_comparas), function(ct) {

  cts <- switch(
    ct,
    "MR" = "muscle_mesentery_retractor",
    "TR" = "muscle_tentacle_retractor",
    "both" = c("muscle_mesentery_retractor", "muscle_tentacle_retractor")
  )

  # subset peaks and genes
  pks <- ct_comparas[[ct]]
  mts <- enr_top[label==ct]$motif
  mdt <- mta_dt[peak %in% pks][motif %in% mts]
  mdt <- unique(mdt[, .(peak, motif, gene, gene_name, common_name, in_silico_chip_score)])
  
  # rename gene columns
  setnames(
    mdt,
    c("gene", "gene_name", "common_name"),
    c("motif_gene", "motif_gene_name", "motif_common_name")
  )

  # filter by insilico chip score
  mdt <- mdt[in_silico_chip_score > 0.1]

  # peak metadata
  pdt <- peak_dt[cell_type %in% cts][, .(peak, cell_type, peak_access, gene, gene_score, gene_name, common_name, og, pfam)]
  dt <- merge.data.table(pdt, mdt, by = "peak")

  # one entry per motif in peak
  dt <- unique(dt[, .(peak, cell_type, peak_access,gene,gene_score,gene_name,common_name,og,pfam,motif)])
  setorder(dt, -gene_score)
  dt[, gene := factor(gene, levels = unique(dt$gene))]
  setorder(dt, gene, -peak_access)
  dt

}, simplify = FALSE, USE.NAMES = TRUE), idcol = "group")


# find candidate genes with accessibility in both muscle cell types, and muscle-speciic peks with enriched motifs
gene_score_thr <- 1.2
gns <- unique(unique(peak_dt[, .(gene, gene_score, cell_type)])[
  cell_type %in% c("muscle_mesentery_retractor", "muscle_tentacle_retractor")][
    , muscle_retractor_n_cts := .N, gene][muscle_retractor_n_cts==2][
      , min_gene_score := min(gene_score), gene][min_gene_score > gene_score_thr][
        order(-gene_score)]$gene)
tr_pks_dt <- dt[group == "TR"][gene %in% gns]
mr_pks_dt <- dt[group == "MR"][gene %in% gns]

g <- intersect(tr_pks_dt$gene, mr_pks_dt$gene)
tr_pks_dt[gene %in% g]
mr_pks_dt[gene %in% g]


# for a peak of interest, check insilico ChIP filtered motifs
p="peak11756"
p_ins = mta_dt[peak==p][in_silico_chip_score>0.1][]
p_ins[motif %in% enr_top$motif]

# for a peak of interest, check all motif hits
p_mht <- as.data.table(
  arc_gr[unique(queryHits(findOverlaps(arc_gr, makeGRangesFromDataFrame(peaks[peak==p]))))]
)
p_mht[order(start)][,.N,name]
p_mht[order(start)][,.N,name][name %in% enr_top$motif]
```

Pseudobulk coverage tracks for selected genes.

```{bash}
conda activate pygenometracks

declare -A marker_regions
# Zic binding (TR)
marker_regions["7tm_1"]="NC_064034.1:18498147-18504078"
marker_regions["CECR6_TMEM121"]="NC_064034.1:18506475-18513917"
marker_regions["XM_032365430.2"]="NC_064034.1:10263921-10268311"
marker_regions["XM_048731922.1"]="NC_064034.1:19319510-19322561"
marker_regions["Wnt6"]="NC_064035.1:4584408-4590774" # fav
# GATA and Six1/4/5 binding (MR)
marker_regions["GATA"]="NC_064043.1:5894138-5913319" # fav
# Six1/4/5 binding (MR)
marker_regions["Mylk"]="NC_064035.1:9386492-9394187"
marker_regions["Pik3ip1"]="NC_064034.1:12876120-12880683" # fav 2nd
marker_regions["Fzd8-5"]="NC_064035.1:3,363,249..3,371,072"
#marker_regions[""]=""

declare -A marker_genes
# Zic binding (TR)
marker_genes["7tm_1"]="Nvec_vc1.1_XM_032384029.2"
marker_genes["CECR6_TMEM121"]="Nvec_vc1.1_XM_032384059.2"
marker_genes["XM_032365430.2"]="Nvec_vc1.1_XM_032365430.2"
marker_genes["XM_048731922.1"]="Nvec_vc1.1_XM_048731922.1"
marker_genes["Wnt6"]="Nvec_vc1.1_XM_001629401.3"
# GATA and Six1/4/5 binding (MR)
marker_genes["GATA"]="Nvec_vc1.1_XM_032367288.2"
# Six1/4/5 binding (MR)
marker_genes["Mylk"]="Nvec_vc1.1_XM_048723578.1"
marker_genes[""Pik3ip1]="Nvec_vc1.1_XM_032385636.2"
marker_genes["Fzd8-5"]="Nvec_vc1.1_XM_001634945.3"
#marker_genes[""]=""

fig_dir="/home/anamaria/cluster/aelek/proj/scATAC_nvec_v2/Nematostella_scATAC/plots/Figures"

tracks=${fig_dir}"/fig4_tracks.ini"

# loop over two arrays and make plots
for i in ${!marker_genes[@]}
do
    gene=$i
    cord=${marker_regions[$gene]}
    echo
    echo '# # # # # # # # # '$gene : $cord'# # # # # # # # # '
    echo
    plot=${fig_dir}/fig4_pyGenomeTracks_${gene}.svg
    pyGenomeTracks --tracks ${tracks} --region ${cord} --title ${gene} -o ${plot}
done
```

Save metadata for selected genes and peaks

```{r}
# we will load enichment of experimental motifs and motif archetypes with q0.98 threshold
# we will also load more permissive q0.95 enrichments because we used it in in silico ChIP filtering
mta_dir <- "results/Motifs"
arc_dir <- "results/Archetypes"
arc_id <- "PPM-PCC-0.8-IC0.5-5bp"
gr_list <- lapply(c(0.95, 0.98), function(q) {
  # motif scores in peaks
  mta_scores_mona <- readRDS(
    file.path(mta_dir, sprintf("motif-scores-mona-q%s.rds", q))
  )
  mta_gr <- mta_scores_mona$gw_scan
  names(mcols(mta_gr))[1] <- str_replace(names(mcols(mta_gr))[1], "motif", "name")

  # archetype scores in peaks
  arc_scores_mona <- readRDS(
    file.path(arc_dir, sprintf("motif-scores-archetypes-%s-mona-q%s.rds", arc_id, q))
  )
  arc_gr <- arc_scores_mona$gw_scan
  names(mcols(arc_gr))[1] <- str_replace(names(mcols(arc_gr))[1], "motif", "name")

  c(arc_gr, mta_gr)
})
names(gr_list) <- c("q0.95", "q0.98")

# insilico ChIP score filtered motif hits
chp_dir <- "insilicoChIP"
mta_fn <- file.path(res_dir, chp_dir, "insilico_chip_binding_score.tsv.gz")
mta_dt <- fread(mta_fn)[in_silico_chip_score > 0.1]

# now we will save moif annots for peaks we show in figure
fav_peaks_genes <- c(
  "peak11753" = "Nvec_vc1.1_XM_001629401.3",
  "peak11756" = "Nvec_vc1.1_XM_001629401.3",
  "peak6011" = "Nvec_vc1.1_XM_032385636.2",
  "peak6014" = "Nvec_vc1.1_XM_032385636.2",
  "peak77382" = "Nvec_vc1.1_XM_032367288.2",
  "peak77395" = "Nvec_vc1.1_XM_032367288.2",
  "peak77398" = "Nvec_vc1.1_XM_032367288.2"
)
fav_peaks <- names(fav_peaks_genes)

# motif to gene assignments (to add to motif scores)
motif_2_gene <- unique(mta_dt[,.(gene,gene_name,common_name,og,pfam,motif)])
peaks_figure_dt <- rbindlist(lapply(fav_peaks, function(p) {

  print(p)
  
  # first check if we have motif from in silico chip
  pt <- unique(mta_dt[peak==p][in_silico_chip_score>0.1][,.(peak,motif,gene)])
  
  # now get motifs from scanning
  if (nrow(pt) > 0) {
    grs <- gr_list[["q0.95"]]
  } else {
    grs <- gr_list[["q0.98"]]
  }

  # overlap motif hits with target peak
  pm <- as.data.table(
    grs[unique(queryHits(findOverlaps(
      grs,
      makeGRangesFromDataFrame(peaks[peak==p])
    )))]
  )
  setnames(pm, c("seqnames","name"), c("chr","motif"))
  pm[, peak := p]

  if (nrow(pt) > 0) {

    # if we have both insilico chip and motif scanning, merge them
    pm <- merge.data.table(pt, pm, by = c("peak", "motif"), all.x = TRUE, sort = FALSE)
    pm <- merge.data.table(pm, motif_2_gene, by = c("gene", "motif"), sort = FALSE)
    pm[, method := "insilico_chip"]
    setorder(pm, start, end)

  } else {

    # otherwise add gene annotations to motifs
    pm <- merge.data.table(pm, motif_2_gene, by = "motif", sort = FALSE)
    pm <- unique(pm[order(start)])
    pm[, method := "scan"]

  }

  # partition non-overlapping motif hits into connected components
  gr <- makeGRangesFromDataFrame(pm, seqnames.field="peak", keep.extra.columns=TRUE)
  ol <- findOverlaps(gr, minoverlap = 1)
  ol <- ol[queryHits(ol) != subjectHits(ol)]
  if (length(ol) > 0) {
    g <- graph_from_data_frame(ol, directed = FALSE)
    cc <- components(g)$membership
    singl <- setdiff(seq_len(length(gr)), as.integer(names(cc)))
    if (length(singl) > 0) {
      cc <- c(
        cc,
        structure(max(cc) + seq_along(singl), names = as.character(singl))
      )
      cc <- cc[as.character(sort(as.integer(names(cc))))]
    }
    gr$motif_cluster <- cc
    dt <- as.data.frame(gr)
    setDT(dt)
    setnames(dt, "seqnames", "peak")
    cols <- c(colnames(pm)[1:2], "motif_cluster", colnames(pm)[3:ncol(pm)])
    pm <- dt[, ..cols]
  } else {
    pm[, motif_cluster := 1]
    setcolorder(pm, "peak", "motif", "motif_cluster")
  }

  # return
  if (!is.null(pm)) {
    pm[, peak_gene := fav_peaks_genes[p]]
    pm[, strand := NULL]
    setcolorder(pm, c("peak_gene", "peak", "method", "motif", "chr", "start", "end", "width", "motif_cluster", "motif_score", "gene", "gene_name", "common_name", "og", "pfam"))
  }

  pm
}), use.names=TRUE, fill=TRUE)

peaks_figure_dt <- unique(peaks_figure_dt)

fwrite(peaks_figure_dt, file.path(fig_dir, "fig4_peaks_figure_motifs.tsv"), sep = "\t")
```

Make pseudobulk coverage tracks for selected genes.

```{bash}
conda activate pygenometracks

declare -A marker_regions
# TR
marker_regions["Nem64"]="NC_064035.1:3242699-3248228"
# MR
marker_regions["Nem24"]="NC_064035.1:3192906-3202424"
marker_regions["Nem7"]="NC_064035.1:3192906-3202424"
marker_genes["Hhex"]="NC_064039.1:9242947-9249695"
marker_regions["Wfdc8"]="NC_064036.1:8530516-8541040"
marker_regions["XM_048725710"]="NC_064036.1:5757725-5768710"
# TR vs MR
marker_regions["7tm_1"]="NC_064042.1:2347421-2352227"
# MR vs TR
marker_regions["XM_032382310.2"]="NC_064047.1:923511-927950"
# muscle genes
marker_regions["SRPX2"]="NC_064034.1:7873522-7881774"
marker_regions["Cdh1"]="NC_064046.1:7119772-7130455"
marker_regions["MuscleLIM1.1"]="NC_064039.1:14134398-14149362"
marker_regions["MyHC-st"]="NC_064045.1:3401194-3435023"
#marker_regions[""]=""

declare -A marker_genes
# TR
marker_genes["Nem64"]="Nvec_vc1.1_XM_001634938.2"
# MR
marker_genes["Nem24"]="Nvec_vc1.1_XM_032385184.2"
marker_genes["Nem7"]="Nvec_vc1.1_XM_032385185.2"
marker_genes["Hhex"]="Nvec_vc1.1_XM_032364784.2"
marker_genes["Wfdc8"]="Nvec_vc1.1_XM_048725349.1"
marker_genes["XM_048725710"]="Nvec_vc1.1_XM_048725710.1"
# TR vs MR
marker_genes["7tm_1"]="Nvec_vc1.1_XM_032381004.2"
# MR vs TR
marker_genes["XM_032382310.2"]="Nvec_vc1.1_XM_032382310.2"
# muscle genes
marker_genes["SRPX2"]="Nvec_vc1.1_XM_032365556.2" # Sushi repeat-containing protein SRPX2
marker_genes["Cdh1"]="Nvec_vc1.1_XM_032380092.2"
marker_genes["MuscleLIM1.1"]="Nvec_vc1.1_XM_032375152.2"
marker_genes["MyHC-st"]="Nvec_vc1.1_XM_001636908.3"
#marker_genes[""]=""

fig_dir="/home/anamaria/cluster/aelek/proj/scATAC_nvec_v2/Nematostella_scATAC/plots/Figures"

tracks=${fig_dir}"/fig4_tracks.ini"

# loop over two arrays and make plots
for i in ${!marker_genes[@]}
do
    gene=$i
    cord=${marker_regions[$gene]}
    echo
    echo '# # # # # # # # # '$gene : $cord'# # # # # # # # # '
    echo
    plot=${fig_dir}/fig4_pyGenomeTracks_${gene}.svg
    pyGenomeTracks --tracks ${tracks} --region ${cord} --title ${gene} -o ${plot}
done
```

Which motifs are binding to muscle specific and shared peaks?

```{r}
example_genes <- c(
  "Nvec_vc1.1_XM_001634938.2",
  "Nvec_vc1.1_XM_032385184.2",
  "Nvec_vc1.1_XM_032385185.2",
  "Nvec_vc1.1_XM_032365556.2",
  "Nvec_vc1.1_XM_032380092.2",
  "Nvec_vc1.1_XM_032375152.2",
  "Nvec_vc1.1_XM_001636908.3",
  "Nvec_vc1.1_XM_048725349.1"
)

# load motifs scores
chp_dir <- "insilicoChIP"
mta_fn <- file.path(res_dir, chp_dir, "insilico_chip_binding_score.tsv.gz")
mta_dt <- fread(mta_fn) #[in_silico_chip_score > 0.1]

ptd_dt <- rbindlist(sapply(example_genes, function(g) {

  print(g)
  
  # select peaks associated to genes in selected cell types
  g_dt <- unique(peak_dt[cell_type %in% cts][gene == g])

  # motifs
  p_dt <- mta_dt[peak %in% g_dt$peak][order(peak)]
  
  m_dt <- unique(p_dt[, .(peak, motif, gene, gene_name, common_name, pfam, og, in_silico_chip_score)])
  
  # rename gene columns
  setnames(
    m_dt,
    c("gene", "gene_name", "common_name", "pfam", "og"),
    c("motif_gene", "motif_gene_name", "motif_common_name", "motif_pfam", "motif_og")
  )

  # filter by insilico chip score
  m_dt[in_silico_chip_score > 0.1]


}, simplify = FALSE, USE.NAMES = TRUE), idcol = "gene")

# add example gene annotataion
ptd_dt <- merge.data.table(
  ptd_dt, gnan[, .(gene, gene_name, common_name, pfam, og)], 
  by = "gene", sort = FALSE
)
```


### Peaks overlap between retractor muscles and related cell types

Overlap of muscle peaks with other related cell types

```{r}
# where to save selected peaks
pks_ovl_lst <- list()

# loop over muscle types
groups_fg <- c("muscle_tentacle_retractor", "muscle_mesentery_retractor")
for (group_fg in groups_fg) {

  print(group_fg)

  group_bg <- switch(group_fg, 
    "muscle_tentacle_retractor" = c(
      "precursors_NPC", "epidermis_1", "epidermis_2", "NPC_1", "NPC_2", 
      "ectoderm", "ecto_aboral", "neuron_Pou4_FoxL2_1", "neuron_Pou4_FoxL2_2", "neuron_Pou4_FoxL2_3", "cnidocyte", "cnidocyte_gastrula"
    ),
    "muscle_mesentery_retractor" = c(
      "EMS", "gastro_somatic_gonad", "gastro_IRF1_2", "gastro_circular_muscle_1", "gastro_circular_muscle_2", "gastro_parietal_muscle", "digestive_filaments_1", "digestive_filaments_2", "digestive_filaments_3"
    )
  )
  
  pdf(
    file.path(fig_dir, sprintf("peaks_access_%s_ovl_ct.pdf", group_fg)),
    width = 16, height = 8
  )

  for (peak_access_thrs in c(2, 4, 6, 8)) {

    # subset peaks of interest
    group_pks <- peak_access_dt[category != "other"]$peak
    group_dts <- copy(peak_acc_dt)[, gene := NULL][peak %in% group_pks]
    # select only accessible peaks
    group_dts[, peak_access := ifelse(peak_access > peak_access_thrs, 1, 0)]
    group_dts <- group_dts[peak_access > 0]
    # select cell types to compare
    group_dts <- group_dts[cell_type %in% c(groups_fg, group_bg)]
    group_dts <- unique(group_dts)
    # return
    pks_ovl_lst[[group_fg]][[sprintf("access_%s", peak_access_thrs)]] <- group_dts
    
  }
  
  dev.off()

}

```

Group related cell types for peaks overlaps

```{r}
# all peaks
peaks <- fread(file.path("results", "Peaks", "Peaks_cell_type_mapped.bed"))
setnames(peaks, c("seqnames", "start", "end", "peak", "score", "strand"))

# where to save selected peaks
peaks_dir <- file.path("results", "Motifs", "streme", "muscle_novl")
dir.create(peaks_dir, showWarnings = FALSE)

# groups
groups_lst <- list(
  "muscle_tentacle_retractor" = list(
    "muscle_TR" = "muscle_tentacle_retractor",
    "precursor" = c("precursors_NPC", "NPC_1", "NPC_2"),
    "epidermis" = c("epidermis_1", "epidermis_2"),
    "ecto" = c("ectoderm", "ecto_aboral"),
    "neuro" = c("neuron_Pou4_FoxL2_1", "neuron_Pou4_FoxL2_2", "neuron_Pou4_FoxL2_3", "cnidocyte", "cnidocyte_gastrula")
  ),
  "muscle_mesentery_retractor" = list(
    "muscle_MR" = "muscle_mesentery_retractor",
    "EMS" = c("EMS"),
    "gastro" = c("gastro_circular_muscle_1", "gastro_circular_muscle_2", "gastro_parietal_muscle", "gastro_somatic_gonad", "gastro_IRF1_2"), 
    "digestive" = c("digestive_filaments_1", "digestive_filaments_2", "digestive_filaments_3")
  )
)

# subset peaks
peaks_fg_list <- list()
peaks_bg_list <- list()
peaks_all_list <- list()

for (group_fg in groups_fg) {
    
  peak_access_thrs <- 4
  group_dts <- pks_ovl_lst[[group_fg]][[sprintf("access_%s", peak_access_thrs)]][peak_access > 0]

  for (i in seq_along(names(groups_lst[[group_fg]]))) {

    group_nm <- names(groups_lst[[group_fg]])[i]
    cts_subset <- groups_lst[[group_fg]][[group_nm]]

    # all peaks including overlaps between groups
    pks_subset_fg <- unique(intersect(
      group_dts[cell_type %in% group_fg]$peak,
      group_dts[cell_type %in% c(cts_subset)]$peak
    ))
    
    # peaks only overlapping with muscle and group of interest
    cts_subset_bg <- setdiff(unlist(groups_lst[[group_fg]]), c(cts_subset, group_fg))
    pks_subset_bg <- unique(group_dts[cell_type %in% cts_subset_bg]$peak)
    pks_subset <- setdiff(pks_subset_fg, pks_subset_bg)

    print(sprintf(
      "%s peaks in %s & %s (%s)",
      length(unique(pks_subset)), 
      group_fg,
      group_nm,
      paste(cts_subset, collapse = " | ")
    ))

    # for plotting
    peaks_all <- peaks[peak %in% pks_subset_fg]
    peaks_all_list[[group_fg]][[group_nm]] <- peaks_all

    # inputs for homer
    peaks_fg <- peaks[peak %in% pks_subset]
    peaks_fg_list[[group_fg]][[group_nm]] <- peaks_fg
    fwrite(
      peaks_fg,
      file.path(peaks_dir, sprintf("peaks_%s_%s.bed", group_fg, group_nm)),
      sep = "\t", col.names = FALSE, quote = FALSE
    )
    peaks_bg <- peaks[!peak %in% pks_subset]
    peaks_bg_list[[group_fg]][[group_nm]] <- peaks_bg
    fwrite(
      peaks_bg,
      file.path(peaks_dir, sprintf("peaks_%s_%s_bg.bed", group_fg, group_nm)),
      sep = "\t", col.names = FALSE, quote = FALSE
    )
  }

}
```

Euler and upset diagram of overlapping peaks

```{r}

for (group_fg in groups_fg) {

  fdt <- rbindlist(peaks_all_list[[group_fg]])
  cts <- names(peaks_all_list[[group_fg]])

  pks_ovl_dt <- data.table(peak = unique(fdt$peak))
  for (i in cts) {
    pks_ovl_dt[, I(i) := .SD$peak %in% peaks_all_list[[group_fg]][[i]]$peak, by = .I]
  }

  require(eulerr)
  fit <- euler(pks_ovl_dt[, -1])
  p_ovl <- plot(
    fit,
    quantities = TRUE,
    labels = list(font = 4)
  )

  pdf(
    file.path(fig_dir, sprintf("peaks_access_%s_ovl.pdf", group_fg)),
    width = 8, height = 4
  )
  print(p_ovl)
  dev.off()

  require(ComplexUpset)
  require(ggplot2)
  
  ups <- upset(pks_ovl_dt, colnames(pks_ovl_dt)[-1], width_ratio=0.25, min_size=1, wrap=TRUE) +
      labs(title = sprintf("Peaks specific to %s\n", group_fg))
  pdf(
    file.path(fig_dir, sprintf("peaks_access_%s_ups.pdf", group_fg)),
    width = 8, height = 6
  )  
  print(ups)
  dev.off()

}

```

- homer motif enrichment

```
cd scripts

for name in muscle_mesentery_retractor_muscle_MR muscle_mesentery_retractor_digestive muscle_mesentery_retractor_EMS muscle_mesentery_retractor_gastro muscle_tentacle_retractor_muscle_TR muscle_tentacle_retractor_ecto muscle_tentacle_retractor_epidermis muscle_tentacle_retractor_neuro muscle_tentacle_retractor_precursor
do
  bash homer.findMotifsGenome.sh ${name} > logs/homer.${name}.out 2>&1 &
done

```

- streme motif enrichment

```
cd scripts

genome="/users/asebe/aelek/proj/scATAC_nvec_v2/Nematostella_scATAC/genome/Nvec_vc1.1_gDNA.fasta"
beddir="/users/asebe/aelek/proj/scATAC_nvec_v2/Nematostella_scATAC/results/Motifs/streme/muscle_ovl/"

for name in muscle_mesentery_retractor_muscle_MR muscle_mesentery_retractor_digestive muscle_mesentery_retractor_EMS muscle_mesentery_retractor_gastro muscle_tentacle_retractor_muscle_TR muscle_tentacle_retractor_ecto muscle_tentacle_retractor_epidermis muscle_tentacle_retractor_neuro muscle_tentacle_retractor_precursor
do
  sbatch streme.sh $beddir peaks_${name} $genome
done
```

- motif scores enrichment

```{r}
enr_list <- list()
enr_list_ <- list()

# loop over muscle types
groups_fg <- c("muscle_tentacle_retractor", "muscle_mesentery_retractor")
for (group_fg in groups_fg) {

  # enrichment per groups of cell type  
  ct_comparas <- groups_lst[[group_fg]]
  for (ct in names(ct_comparas)) {

    message(sprintf("\nCalculating enrichment for %s: %s", group_fg, ct))

    # foreground peaks
    pks_fg <- peaks_fg_list[[group_fg]][[ct]]
    pks_fg <- makeGRangesFromDataFrame(pks_fg)

    # background peaks
    pks_bg <- peaks_bg_list[[group_fg]][[ct]]
    pks_bg <- makeGRangesFromDataFrame(pks_bg)

    # enrichment archetypes
    enr_dt <- mta_motif_enrichment_test(
      sites_object = c(mta_gr, arc_gr),
      fg_object = pks_fg,
      bg_object = pks_bg,
      thresholds_vector = NULL,
      label = ct,
      nthreads = 1,
      pval_adjust = "fdr"
    )

    # all enrichment results
    enr_list[[group_fg]][[ct]] <- as.data.table(enr_dt, keep.rownames = "motif")

  }

  enr_list_[[group_fg]] <- rbindlist(enr_list[[group_fg]])[, group := group_fg]

}

# combine results from all cell types
enr_dt <- rbindlist(enr_list_)

# save results archetypes
fwrite(
  enr_dt,
  file.path(mta_dir, sprintf("motif-enrichment-muscle-ovl-cell-types.tsv.gz")),
  sep = "\t"
)

# fltering
enr_top <- enr_dt[padj<0.001 & fc>1]
enr_top[, group := paste(group, label, sep = "_"), by = .I]
enr_top[group == "muscle_tentacle_retractor_muscle_TR", group := "muscle_tentacle_retractor"]
enr_top[group == "muscle_mesentery_retractor_muscle_MR", group := "muscle_mesentery_retractor"]

# motif logos
mta_pwm <- readRDS(
  file.path(mta_dir, "motifs.rds")
)

# archetype logos
arc_pwm <- readRDS(
  file.path(arc_dir, sprintf("motif-archetypes-%s-pwms.rds", arc_id))
)

# all logos
pwms <- c(mta_pwm, arc_pwm[!names(arc_pwm) %in% names(mta_pwm)])
stopifnot(all(enr_top$motif %in% names(pwms)))
enr_pwms <- pwms[unique(enr_top$motif)]

# cluster enriched motifs by similarity
similarity <- "PPM"
method <- "PCC"
hclust_method <- "complete"
dist_method <- "euclidean"

sim_mat <- compare_motifs(
  motifs = enr_pwms,
  use.type = similarity,
  method = method,
  normalise.scores = FALSE,
  min.position.ic = 0,
  min.mean.ic = 0,
  nthreads = 0
)
ord <- rownames(sim_mat)
hc <- hclust(tgs_dist(1-sim_mat), method = hclust_method)
ord <- hc$labels[hc$order]
sim_mat <- sim_mat[ord, ord]

saveRDS(
  sim_mat, 
  file.path(arc_dir, sprintf(
    "muscle-ovl-motifs-similarity-%s-%s.rds", similarity, method
  ))
)

for (g in unique(enr_top$group)) {

  message(g)

  motifs_groups <- enr_top[group == g]$motif
  sim_mat_group <- sim_mat[
    rownames(sim_mat) %in% motifs_groups,
    colnames(sim_mat) %in% motifs_groups
  ]

  # motif enrichment annotation
  enr_top_ann <- unique(enr_top[, .(motif, group)][motif %in% motifs_groups])
  enr_top_lab <- enr_top_ann[, setNames(group, motif)][rownames(sim_mat_group)]
  hm_dt <- data.table(
    motif_name = rownames(sim_mat_group),
    group = enr_top_lab
  )
  stopifnot(nrow(hm_dt[,.N,motif_name][N>1])==0)

  #group_cols <- structure(
  #  colorspace::rainbow_hcl(
  #    length(unique(hm_dt$group)), c = 100, l = 65
  #  ),
  #  names = sort(unique(hm_dt$group))
  #)
  #
  #row_ha <- HeatmapAnnotation(df = hm_dt[, .(group)], which = "row", col = list(
  #  "group" = group_cols
  #), show_legend = TRUE)

  # similarity heatmap
  col_vals <- c(0,0.5,1)  
  col <- colorRamp2(col_vals, c("#67a9cf", "#f7f7f7", "#ef8a62"))
  hm <- ComplexHeatmap::Heatmap(
    sim_mat_group, name = "motif\nsimilarity",
    col = col,
    cluster_rows = FALSE, 
    cluster_columns = FALSE,
    border = TRUE,
    #right_annotation = row_ha,
    column_title = sprintf("%s motifs in %s", nrow(sim_mat_group), g),
    column_title_gp = gpar(fontsize = 32),
    row_names_max_width = max_text_width(
        rownames(sim_mat_group), 
        gp = gpar(fontsize = 12)
    ),
    column_names_max_height = max_text_width(
        colnames(sim_mat_group), 
        gp = gpar(fontsize = 12)
    )
  )

  # save heatmap
  hm_height <- dim(sim_mat_group)[1]/6
  pdf(
    file.path(fig_dir, sprintf("muscle_ovl_%s_motif_similarity_heatmap.pdf", g)),
    width = hm_height, height = hm_height
  )
  draw(hm)
  dev.off()

}

# save motif logos
pdf(
  file.path(fig_dir, "muscle_ovl_motif_enrichment_logos.pdf"),
  width = 4, height = nrow(sim_mat) * 0.8
)
view_motifs(enr_pwms[rownames(sim_mat)])
dev.off()

# save motif logo
#x <- grep("ARCH1653", rownames(sim_mat), value=TRUE)
#pdf(
#  file.path(fig_dir, sprintf("fig4_muscle_motif_enrichment_logo_%s.pdf", str_replace_all(x, "/", "_"))),
#  width = 4, height = 2
#)
#view_motifs(reverseComplement(enr_pwms[[x]]@motif))
#dev.off()
```

Compare to cell-type enriched motifs

```{r}
# cell type enrichments
arc_dir <- "results/Archetypes"
arc_id <- "PPM-PCC-0.8-IC0.5-5bp"
enr_fn <- file.path(arc_dir, sprintf("motif-enrichment-cell-type-archetypes-%s-mona-q0.98.tsv.gz", arc_id))
enr_dt <- fread(enr_fn)
enr_dt[, log2fc := log2(fc)]
setorder(enr_dt, motif, -log2fc)
enr_dt_sign <- enr_dt[padj < 0.05 & log2fc > 1]
enr_dt_nsgn <- enr_dt[!motif %in% enr_dt_sign$motif][log2fc > 1]
enr_dts <- rbindlist(list(enr_dt_sign, enr_dt_nsgn))

# muscle enrichments
mta_dir <- "results/Motifs"
sub <- "ovl"
msc_dir <- file.path(mta_dir, "streme", paste0("muscle_", sub))
msc_dirs <- list.dirs(msc_dir, recursive=FALSE)
msc_dt <- rbindlist(sapply(msc_dirs, function(dir) {
  fn <- file.path(dir, "tomtom", "tomtom.tsv")
  tryCatch({
    dt <- read.table(fn, header = TRUE, comment.char = "#", sep = "\t", stringsAsFactors = FALSE)
    setDT(dt)
    #dt <- data.table::fread(fn, blank.lines.skip=TRUE, , comment.char="#")
    dt[, group := str_remove(dir, paste0(msc_dir, "/"))]
    dt
  }, error = function(e) {
    warning(e)
    NULL
  })
}, simplify = FALSE, USE.NAMES = TRUE))
setnames(msc_dt, "Query_ID", "query")
setnames(msc_dt, "Target_ID", "motif")
setnames(msc_dt, "q.value", "qval")

msc_enr_dt <- merge.data.table(
  msc_dt[, .(motif, query, group, qval)],
  enr_dt[,.(motif, cell_type, log2fc, padj)],
  by = "motif", all.x = TRUE, sort = FALSE
)

fwrite(
  msc_enr_dt,
  file.path(msc_dir, sprintf("motif-enrichment-muscle-vs-cell-type-%s.tsv.gz", sub)),
  sep = "\t", compress = "gzip"
)

msc_enr_dt[cell_type=="neuronal_gastrula", cell_type:="neuronal"]
stopifnot(all(msc_enr_dt$cell_type %in% cell_types))
msc_enr_dt[, cell_type := factor(cell_type, levels = cell_types)]

msc_enr_dt[, group := str_remove(group, "peaks_")]
msc_enr_dt[, group := str_replace_all(group, c(
  "muscle_mesentery_retractor" = "MR",
  "muscle_tentacle_retractor" = "TR"
))]
msc_enr_dt[group == "TR_muscle_TR", group := "TR only"]
msc_enr_dt[group == "MR_muscle_MR", group := "MR only"]
msc_enr_dt[, group := str_replace(group, "_", " & ")]
msc_enr_dt <- msc_enr_dt[!group %in% c("TR only", "MR only")]

msc_enr_dt_hgl <- unique(msc_enr_dt[log2fc > 1.2 & padj < 0.05, .(motif, cell_type, log2fc, group)])
msc_enr_dt_hgl[, rank := frank(-log2fc, ties.method = "first"), by = .(group, cell_type)]
msc_enr_dt_hgl[,n := length(unique(.SD$motif)), .(group, cell_type)]
setorder(msc_enr_dt_hgl, group, cell_type, rank)
msc_enr_dt_hgl <- msc_enr_dt_hgl[, .SD[rank < pmin(n, 7)], .(group, cell_type)]

msc_enr_gp <- ggplot(msc_enr_dt, aes(cell_type, log2fc, fill = cell_type)) +
  geom_boxplot(alpha = 0.2) +
  geom_point(data = msc_enr_dt_hgl, size = 3, shape = 21, alpha = 1) +
  geom_text_repel(
    data = msc_enr_dt_hgl,
    aes(label = motif),
    size = 2,
    max.overlaps = Inf,
    force_pull = 0,
    nudge_y = 0.05,
    direction = "x",
    angle = 90,
    hjust = -1,
    segment.size = 0.2,
    segment.color = "grey50",
    segment.alpha = 0.5
  ) +
  scale_y_continuous(expand = expansion(mult = c(0, 2))) +
  scale_fill_manual(values = ct_cols) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  facet_wrap(~ group, scales = "free_y", ncol = 1) +
  theme(legend.position = "none")

ggsave(
  file.path(fig_dir, sprintf("peaks_motif_enrichment_muscle_vs_cell_type_-%s.pdf", sub)),
  msc_enr_gp,
  width = 12, height = 16
)
```

# Group files

Cell barcodes per sample and cell type
 
  * adult
 
```{r}
# adult
cdt <- as.data.table(proj_adult@cellColData)[, .(Cell, cell_type)]
cdt[, Sample:=str_remove(Cell, "#.+")]
cdt[, Cell:=str_remove(Cell, sprintf("%s#", Sample))]
cdt[, cell_type:=paste(Sample,cell_type,sep="__")]
for (i in unique(cdt$Sample)) {
  fwrite(
    cdt[Sample==i, .(Cell, cell_type)],
    file.path("/home/anamaria/cluster/aelek/proj/scATAC_nvec_v2/scatacseq-pipeline/cell_barcodes/",sprintf("%s_cells.txt", i)),
    sep = "\t", col.names = FALSE
  )
}
```

  * gastrula

```{r}
# gastrula
cdt <- as.data.table(proj_gastr@cellColData)[, .(Cell, cell_type)]
cdt[, Sample:=str_remove(Cell, "#.+")]
cdt[, Cell:=str_remove(Cell, sprintf("%s#", Sample))]
cdt[, cell_type:=paste(Sample,cell_type,sep="__")]
for (i in unique(cdt$Sample)) {
  fwrite(
    cdt[Sample==i, .(Cell, cell_type)],
    file.path("/home/anamaria/cluster/aelek/proj/scATAC_nvec_gastrula/scatacseq-pipeline/cell_barcodes/",sprintf("%s_cells.txt", i)),
    sep = "\t", col.names = FALSE
  )
}

```

Add barcodes to unshifted bam files and split-and-pool them by cell type

  * adult

```{bash}
cd /home/anamaria/cluster/aelek/proj/scATAC_nvec_v2/scatacseq-pipeline
mkdir cell_barcodes
NTH=8

# add barcodes to bam files
for NAME in 50m_PFA 3_FixSor 9_F6k 10_F6k 11_F5k 12_F 13_F 16_FC 20_Fn 21_Fn 22_Fn 23_Fn 24_Fn 25_Fn 26_Fn 27_Fn 18_Elav 19_Elav 28_Elav 29_Elav 30_Elav
do
  BAM=${NAME}/alignments/${NAME}.bwa.positionsort.bam
  tmp_sam_file=${NAME}.tmp.sam
  BAMCB=${BAM%%bam}CB.bam
  BAMCBSORT=${BAMCB%%bam}sort.bam
  samtools view -H -@ ${NTH} ${BAM} > ${tmp_sam_file}
  samtools view -@ ${NTH} ${BAM} | awk '/^@/ {print;next} {N=split($1,n,":");print $0 "\tCB:Z:" n[1]}' >> ${tmp_sam_file}
  samtools view -bS -@ ${NTH} ${tmp_sam_file} > ${BAMCB}
  samtools sort -@ ${NTH} -o ${BAMCBSORT} ${BAMCB}
  mv ${BAMCBSORT} cell_barcodes/${NAME}.bwa.positionsort.bam
  samtools index -@ ${NTH} cell_barcodes/${NAME}.bwa.positionsort.bam
  rm ${tmp_sam_file} ${BAMCB}
  echo "# Added CB to " ${BAM}
done

# split by cell type
for NAME in 25m_PFA 50m_PFA 3_FixSor 9_F6k 10_F6k 11_F5k 12_F 13_F 16_FC 20_Fn 21_Fn 22_Fn 23_Fn 24_Fn 25_Fn 26_Fn 27_Fn 18_Elav 19_Elav 28_Elav 29_Elav 30_Elav
do
  BAM=cell_barcodes/${NAME}.bwa.positionsort.bam
  CELLS=cell_barcodes/${NAME}_cells.txt
  sinto filterbarcodes -b ${BAM} -c ${CELLS} --outdir cell_barcodes/ --barcodetag CB -p ${NTH}
done


# pool samples by cell type
mkdir cell_barcodes/split_bams
for CELL_TYPE in digestive_filaments_1 digestive_filaments_2 digestive_filaments_3 epidermis_1 epidermis_2 gastro_circular_muscle_1 gastro_circular_muscle_2 gastro_parietal_muscle gastro_unknown_1 gastro_unknown_2 gland muscle_1 muscle_2 neuron_GATA_Islet_1 neuron_GATA_Islet_2 neuron_Pou4_FoxL2_1 neuron_Pou4_FoxL2_2 neuron_Pou4_FoxL2_3 precursors_1 precursors_2 precursors_3 
do
  BAMS=$( ls cell_barcodes/*__${CELL_TYPE}.bam )
  samtools merge -@ 18 cell_barcodes/${CELL_TYPE}.bam ${BAMS}
  samtools index -@ 18 cell_barcodes/${CELL_TYPE}.bam 
  mv $BAMS cell_barcodes/split_bams
done

# move intermediate files
mkdir cell_barcodes/sample_bams
for NAME in 25m_PFA 50m_PFA 3_FixSor 9_F6k 10_F6k 11_F5k 12_F 13_F 16_FC 20_Fn 21_Fn 22_Fn 23_Fn 24_Fn 25_Fn 26_Fn 27_Fn 18_Elav 19_Elav 28_Elav 29_Elav 30_Elav Multiome_07563AAD
do
  mv cell_barcodes/${NAME}__*bam cell_barcodes/split_bams
  mv cell_barcodes/${NAME}_cells.txt cell_barcodes/split_bams
  mv cell_barcodes/${NAME}.bwa.positionsort.bam* cell_barcodes/sample_bams
done

# make bigwigs
cd cell_barcodes
for bam in *bam
do
  bw=${bam%%bam}bw
  if [ -f $bw ]; then
    echo "$bw exists, not overwritting it"
  else
    bamCoverage -b $bam -o $bw  --binSize 2 --normalizeUsing RPGC --effectiveGenomeSize 269383238 --extendReads --maxFragmentLength 120 -p max/2
  fi
done

# broad cell types
declare -A groups=(
  ["cnidocyte"]="cnidocyte"
  ["digestive_filaments"]="digestive_filaments_1 digestive_filaments_2 digestive_filaments_3"
  ["epidermis"]="epidermis_1 epidermis_2"
  ["gastro_circular_muscle"]="gastro_circular_muscle_1 gastro_circular_muscle_2"
  ["gastro_parietal_muscle"]="gastro_parietal_muscle"
  ["gastro_unknown"]="gastro_IRF1_2 gastro_somatic_gonad"
  ["gland"]="gland"
  ["muscle"]="muscle_tentacle_retractor muscle_mesentery_retractor"
  ["neuron_GATA_Islet"]="neuron_GATA_Islet_1 neuron_GATA_Islet_2"
  ["neuron_Pou4_FoxL2"]="neuron_Pou4_FoxL2_1 neuron_Pou4_FoxL2_2 neuron_Pou4_FoxL2_3"
  ["precursors"]="precursors_PGC precursors_endoNPC precursors_NPC"
)

mkdir broad_cell_type
for group in "${!groups[@]}"; do
  files="${groups[$group]}"
  #echo ${group}: ${files}
  files=$(echo $files | sed 's/ /.bam /g')
  files=$(echo $files | sed 's/$/.bam /g')
  #echo ${group}: $files
  ls $files
  samtools merge -@ 18 broad_cell_type/${group}.broad.bam ${files}
  samtools index -@ 18 broad_cell_type/${group}.broad.bam 
done

# move cell type files
mkdir cell_type
mv *bam cell_type/
mv *bam.bai cell_type/
mv *bw cell_type/
```
  
  * gastrula
  
```{bash}
cd /home/anamaria/cluster/aelek/proj/scATAC_nvec_gastrula/scatacseq-pipeline
mkdir cell_barcodes
NTH=8

# add barcodes to bam files
for NAME in G26_fs G26_fx
do
  BAM=${NAME}/alignments/${NAME}.bwa.positionsort.bam
  tmp_sam_file=${NAME}.tmp.sam
  BAMCB=${BAM%%bam}CB.bam
  BAMCBSORT=${BAMCB%%bam}sort.bam
  samtools view -H -@ ${NTH} ${BAM} > ${tmp_sam_file}
  samtools view -@ ${NTH} ${BAM} | awk '/^@/ {print;next} {N=split($1,n,":");print $0 "\tCB:Z:" n[1]}' >> ${tmp_sam_file}
  samtools view -bS -@ ${NTH} ${tmp_sam_file} > ${BAMCB}
  samtools sort -@ ${NTH} -o ${BAMCBSORT} ${BAMCB}
  mv ${BAMCBSORT} cell_barcodes/${NAME}.bwa.positionsort.bam
  samtools index -@ ${NTH} cell_barcodes/${NAME}.bwa.positionsort.bam
  rm ${tmp_sam_file} ${BAMCB}
  echo "# Added CB to " ${BAM}
done

# split by cell type
for NAME in  G26_fs G26_fx
do
  BAM=cell_barcodes/${NAME}.bwa.positionsort.bam
  CELLS=cell_barcodes/${NAME}_cells.txt
  sinto filterbarcodes -b ${BAM} -c ${CELLS} --outdir cell_barcodes/ --barcodetag CB -p ${NTH}
done

# pool samples by cell type
mkdir cell_barcodes/split_bams
for CELL_TYPE in EMS EMS_ecto_boundary NPC cnidocyte cnidocyte_precursors ecto_aboral ecto_pharynx ectoderm gland neuronal
do
  BAMS=$( ls cell_barcodes/*__${CELL_TYPE}.bam )
  samtools merge -@ 18 cell_barcodes/${CELL_TYPE}.bam ${BAMS}
  samtools index -@ 18 cell_barcodes/${CELL_TYPE}.bam 
  mv $BAMS cell_barcodes/split_bams
done

# move intermediate files
mkdir cell_barcodes/sample_bams
for NAME in G26_fs G26_fx
do
  mv cell_barcodes/${NAME}__*bam cell_barcodes/split_bams
  mv cell_barcodes/${NAME}_cells.txt cell_barcodes/split_bams
  mv cell_barcodes/${NAME}.bwa.positionsort.bam* cell_barcodes/sample_bams
done

# make bigwigs
cd cell_barcodes
for bam in *bam
do
  bw=${bam%%bam}bw
  if [ -f $bw ]; then
    echo "$bw exists, not overwritting it"
  else
    bamCoverage -b $bam -o $bw  --binSize 2 --normalizeUsing RPGC --effectiveGenomeSize 269383238 --extendReads --maxFragmentLength 120 -p max/2
  fi
done

# broad cell types
declare -A groups=(
  ["cnidocyte"]="cnidocyte"
  ["ectoderm"]="ecto_aboral ectoderm ecto_pharynx"
  ["EMS"]="EMS"
  ["EMS_ecto_boundary"]="EMS_ecto_boundary"
  ["gland"]="gland"
  ["neuronal"]="neuronal"
  ["NPC"]="NPC cnidocyte_precursors"
)

mkdir broad_cell_type
for group in "${!groups[@]}"; do
  files="${groups[$group]}"
  #echo ${group}: ${files}
  files=$(echo $files | sed 's/ /.bam /g')
  files=$(echo $files | sed 's/$/.bam /g')
  #echo ${group}: $files
  ls $files
  samtools merge -@ 18 broad_cell_type/${group}.broad.bam ${files}
  samtools index -@ 18 broad_cell_type/${group}.broad.bam 
done

for bam in broad_cell_type/*bam
do
  bw=${bam%%bam}bw
  if [ -f $bw ]; then
    echo "$bw exists, not overwritting it"
  else
    echo $bw
    bamCoverage -b $bam -o $bw  --binSize 2 --normalizeUsing RPGC --effectiveGenomeSize 269383238 --extendReads --maxFragmentLength 120 -p max/2
  fi
done


# move cell type files
mkdir cell_type
mv *bam cell_type/
mv *bam.bai cell_type/
mv *bw cell_type/
```
