---
title: "GRN"
author: "Anamaria Elek"
date: today
format: 
  html:
    code-fold: false
    code-tools: false
    embed-resources: true
    highlight-style: github
    toc: true 
    code-line-numbers: false 
execute:
  eval: false
  message: false
  warning: false
---

```{r}
#| label: initialize
#| echo: FALSE
knitr::opts_chunk$set(echo = TRUE, fig.width=7, fig.height=5) 
```

In this notebook, we will construct Gene Regulatory Networks (GRN) for 
*Nematostella* cell types.

## Setup

Load packages and functions.

```{r}
#| label: setup

# load in-house functions
source("metacell_downstream_functions/Downstream_functions.R")
source("metacell_downstream_functions/utils.R")
source("motif-analysis/mta_downstream_functions.R")
source("scripts/scatac_helper_functions.R")

# global settings
options(stringsAsFactors = FALSE)

# load packages
library(RColorBrewer)
library(BSgenome.jaNemVect1.1.DToL.Assembly)
library(GenomicRanges)
library(data.table)
library(tidyr)
library(stringr)
library(ggplot2)
library(patchwork)
library(ggrepel)
library(ggside)
library(ggseqlogo)
library(universalmotif)
library(grid)
library(ArchR)
library(Seurat)
library(metacell)
library(openxlsx)

# set ggplot2 theme
theme_blank <- theme_minimal() + theme(
  axis.title.x = element_blank(),
  axis.title.y = element_blank(),
  panel.border = element_blank(),
  panel.grid=element_blank(),
  axis.ticks = element_blank(),
  text = element_text(size=20)
)
theme_py <- theme_light() + theme(
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  panel.border = element_rect(colour = "black", fill = NA),
  text = element_text(size=20),
  strip.placement = "outside", 
  strip.text = element_text(size=20, color="black"),
  strip.background = element_rect(fill="white")
)
theme_set(theme_py)
```

Define directories to read the data from and save the results to.

```{r}
#| label: dirs

adult_dir <- "ArchRProj_Nvec_TSS4_frag200"
gastr_dir <- "ArchRProj_Nvec_gastrula"
pks_dir <- "results/Peaks"
mta_dir <- "results/Motifs"
arc_dir <- "results/Archetypes"
map_dir <- "results/Metacells"
chp_dir <- "results/insilicoChIP"
dir.create(chp_dir, showWarnings = FALSE)
dir.create(file.path(chp_dir, "metacell"), showWarnings = FALSE)
dir.create(file.path(chp_dir, "cell_type"), showWarnings = FALSE)
fig_dir <- "plots/insilicoChIP"
dir.create(fig_dir, showWarnings = FALSE)
ann_dir <- "annotation"
```

Load gene annotations.

```{r}
# gene annotation
gnan <- fread(file.path(
  ann_dir, "Nematostella_DToL_FINAL.tsv"
))

# TF annotation
tfan <- fread(file.path(
  ann_dir, "Nematostella_DToL_TFs_FINAL.tsv"
))

# golden markers
gold <- fread(file.path(
  ann_dir, "golden-marks-231124.tsv"
), header = FALSE)
setnames(gold, c("common_name", "gene", "remark"))
```

Project-specific variables:

```{r}
ct_cols <- c(
  "cnidocyte"                  = "#ff42ff",
  "cnidocyte_gastrula"         = "#f7abf7",
  "ecto_pharynx"               = "#5bc0e8",
  "ectoderm"                   = "#51a0be",
  "ecto_aboral"                = "#045170",
  "EMS"                        = "#bdf5bd",
  "EMS_ecto_boundary"          = "#93dbce",
  "gastro_circular_muscle_1"   = "#85c90e",
  "gastro_circular_muscle_2"   = "#73b009",
  "gastro_parietal_muscle"     = "#8ceb10",
  "gastro_IRF1_2"              = "#c1eb05",
  "gastro_somatic_gonad"       = "#bde314",
  "muscle_tentacle_retractor"  = "#ffd700",
  "muscle_mesentery_retractor" = "#f0e229",
  "digestive_filaments_1"      = "#e33d3d",
  "digestive_filaments_2"      = "#d10606",
  "digestive_filaments_3"      = "#ad0303",
  "epidermis_1"                = "#04ccd4",
  "epidermis_2"                = "#16bacc",
  "precursors_PGC"             = "#bebebe",
  "precursors_endoNPC"         = "#8a8686",
  "precursors_NPC"             = "#636363",
  "NPC_1"                      = "#808d91",
  "NPC_2"                      = "#758d92",
  "neuron_GATA_Islet_1"        = "#0c82f7",
  "neuron_GATA_Islet_2"        = "#1175f0",
  "neuron_Pou4_FoxL2_1"        = "#101cde",
  "neuron_Pou4_FoxL2_2"        = "#0b16bf",
  "neuron_Pou4_FoxL2_3"        = "#2e39dd",
  "neuronal"                   = "#063cb9",
  "gland"                      = "#ff6f08",
  "gland_mucin"                = "#ff8f12"
)
cell_types <- names(ct_cols)
adult_cell_types <- c(
  "cnidocyte",
  "gastro_circular_muscle_1", 
  "gastro_circular_muscle_2",
  "gastro_parietal_muscle",
  "gastro_IRF1_2",
  "gastro_somatic_gonad",
  "muscle_mesentery_retractor",
  "muscle_tentacle_retractor",
  "digestive_filaments_1",
  "digestive_filaments_2",
  "digestive_filaments_3",
  "epidermis_1",
  "epidermis_2",
  "precursors_PGC",
  "precursors_endoNPC",
  "precursors_NPC",
  "neuron_GATA_Islet_1",
  "neuron_GATA_Islet_2",
  "neuron_Pou4_FoxL2_1",
  "neuron_Pou4_FoxL2_2",
  "neuron_Pou4_FoxL2_3",
  "gland"
)
gastr_cell_types <- c(setdiff(cell_types, adult_cell_types))
bct_cols <- toupper(c(
  "cnidocyte"                 = "#FF42FF",
  "ecto"                      = "#51a0be",
  "EMS"                       = "#bdf5bd",
  "gastro_circular_muscle"    = "#73b009",
  "gastro_parietal_muscle"    = "#8ceb10",
  "gastro"                    = "#85c90e",  
  "muscle"                    = "#FFD700",
  "digestive_filaments"       = "#e33d3d",
  "precursors"                = "#BEBEBE",
  "NPC"                       = "#808d91",
  "epidermis"                 = "#04ccd4",
  "neuron_GATA_Islet"         = "#1175f0",
  "neuron_Pou4_FoxL2"         = "#101cde",
  "neuronal"                  = "#063cb9",
  "gland"                     = "#ff6f08"
))
bct_maps <- setDT(cbind.data.frame(
  cell_type = cell_types,
  broad_cell_type = str_extract(cell_types, paste(names(bct_cols), collapse = "|"))
))
```

## Peak-TF accessibility correlation

For each ATAC peak and TF pair, we calculate correlation of peak accessibility
(scATAC) and TF expression (scRNA)

```{r}
lvl <- "metacell"
id <- "genes_exp_FC2_acc_FC4_spearman"
exp <- "fc"

# correlation
acc_mt <- readRDS(file.path(
    map_dir, lvl,
    sprintf("peak_accessibility_%s.rds", id)
))
exp_mt <- readRDS(file.path(
    map_dir, lvl,
    sprintf("gene_expression_%s_%s.rds", exp, id)
))

# subset tfs
tfs <- tfan[gene %in% rownames(exp_mt)][[1]]
message(length(tfs), " TFs")
exp_mt <- exp_mt[tfs, ]

# correlation
cor_mt <- cor(t(acc_mt), t(exp_mt))

# save
saveRDS(
    cor_mt,
    file.path(chp_dir, "peak_TF_expression_correlation.rds")
)
```

Inspect accessibility peak-TF expression correlations.

```{r}
cor_mt <- readRDS(file.path(
    chp_dir,
    "peak_TF_expression_correlation.rds"
))

# top correlated peak-TF pairs
cor_dt <- melt.data.table(as.data.table(
    cor_mt, keep.rownames = "peak"
), id.var = "peak", variable.name = "gene", value.name = "correlation")
gp_top_cor <- ggplot(cor_dt, aes(correlation)) + 
    geom_histogram(color = "white") +
    scale_x_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.25))
ggsave(file.path(
    fig_dir, "peak-TF-expression-correlation.pdf"
), width = 6, height = 6)
```

## In silico ChIP binding score

We will calculate in silico ChIP binding scores for TFs that have motifs assigned.

```{r}
# load motif to gene assignments
mot2gene <- fread(file.path(
    mta_dir, "motif-assignment-selected.tsv.gz"
))
mot2gene[, motif := archetype_name]
```

Calculate *in silico* ChIP binding score

```{r}
id <- "genes_exp_FC2_acc_FC4_spearman"

# peak accessibility - TF expression correlation
cor_mt <- readRDS(file.path(
    chp_dir, "peak_TF_expression_correlation.rds"
))

# subset for TFs with motif
tfs <- unique(intersect(unique(mot2gene$gene), colnames(cor_mt)))
message(length(tfs), " TFs")
cor_mt <- cor_mt[, tfs]

# peaks order
pks <- rownames(cor_mt)
pks <- unique(paste0("peak",sort(as.integer(str_extract(pks, "\\d+")))))
cor_mt <- cor_mt[pks,]

# save
saveRDS(cor_mt, file.path(chp_dir, "peak_TF_expression_correlation.rds"))

# peak accessibility scores
sum_clusters <- readRDS(file.path(
    "results", "Clustering",
    "Sum_Adult_Gastrula_Peaks_SEACell_qnorm.rds"
))
stopifnot(all(pks %in% rownames(sum_clusters)))
acc_mt <- sum_clusters[pks, ]
saveRDS(acc_mt, file.path(chp_dir, "peak_accessibility.rds"))

# transform accessibility scores
acc_log_mt <- log2(
    1e6 * (sweep(acc_mt, 2, colSums(acc_mt), "/")) + 0.5
)
acc_log_mt <- round(acc_log_mt, 3)

# select max accessibility per peak
acc_max <- round(apply(acc_log_mt[pks, ], 1, max), 2)

# motif scores in peaks
mta_data <- rbindlist(lapply(c(
  # archetypes
  file.path(arc_dir, "motif-scores-archetypes-PPM-PCC-0.8-IC0.5-5bp-mona-q0.95.tsv.gz"),
  # experimental motifs
  file.path(mta_dir, "motif-scores-mona-q0.95.tsv.gz")
), fread), fill=TRUE)
if ("max_motif_score" %in% colnames(mta_data)) {
    mta_data[, max_motif_score := NULL]
}
stopifnot(all(mot2gene$motif %in% mta_data$motif))
mta_data <- merge.data.table(
    mta_data,
    unique(mot2gene[, .(motif, gene)]),
    by = "motif",
    allow.cartesian = TRUE
)
mta_data[, max_motif_score := max(motif_score), .(motif)]
mta_data[, score := motif_score / max_motif_score]

# subset for peaks and TFs for which we calculated correlation
mta_data <- unique(mta_data[peak %in% pks & gene %in% tfs])
mta_data <- unique(mta_data)

# select highest motif score per peak
mta_dt <- unique(mta_data[, .(peak, gene, motif, score)])
mta_dt <- mta_dt[order(score)][, .SD[1], .(peak, gene, motif)]

# account for missing peaks
mta_miss_pks <- pks[!pks %in% mta_dt$peak]
if (length(mta_miss_pks) > 0) {
    mta_dt <- rbindlist(list(
        mta_dt,
        data.table(
            peak = mta_miss_pks
        )[, score := 0][
            , gene := mta_dt$gene[[1]]][
                , motif :=  mta_dt$motif[[1]]]
    ), use.names = TRUE)
}

# add motif-gene id, in case we need to account for multiple motif-2-gene mapping
mta_dt[, id := paste(gene, motif, sep = "__")]
mta_dt <- unique(mta_dt)
mta_mu <- unique(mta_dt[, .(gene, id)])
ids <- mta_mu$id

# motif scores matrix
mta_dc <- dcast.data.table(mta_dt, peak ~ id, value.var = "score")
mta_mt <- data.matrix(mta_dc[, -1])
rownames(mta_mt) <- mta_dc[[1]]
mta_mt[is.na(mta_mt)] <- 0
saveRDS(mta_mt, file.path(chp_dir, "motif_peak_scores.rds"))

# correlation matrix
stopifnot(all(mta_mu$gene %in% colnames(cor_mt)))
cor_mt <- cor_mt[, mta_mu$gene]
colnames(cor_mt) <- mta_mu$id
saveRDS(cor_mt, file.path(chp_dir, "motif_peak_correlation.rds"))

# calculate in silico ChIP score
max_accessibility_score <- acc_max[pks]
correlation_score <- round(cor_mt[pks, ids], 2)
motif_score <- round(mta_mt[pks, ids], 2)
minmax.normalisation <- function(x) {
    (x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
}
predicted_score <- correlation_score * minmax.normalisation(
    max_accessibility_score * motif_score
)
predicted_score <- round(predicted_score, 2)
saveRDS(predicted_score, file.path(
    chp_dir, "insilico_chip_binding_score_matrix.rds"
))

# table with results
res_dt <- melt.data.table(as.data.table(
    predicted_score, keep.rownames = "peak"
), id.vars = "peak", variable.name = "id", value.name = "in_silico_chip_score")
correlation_score_dt <- melt.data.table(as.data.table(
    correlation_score, keep.rownames = "peak"
), id.vars = "peak", variable.name = "id", value.name = "score")
motif_score_dt <- melt.data.table(as.data.table(
    motif_score, keep.rownames = "peak"
), id.vars = "peak", variable.name = "id", value.name = "score")

stopifnot(all.equal(res_dt$peak, correlation_score_dt$peak))
stopifnot(all.equal(res_dt$id, correlation_score_dt$id))
stopifnot(all.equal(res_dt$peak, motif_score_dt$peak))
stopifnot(all.equal(res_dt$id, motif_score_dt$id))

res_dt[, gene := str_remove(id, "__.+")]
res_dt[, motif := str_remove(id, sprintf("%s__", gene))]
res_dt[, peak_tf_correlation_score := correlation_score_dt$score]
res_dt[, motif_score := motif_score_dt$score]

# add peak coordinates
peak_dt <- fread(file.path(pks_dir, "Peaks_cell_type_mapped.bed"))
setnames(peak_dt, c("seqnames", "start", "end", "peak", "score", "strand"))
peak_dt <- unique(peak_dt[, .(seqnames, start, end, strand, peak)])
res_dt <- merge.data.table(
    res_dt,
    unique(peak_dt[, .(seqnames, start, end, peak)]),
    by = "peak", all.x = TRUE, sort = FALSE
)

# add tf annotation
res_dt <- merge.data.table(
    res_dt, tfan, by = "gene",
    sort = FALSE, all.x = TRUE
)

# save
setcolorder(res_dt, c(
    "seqnames", "start", "end", "peak", 
    "gene", "gene_name", "common_name", "og", "pfam",
    "motif", "in_silico_chip_score", "peak_tf_correlation_score", "motif_score", 
    "id"
))
fwrite(
    res_dt,
    file.path(
        chp_dir, "insilico_chip_binding_score.tsv.gz"
    ),
    sep = "\t"
)
```

Now we will inspect *in silico* ChIP binding scores.

```{r}
res_dt <- fread(file.path(
    chp_dir, "insilico_chip_binding_score.tsv.gz"
))
```

First look at distribution of predicted *in silico* ChIP binding scores.

```{r}
plot_dt <- res_dt[abs(in_silico_chip_score) > 0]
setorder(plot_dt, -in_silico_chip_score)
plot_dt[, gene := factor(gene, levels = unique(plot_dt$gene))]
setorder(plot_dt, gene)

gp_den <- ggplot(plot_dt, aes(in_silico_chip_score)) +
    geom_histogram(bins = 100, color = "white") +
    #scale_y_continuous(trans = "sqrt") +
    scale_x_continuous(limits = c(-1, 1), breaks = seq(-1, 1, 0.5)) +
    theme(panel.grid.major = element_line(colour = "grey", linewidth = 0.2))
ggsave(file.path(
    fig_dir,
    "insilico-chip-binding-score-histogram.pdf"
), gp_den, width = 6, height = 4)


pdf(file.path(
    fig_dir,
    "insilico-chip-binding-score-histogram-tfs.pdf"
), width = 6, height = 5)
for (x in unique(plot_dt$id)) {
    x_dt <- plot_dt[id == x]
    print(ggplot(x_dt, aes(in_silico_chip_score)) +
        geom_histogram(bins = 100, color = "white") +
        #scale_y_continuous(trans = "sqrt") +
        scale_x_continuous(limits = c(-1, 1), breaks = seq(-1, 1, 0.5)) +
        labs(subtitle = sprintf(
            "%s\n%s\n%s", x_dt$gene[1], x_dt$og[1], x_dt$motif[1]
        )) +
        theme(panel.grid.major = element_line(colour = "grey", linewidth = 0.2))
    )
}
dev.off()
```

Next look at number of predicted binding sites as a function of predicted 
*in silico* ChIP score threshold.

```{r}
thrs <- seq(0, 0.5, 0.01)
thr_dt <- rbindlist(lapply(thrs, function(x) {
    res_dt[in_silico_chip_score > x][
        , .(nsites = .N), .(id, gene, motif, og, pfam)][
            , thrs := x][]
}))
thr_dt[, max_thr := max(.SD$thr), id]
plot_dt <- thr_dt[max_thr > 0.35]
gns <- unique(plot_dt$gene)
gen_col <- structure(
    colorRampPalette(RColorBrewer::brewer.pal(11, "Spectral"))(length(gns)),
    names = gns
)
gp_thr <- ggplot(
        plot_dt,
        aes(thrs, nsites, color = gene, group = id)
    ) +
    geom_line() +
    scale_color_manual(values = gen_col) +
    scale_y_continuous(trans = "log10") +
    theme(
      legend.position = "none",
      panel.grid.major = element_line(colour = "grey", linewidth = 0.2)
    ) +
    labs(x = "threshold", y = "number of peaks where TF is bound")
ggsave(file.path(
    fig_dir,
    "insilico-chip-num-binding-sites-vs-threshold.pdf"
), width = 6, height = 8)
```

## ChromVAR

Previously we calculated ChromVAR scores using all motif hits in peaks. Now we 
re-do it using only the subset of hits in peaks with high predicted *in silico* 
ChIP score. 

First we need to select a threshold for the *in silico* ChiP score values, above 
which we will consider the motif to be bound at a given peak.  

Then we calculate deviation scores on pseudobulk level (as in 
https://github.com/rargelaguet/mouse_organogenesis_10x_multiome_publication/)

```{r}
require(chromVAR)
source("scripts/chromvar_utils.R")

# aggregated peak counts
agg_counts <- readRDS(file.path(chp_dir, "peak_accessibility.rds"))
agg_counts <- agg_counts[rowSums(agg_counts) > 0, ]

# matrix of motif hits
predicted_score <- readRDS(file.path(
    chp_dir,
    "insilico_chip_binding_score_matrix.rds"
))

# use peaks present in both matrices
pks <- intersect(rownames(predicted_score), rownames(agg_counts))
predicted_score <- predicted_score[pks, ]
agg_counts <- agg_counts[pks, ]

# where to save in silico ChIP chromVAR matrix
mat_dir <- file.path(
  chp_dir, "ChromVAR"
)
dir.create(mat_dir, showWarnings = FALSE)

# identify background peaks
peak_dt <- fread(file.path(pks_dir, "Peaks_cell_type_mapped.bed"))
setnames(peak_dt, c("seqnames", "start", "end", "peak", "score", "strand"))
peak_dt <- unique(peak_dt[, .(seqnames, start, end, strand, peak)])
pks_dt <- peak_dt[peak %in% rownames(agg_counts)]
pks_gr <- makeGRangesFromDataFrame(pks_dt, keep.extra.columns = TRUE)
seqlengths(pks_gr) <- seqlengths(BSgenome.jaNemVect1.1.DToL.Assembly)[seqnames(BSgenome.jaNemVect1.1.DToL.Assembly) %in% seqnames(pks_gr)]
pks_gr <- trim(pks_gr)
seqs <- getSeq(BSgenome.jaNemVect1.1.DToL.Assembly, pks_gr)
nucfreqs <- letterFrequency(seqs, c("A", "C", "G", "T"))
gc <- structure(
    rowSums(nucfreqs[, 2:3]) / rowSums(nucfreqs),
    names = pks_gr$peak
)
bgpks <- getBackgroundPeaks(
    agg_counts,
    bias = gc[rownames(agg_counts)],
    niterations = 50, w = 0.1, bs = 50
)

# save background peaks
saveRDS(
  bgpks, file.path(
    chp_dir, "Adult_Gastrula_Background_Peaks_SEACell.rds"
  )
)

# different insilico chip thresholds
for (thrs in c(0.1, 0.2, 0.3, 0.4, 0.5)) {
    dir.create(file.path(mat_dir, thrs), showWarnings = FALSE)
    ps <- copy(predicted_score)
    message(sum(ps>thrs), " motif hits above ", thrs)
    ps[ps < thrs] <- 0
    ps[ps >= thrs] <- 1
    ps <- as(ps, "dgCMatrix")
    ps <- ps[match(
        rownames(agg_counts), rownames(ps)
    ), ]
    all.equal(rownames(ps), as.character(rownames(agg_counts)))

    # calculate chromvar deviations
    chromvar_deviations <- .customDeviations(
        countsMatrix = agg_counts,
        annotationsMatrix = ps,
        backgroudPeaks = bgpks,
        expectation = rowSums(agg_counts) / sum(rowSums(agg_counts)),
        prefix = "SEACells",
        out = c("deviations", "z"),
        threads = 1,
        verbose = TRUE
    )
    chromvar_mat <- chromvar_deviations@assays@data$z
    chromvar_mat[is.na(chromvar_mat)] <- 0
    chromvar_mat <- as(chromvar_mat, "dgCMatrix")
    Matrix::writeMM(
        chromvar_mat,
        file.path(mat_dir, thrs, "matrix.mtx")
    )
    writeLines(colnames(chromvar_mat), file.path(mat_dir, thrs, "cells"))
    writeLines(rownames(chromvar_mat), file.path(mat_dir, thrs, "motifs"))
    saveRDS(
        chromvar_mat,
        file.path(mat_dir, thrs, "Matrix-chromVAR-insilicoChIP.rds")
    )
    saveRDS(
        chromvar_deviations,
        file.path(mat_dir, thrs, "chromvar_deviations.rds")
    )

    # add annotations
    chromvar_dt <- melt.data.table(
        as.data.table(as.matrix(chromvar_mat), keep.rownames = "id"),
        id.vars = "id", value.name = "zscore", variable.name = "metacell"
    )
    chromvar_dt[, gene := str_remove(id, "__.+")]
    chromvar_dt[, motif := str_remove(id, sprintf("%s__", gene))]
    chromvar_dt <- merge.data.table(
        chromvar_dt, 
        unique(tfan[, .(gene, gene_name, common_name, og, pfam)])[, .SD[1], gene],
        by = "gene", all.x = TRUE, sort = FALSE
    )
    fwrite(chromvar_dt, file.path(
        mat_dir, thrs,
        "results-chromVAR-insilicoChIP.tsv.gz"
    ))
}
```

Inspect chromVAR scores with different insilico ChIP binding thresholds

```{r}
# insilico chip based chromvar
thrs_list <- c(0.1, 0.2, 0.3, 0.4, 0.5)
chromvar_ls <- sapply(thrs_list, function(thrs) {
    fread(file.path(
        chp_dir, 
        "ChromVAR",
        thrs,
        "results-chromVAR-insilicoChIP.tsv.gz"
    ))
}, simplify = FALSE, USE.NAMES = TRUE)
names(chromvar_ls) <- thrs_list
chromvar_dt <- rbindlist(chromvar_ls, idcol = "insilico_ChIP_threshold")

# motif scores based chromvar
chromvar_orig_dt <- fread(file.path(
    arc_dir, "ChromVAR-PPM-PCC-0.8-IC0.5-5bp",
    "gene-expression-accessibility-archetype-motif-deviation-metacell.tsv.gz"
))
setnames(
  chromvar_orig_dt, 
  c("archetype_name", "motif_deviation"),
  c("motif", "zscore")
)
chromvar_orig_dt[, insilico_ChIP_threshold := 0]

# combine
cols <- intersect(colnames(chromvar_dt), colnames(chromvar_orig_dt))
chromvar_all_dt <- rbindlist(list(
    chromvar_dt[,..cols], chromvar_orig_dt[,..cols]
), use.names = TRUE, fill = TRUE)
```

Plot chromVAR scores on 2D projections.

```{r}
# 2d projection of metacells
sca_umap_dt <- fread(file.path(
    "results", "Clustering", 
    "SEACells_adult_gastrula_UMAP_FC3_gastrula_FC5_adult_qnorm.tsv"
))
setnames(sca_umap_dt, "SEACell", "metacell")

# combine
chromvar_2d_dt <- merge.data.table(
    sca_umap_dt, chromvar_all_dt, by = "metacell",
    all = TRUE, allow.cartesian = TRUE, sort = FALSE
)

# genes
genes <- unique(chromvar_2d_dt$gene)
genes <- gold[gene %in% genes][, setNames(gene, common_name)]

# plot
pdf(
  file.path(fig_dir, "insilico-chip-chromvar-marks-umap.pdf"),
  width = 15, height = 10
)
for (gn in names(genes)) {
    gs <- genes[gn]
    message(sprintf("%s (%s)", gn, gs))
    plot_dt <- chromvar_2d_dt[gene == gs]
    gp_umap <- ggplot(
            plot_dt,
            aes(UMAP1, UMAP2, shape = stage, color = stage, fill = zscore)
        ) +
        geom_point(
            data = plot_dt[stage == "adult"],
            inherit.aes = TRUE,
            alpha = 0.9
        ) +
        geom_point(
            data = plot_dt[stage == "gastrula"], inherit.aes = TRUE
        ) +
        scale_fill_gradientn(
            colours = colorRampPalette(brewer.pal(9, "YlOrRd"))(10)
        ) +
        scale_shape_manual(
            values = c("adult" = 21, "gastrula" = 24)
        ) +
        scale_color_manual(
            values = c("adult" = "#383838", "gastrula" = "#000000")
        ) +
        coord_fixed() +
        facet_wrap("insilico_ChIP_threshold") +
        guides(
            fill = guide_legend(override.aes = list(size = 5, shape = 21)),
            shape = guide_legend(override.aes = list(size = 5))
        ) +
        labs(title = sprintf(
            "%s (%s)",
            gn, plot_dt$gene[1]
        ))
    print(gp_umap)
}
dev.off()

# plot as boxplot
pdf(
    file.path(fig_dir, sprintf(
        "insilico-chip-chromvar-marks-boxplot.pdf", id
    )),
    width = 7, height = 14
)
for (gn in names(genes)) {
    gs <- genes[gn]
    message(sprintf("%s (%s)", gn, gs))
    plot_dt <- chromvar_2d_dt[gene == gs]
    if (any(plot_dt$zscor > 0)) {
      plot_dt[, cell_type := factor(cell_type, levels = cell_types)]
      p_gp <- ggplot(
              plot_dt,
              aes(cell_type, zscore, fill = cell_type)
          ) +
          geom_boxplot(color = "black", outlier.shape = 21) +
          scale_fill_manual(values = ct_cols) +
          scale_y_continuous(
              expand = expand_scale(mult = c(0.05, 0.05), add = c(0, 0))
          ) +
          facet_grid(insilico_ChIP_threshold ~ .) +
          labs(x = "cell type", y = "Z score") +
          theme(
              axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
              legend.position = "none"
          ) +
          labs(title = sprintf(
              "%s (%s)",
              gn, plot_dt$gene[1]
          ))
      print(p_gp)
    }
}
dev.off()
```

Combine chromVAR scores with gene expression

```{r}
# expression data
exp <- "fc"
lvl <- "metacell"
exp_mt <- readRDS(file.path(
    map_dir, lvl, sprintf("gene_expression_%s_%s.rds", lvl, exp)
))
exp_dt <- melt.data.table(
    as.data.table(exp_mt, keep.rownames = "gene"),
    id.vars = "gene", variable.name = lvl, value.name = "expression"
)

# mapping of metacells
map_dt <- rbindlist(sapply(c(
    adult = file.path(
        map_dir, lvl, sprintf("mapping_%s_%s_adult.tsv", lvl, id)
    ),
    gastrula = file.path(
        map_dir, lvl, sprintf("mapping_%s_%s_gastrula.tsv", lvl, id)
    )
), fread, simplify = FALSE, USE.NAMES = TRUE), idcol = "stage")
map_dt[, cell_type := str_replace_all(SEACell_cell_type, "\\.", "_")]
map_dt[cell_type=="neuronal_gastrula", cell_type := "neuronal"]
stopifnot(all(map_dt$cell_type %in% cell_types))
if (lvl == "metacell") {
  map_dt[, SEACell_cell_type := NULL]
  map_dt[, metacell_cell_type := NULL]
  map_dt[, metacell := paste(stage, metacell, sep = "_")]
}
stopifnot(all(map_dt$cell_type %in% cell_types))
stopifnot(all(cell_types %in% map_dt$cell_type))

# combine expression and mapping 
exp_map_dt <- merge.data.table(
    map_dt, exp_dt, by = lvl,
    all.x = TRUE, allow.cartesian = TRUE, sort = FALSE
)
exp_map_dt[, I(lvl) := NULL]
if (lvl == "metacell") {
    setnames(exp_map_dt, "SEACell", "metacell")
}

# combine expression and chromvar data
exp_chromvar_dt <- merge.data.table(
    exp_map_dt, chromvar_all_dt, by = c("gene", lvl),
    all = FALSE, allow.cartesian = TRUE
)

# add gene annotations
exp_chromvar_dt <- merge.data.table(
    exp_chromvar_dt, 
    unique(tfan[, .(gene, gene_name, common_name, og, pfam)])[, .SD[1], gene],
    by = "gene", all.x = TRUE, sort = FALSE
)

# order
cols <- c(
    "stage", "metacell", "cell_type",
    "gene", "gene_name", "common_name", "og", "pfam", "motif", "id",
    "zscore", "expression", "insilico_ChIP_threshold"
)
scols <- cols[cols %in% colnames(exp_chromvar_dt)]
exp_chromvar_dt <- exp_chromvar_dt[, ..scols]

# save
fwrite(
    exp_chromvar_dt,
    file.path(
        chp_dir,
        sprintf("gene_expression_%s_chromVAR.tsv.gz", exp)
    ),
    sep = "\t"
)
```

Plot correlations of chromVAR score and gene expression aggregated per cell type.

```{r}
# correlation data
exp <- "fc"
exp_chromvar_dt <- fread(file.path(
    chp_dir,
    sprintf("gene_expression_%s_chromVAR.tsv.gz", exp)
))
if ("archetype_name" %in% colnames(exp_chromvar_dt)) {
    setnames(exp_chromvar_dt, "archetype_name", "motif")
}
setnames(exp_chromvar_dt, "zscore", "motif_deviation")

# aggregate per cell type
exp_chromvar_dt[, motif_deviation := mean(motif_deviation), .(gene, motif, cell_type, insilico_ChIP_threshold)]
exp_chromvar_dt[, expression := mean(expression), .(gene, motif, cell_type, insilico_ChIP_threshold)]

exp_chromvar_dt <- unique(
  exp_chromvar_dt[, .(
    motif, gene, gene_name, common_name, og, pfam,
    motif_deviation, expression, cell_type, stage, insilico_ChIP_threshold
  )]
)

# save
fwrite(
    exp_chromvar_dt,
    file.path(
        chp_dir,
        sprintf("gene_expression_%s_chromVAR_cell_type_aggregated.tsv.gz", exp)
    ),
    sep = "\t"
)

# for shiny app
saveRDS(
    exp_chromvar_dt[insilico_ChIP_threshold == 0.1],
    file.path(
        chp_dir,
        sprintf("gene_expression_%s_chromVAR_cell_type_aggregated.rds", exp)
    )
)
# genes
genes <- unique(exp_chromvar_dt$gene)
genes <- gold[gene %in% genes][, setNames(gene, common_name)]

# plot
pdf(file.path(
    fig_dir,
    sprintf(
        "insilico-chip-chromvar-expression-%s-marks-scatterplot.pdf",
        exp
    )
), width = 12, height = 9)
for (gn in names(genes)) {
    gs <- genes[gn]
    plot_dt <- exp_chromvar_dt[gene == gs]
  
      gp_cor_chrom <- ggplot(
              plot_dt,
              aes(
                  expression, motif_deviation,
                  label = cell_type, fill = cell_type, color = cell_type,
                  shape = stage, group = 1
              )
          ) +
          geom_point(size = 3) +
          ggrepel::geom_text_repel(size = 3, alpha = 0.6) +
          scale_fill_manual(values = ct_cols) +
          scale_color_manual(
            values = structure(
                colorspace::darken(ct_cols, 0.5),
                names = names(ct_cols)
            )
          ) +
          scale_shape_manual(
              values = c("adult" = 21, "gastrula" = 24)
          ) +
          facet_wrap("insilico_ChIP_threshold", scales = "free") +
          guides(
              fill = guide_legend(override.aes = list(size = 5, shape = 21)),
              shape = guide_legend(override.aes = list(size = 5))
          ) +
          labs(
              x = sprintf("expression %s", exp),
              y = "chromVAR Z score", 
              title = sprintf(
                  "%s (%s)\n%s\n%s",
                  gn, plot_dt$gene[1],
                  plot_dt$og[1],
                  plot_dt$motif[1]
              )
          ) +
          theme(legend.position = "none")
          print(gp_cor_chrom)
}
dev.off()

```

Use chromVAR-expression correlation to select the best in silico ChIP binding threshold

```{r}
# correlation data
exp <- "fc"
exp_chromvar_dt <- fread(file.path(
    chp_dir,
    sprintf("gene_expression_%s_chromVAR.tsv.gz", exp)
))

# correlation
exp_chromvar_dt[, cor := cor(.SD$expression, .SD$zscore), .(
  gene, motif, insilico_ChIP_threshold
)]
exp_chromvar_cor_dt <- unique(
  exp_chromvar_dt[, .(
    gene, motif, id, insilico_ChIP_threshold, cor
  )]
)
exp_chromvar_cor_dt[, insilico_ChIP_threshold := factor(
    insilico_ChIP_threshold,
    levels = sort(unique(exp_chromvar_dt$insilico_ChIP_threshold))
)]


# select best
exp_chromvar_cor_top <- exp_chromvar_cor_dt[
    order(cor, decreasing = TRUE)
][, .SD[1], gene]
exp_chromvar_cor_top[, insilico_ChIP_threshold := factor(
    insilico_ChIP_threshold,
    levels = sort(unique(exp_chromvar_dt$insilico_ChIP_threshold))
)]

# plot
gp_thrs <- ggplot(
        exp_chromvar_cor_dt,
        aes(insilico_ChIP_threshold, cor)
    ) +
    geom_boxplot(outlier.color = NA) +
    ggbeeswarm::geom_beeswarm(alpha = 0.5, size = 0.5) +
    scale_y_continuous(limits = c(NA, 1)) +
    labs(
        subtitle = "All genes\nacross thresholds",
        y = "expression-chromVAR correlation"
    )
gp_thrs_top <- ggplot(
        exp_chromvar_cor_top,
        aes(insilico_ChIP_threshold, cor)
    ) +
    geom_boxplot(outlier.color = NA) +
    ggbeeswarm::geom_beeswarm(alpha = 0.5, size = 0.5) +
    geom_text(
        data = exp_chromvar_cor_top[, .N, insilico_ChIP_threshold],
        aes(
            x = insilico_ChIP_threshold, y = 0.98,
            label = sprintf("n=%s", N)
        )
    ) +
    scale_y_continuous(limits = c(NA, 1)) +
    labs(
        subtitle = "Top correlation per gene\nacross thresholds",
        y = "expression-chromVAR correlation"
    )

# save
ggsave(
    file.path(
    fig_dir,
    sprintf(
        "insilico-chip-chromvar-expression-%s-top-correlations.pdf",
        exp
    )
), gp_thrs + gp_thrs_top, width = 8, height = 5)

```

Aggregate chromVAR scores per cell type for plotting.

```{r}
# combined data
chr_exp_ct <- fread(file.path(
  chp_dir,
  sprintf("gene_expression_%s_chromVAR.tsv.gz", exp)
))
thrs <- 0.1
chr_exp_ct <- chr_exp_ct[insilico_ChIP_threshold == thrs]
setnames(chr_exp_ct, c("motif", "zscore"), c("archetype_name", "motif_deviation"))

# update dataset
fwrite(
    chr_exp_ct,
    file.path(
        chp_dir,
        sprintf("gene_expression_%s_chromVAR.tsv.gz", exp)
    ),
    sep = "\t"
)

# aggregate per cell type
chr_exp_ct <- chr_exp_ct[, .(
  expression = mean(expression),
  motif_deviation = mean(motif_deviation)
), .(gene, gene_name, common_name, pfam, og, archetype_name, cell_type, stage)]

```

Plot per-TF scatterplots of expression vs activity (deviation Z score):

  - all TFs on individual pages

```{r}
# gene motif assignments
arc_id <- "PPM-PCC-0.8-IC0.5-5bp"
assign_dt <- fread(file.path(
  "results", "Motifs", "motif-assignment-selected.tsv.gz"
))

# archetypes pwms
mots_arc_lst <- readRDS(file.path(mta_dir, "motifs.rds"))
names(mots_arc_lst) <- sapply(mots_arc_lst, function(m) m@name)

# loop over TFs-motifs pairs
genes <- unique(chr_exp_ct$gene)
marks <- genes[genes %in% tfan[common_name!=""]$gene]
iters <- c(marks, setdiff(genes, marks))

# where to save the plot
pdf(
  file.path(fig_dir, sprintf("tf-expression-activity-scatter-plots-%s.pdf", arc_id)), 
  height = 10, width = 7
)

for (i in seq_along(iters)) {
  
  # gene annotation
  gn <- iters[i]
  pf <- tfan[gene==gn]$pfam
  og <- tfan[gene==gn]$og
  cn <- tfan[gene==gn]$common_name
  tf <- ifelse(cn!="", sprintf("%s (%s)", gn, cn), gn)
  mt <- unique(assign_dt[gene==gn]$archetype_name)
  
  print(sprintf("%s/%s: %s", i, length(iters), tf))
  
  # motif annotation
  for (mm in mt) {
    mm_dt <- assign_dt[gene==gn & archetype_name==mm]
    tfam <- unique(mm_dt$tf_family)
    afam <- unique(mm_dt$archetype_family)
    tf_dt <- chr_exp_ct[gene==gn & archetype_name==mm]
    tf_dt[, expression := pmin(expression, 8)]
    ttl <-  sprintf(
        "%s\nOG: %s\nPFAM: %s\nmotif: %s\nTF family: %s\narchetype family: %s",
        tf, og, pf, mm, tfam, afam
    )
    
    # motif logo
    mt_gp <- ggseqlogo(mots_arc_lst[[mm]]@motif) +
      theme_void()
    
    # assemble scatter plot
    tf_gp <- ggplot(tf_dt, aes(
            expression, motif_deviation, 
            label = cell_type,
            fill = cell_type, 
            color = cell_type,
            shape = stage
        )
      ) +
      geom_point(size = 4) +
      ggrepel::geom_text_repel(size = 4, alpha = 0.6) +
      scale_fill_manual(values = ct_cols) +
      scale_color_manual(
        values = c(
          structure(
            colorspace::darken(ct_cols, 0.5),
            names = names(ct_cols)
          ),
          structure(
            colorspace::lighten(ct_cols, 0.5),
            names = paste0(names(ct_cols), "_sc")
          )
        )
      ) +
      scale_x_continuous(limits = c(0, NA)) +
      scale_shape_manual(
          values = c("adult" = 21, "gastrula" = 24)
      ) +
      labs(
          x = "TF expression",
          y = "TF activity"
      ) +
      theme(
        # strip.text = element_text(size = 8),
        # axis.text = element_text(size = 8),
        # axis.title = element_text(size = 8),
        # title = element_text(size = 8),
        legend.position = "none"
      )
    
    # patchwork
    patch <- mt_gp + tf_gp + 
      plot_layout(ncol = 1, heights = c(1, 5)) +
      plot_annotation(title = ttl)
    print(patch)    
  }

}
dev.off()

```

  - selected markers on one page (for manuscript figure)

```{r}
# plot markers on one page
fg_vc <- c(
  "Nvec_vc1.1_XM_032363992.2" = "Pou4",
  "Nvec_vc1.1_XM_001631763.3" = "PaxA",
  "Nvec_vc1.1_XM_032378021.2" = "Brachyury",
  "Nvec_vc1.1_XM_001623084.3" = "Six4/5",
  "Nvec_vc1.1_XM_032365096.2" = "Rfx4/6/8",
  "Nvec_vc1.1_XM_032367288.2" = "GATA",
  "Nvec_vc1.1_XM_032377897.2" = "Pea3/Ets",
  "Nvec_vc1.1_XM_032375602.2" = "Insm1"  
)
require(patchwork)

patch_list <- list()

for (gn in names(fg_vc)) {
  
  pf <- tfan[gene==gn]$pfam
  og <- tfan[gene==gn]$og
  cn <- tfan[gene==gn]$common_name
  gs <- str_remove(gn, "Nvec_(vc1.1_)*")
  tf <- ifelse(cn!="", sprintf("%s\n%s", cn, gs), gs)
  
  print(tf)

  tf_dt <-  chr_exp_ct[gene == gn]
  tf_dt[, expression := pmin(expression, 8)]
  mt <- unique(tf_dt$archetype_name)

  # motif annotation
  if (length(mt) != 1) {

    next

  } else {  

    # motif logo
    mt_gp <- ggseqlogo::ggseqlogo(mots_arc_lst[[mt]]@motif) + 
      theme_void() +
      labs(title = tf) +
      theme(plot.title = element_text(size = 6, face = "italic"))

    # assemble scatter plot
    go_gp <- ggplot(tf_dt, aes(
            expression, motif_deviation, 
            label = cell_type,
            fill = cell_type, 
            color = cell_type,
            shape = stage
        )
      ) +
      geom_point(size = 2) +
      ggrepel::geom_text_repel(size = 2, alpha = 0.6) +
      scale_fill_manual(values = ct_cols) +
      scale_color_manual(
        values = c(
          structure(
            colorspace::darken(ct_cols, 0.5),
            names = names(ct_cols)
          ),
          structure(
            colorspace::lighten(ct_cols, 0.5),
            names = paste0(names(ct_cols), "_sc")
          )
        )
      ) +
      scale_x_continuous(limits = c(0, NA)) +
      scale_shape_manual(
          values = c("adult" = 21, "gastrula" = 24)
      ) +
      theme(
        axis.text = element_text(size = 6),
        axis.title = element_blank(),
        legend.position = "none"
      )
    
    # patchwork
    patch <- 
      mt_gp + go_gp + 
      plot_layout(ncol = 1, heights = c(1, 5))
      
    patch_list[[gn]] <- patch

  }

}

# save
pdf(
  file.path(fig_dir, sprintf(
    "tf-expression-activity-scatter-plots-%s-figure.pdf", arc_id
  )), 
  width = 4, height = 5.5
)
wrap_plots(patch_list, axis_titles = "collect") + 
  plot_annotation(title = "TF expression vs activity")
dev.off()
```

  - all marker TFs (for supplementary figure)

```{r}
# plot markers on one page
ma_vc <- structure(tfan[match(marks, gene)]$common_name, names = marks)
ma_vc <- ma_vc[ma_vc != "NR12"]
ma_vc <- ma_vc[ma_vc != "Nem64"]

require(patchwork)

patch_list <- list()

for (gn in names(ma_vc)) {
  
  pf <- tfan[gene==gn]$pfam
  og <- tfan[gene==gn]$og
  cn <- tfan[gene==gn]$common_name
  gs <- str_remove(gn, "Nvec_(vc1.1_)*")
  tf <- ifelse(cn!="", sprintf("%s\n%s", cn, gs), gs)
  
  print(tf)

  tf_dt <-  chr_exp_ct[gene == gn]
  mt <- unique(tf_dt$archetype_name)

  # motif annotation
  if (length(mt) != 1) {

    next

  } else {  

    # motif logo
    mt_gp <- ggseqlogo::ggseqlogo(mots_arc_lst[[mt]]@motif) + 
      theme_void() +
      labs(title = tf) +
      theme(plot.title = element_text(size = 6, face = "italic"))

    # assemble scatter plot
    go_gp <- ggplot(tf_dt, aes(
            expression, motif_deviation, 
            label = cell_type,
            fill = cell_type, 
            color = cell_type,
            shape = stage
        )
      ) +
      geom_point(size = 2) +
      ggrepel::geom_text_repel(size = 2, alpha = 0.6) +
      scale_fill_manual(values = ct_cols) +
      scale_color_manual(
        values = c(
          structure(
            colorspace::darken(ct_cols, 0.5),
            names = names(ct_cols)
          ),
          structure(
            colorspace::lighten(ct_cols, 0.5),
            names = paste0(names(ct_cols), "_sc")
          )
        )
      ) +
      scale_x_continuous(limits = c(0, NA)) +
      scale_shape_manual(
          values = c("adult" = 21, "gastrula" = 24)
      ) +
      theme(
        axis.text = element_text(size = 5),
        axis.title = element_blank(),
        legend.position = "none"
      )
    
    # patchwork
    patch <- 
      mt_gp + go_gp + 
      plot_layout(ncol = 1, heights = c(1, 5))
      
    patch_list[[gn]] <- patch

  }

}

pdf(
  file.path(fig_dir, sprintf(
    "tf-expression-activity-scatter-plots-%s-markers.pdf", arc_id
  )), 
  width = 8.3, height = 11.7
)
wrap_plots(patch_list, axis_titles = "collect") + 
  plot_layout(ncol = 8)
dev.off()
```

Plot dotmap of TF expression vs activity (deviation Z score).

```{r}
# cluster motifs
chr_exp_ct[, cell_type := factor(cell_type, levels = cell_types)]
zscore_dt <- unique(chr_exp_ct[, .(gene, cell_type, motif_deviation)])
zscore_dt <- dcast.data.table(zscore_dt, gene ~ cell_type, value.var = "motif_deviation")
zscore_mt <- as.matrix(zscore_dt[, -1])
rownames(zscore_mt) <- zscore_dt[[1]]
gen_ord <- order(apply(zscore_mt, 1, which.max))
gen_lvl <- rownames(zscore_mt)[gen_ord]
chr_exp_ct[, gene := factor(gene, levels = rev(gen_lvl))]
setorder(chr_exp_ct, gene)

# significant archetypes
zs_thr <- 2
fc_thr <- 1.5
gen_sig <- unique(chr_exp_ct[expression>fc_thr & motif_deviation>zs_thr]$gene)
length(gen_sig)

# non-significant archetypes assigned to marker genes
gen_non_sig <- unique(chr_exp_ct[!gene %in% gen_sig][,.(gene,common_name)])
gen_mks <- unique(chr_exp_ct[common_name != ""]$gene)

# subset data
gen_plt_dt <- chr_exp_ct[gene %in% c(gen_sig, gen_mks)]

# transform data to plot
gen_plt_dt[, expression_scaled := pmin(expression, 8)]
gen_plt_dt[, motif_deviation_scaled := pmax(pmin(motif_deviation, 20), 0)]
gen_plt_dt[, gene_label := ""]
gen_plt_dt[, gene_label := str_remove(gene, "Nvec_(vc1.1_)*")]
gen_plt_dt[common_name != "", gene_label := common_name]
gen_plt_dt[common_name == "" & og != "", gene_label := ifelse(nchar(og)>40, paste0(substr(og, 1, 37), "..."), og)]
gen_plt_dt[gene != "" & common_name == "" & og == "" & pfam != "", gene_label := ifelse(nchar(pfam)>40, paste0(substr(pfam, 1, 37), "..."), pfam)]

# motif enrichment dotmap
gp_dotmap <- ggplot(
  gen_plt_dt, 
  aes(cell_type, gene)
  ) +
  geom_point(
    aes(size = motif_deviation_scaled, color = expression_scaled)
  ) +
  scale_y_discrete(
    breaks = gen_plt_dt$gene,
    labels = gen_plt_dt$gene_label,
    expand = expansion(mult = c(0.005, 0.005))
  ) +
  scale_x_discrete(
    expand = expansion(mult = c(0.02, 0.02))
  ) +
  scale_color_gradientn(
    name = "TF expression\nfold change",
    breaks = c(0, 2, 4, 6, 8),
    colours = c(
      "gray99", "#ffd195", "orange", "orangered2", "#a71414", "#68093d", "#470447"
    )
  ) +
  scale_size_continuous(
    name = "TF motif activity",
    range = c(0, 4)
  ) +
  theme(
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    panel.grid.major = element_blank(),
    axis.title = element_blank(),
    plot.margin = margin(0, 0, 0, 0)
  )


# plot annotation rectangle below the plot
gen_plt_ct <- gen_plt_dt[
  order(gene, -motif_deviation)
][, .SD[1, .(cell_type, common_name, gene_label)], gene]

# genes to highlight
genes_highlight <- unique(
  gen_plt_ct[common_name != "", .(gene, gene_label)]
)[, setNames(gene, gene_label)]

gp_ctbar_v <- ggplot(
        gen_plt_ct,
        aes(gene, fill = cell_type)
    ) +
    geom_bar(position = "stack", width = 1) +
    coord_flip() +
    scale_x_discrete(
      breaks = genes_highlight,
      labels = names(genes_highlight),
      expand = expansion(mult = c(0.005, 0.005))
    ) +
    scale_y_continuous(expand = c(0, 0)) +
    scale_fill_manual(values = ct_cols) +
    theme_void() +
    theme(
        legend.position = "none",
        axis.text.x = element_blank(),
        axis.text.y = element_text(size = 9, vjust = 0.5, hjust = 1),
        plot.margin = unit(c(0, 0, 0, 0), "cm")
    )

gp_ctbar_h <- ggplot(
        gen_plt_dt[, .N, .(cell_type)],
        aes(cell_type, 1, fill = cell_type)
    ) +
    geom_bar(stat = "identity", width = 1) +
    scale_y_continuous(expand = c(0, 0)) +
    scale_fill_manual(values = ct_cols) +
    theme_void() +
    theme(
        legend.position = "none",
        axis.text.x = element_text(size = 8, angle = 90, vjust = 0.5, hjust = 1),
        plot.margin = unit(c(0, 0, 0, 0), "cm")
    )


design <- "ABBBBBBBB
           ABBBBBBBB
           ABBBBBBBB
           ABBBBBBBB
           ABBBBBBBB
           ABBBBBBBB
           ABBBBBBBB
           ABBBBBBBB
           ABBBBBBBB
           #CCCCCCCC"

gen_plt_gp <- gp_ctbar_v + gp_dotmap + gp_ctbar_h +
  plot_layout(design = design, widths = c(1, 10), heights = c(30, 1), guides = "collect")


# save
ggsave(
  file.path(fig_dir, sprintf("motif-activity-gene-expression-FC-%s-zscore-%s.pdf", fc_thr, zs_thr)),
  gen_plt_gp,
  height = 16, width = 8, limitsize = FALSE
)
```
