---
title: "Metacell mapping"
author: "Anamaria Elek"
date: today
format: 
  html:
    code-fold: false
    code-tools: false
    embed-resources: true
    highlight-style: github
    toc: true 
    code-line-numbers: false 
execute:
  eval: false
  message: false
  warning: false
editor: 
  markdown: 
    wrap: 72
---

```{r}
#| label: initialize
#| echo: FALSE
knitr::opts_chunk$set(echo = TRUE, fig.width=7, fig.height=5) 
```

In this notebook, we map scATAC metacells (SEACells) and scRNA metacells.

## Setup

```{r}
#| label: setup
#| warning: FALSE
#| message: FALSE

# load in-house functions
source("metacell_downstream_functions/Downstream_functions.R")
source("metacell_downstream_functions/utils.R")
source("motif-analysis/mta_downstream_functions.R")
source("scripts/scatac_helper_functions.R")

# global settings
options(stringsAsFactors = FALSE)

# load packages
library(data.table)
library(stringr)
library(ggplot2)
library(patchwork)
library(GenomicRanges)
library(ArchR)
library(metacell)
library(ComplexHeatmap)

# set ggplot2 theme
theme_py <- theme_light() + theme(
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  panel.border = element_rect(colour = "black", fill = NA),
  text = element_text(size = 20),
  strip.placement = "outside",
  strip.text = element_text(size = 20, color = "black"),
  strip.background = element_rect(fill = "white")
)
theme_set(theme_py)
blank_theme <- theme_minimal() + theme(
  axis.title.x = element_blank(),
  axis.title.y = element_blank(),
  panel.border = element_blank(),
  panel.grid = element_blank(),
  axis.ticks = element_blank(),
  text = element_text(size = 20)
)
```

Define directories to read the data from and save the results to.

```{r}
#| label: dirs

adult_dir <- "ArchRProj_Nvec_TSS4_frag200"
gastr_dir <- "ArchRProj_Nvec_gastrula"
pks_dir <- "results/Peaks"
res_dir <- "results/Metacells/"
dir.create(res_dir, showWarnings = FALSE)
dir.create(file.path(res_dir, "metacell"), showWarnings = FALSE)
dir.create(file.path(res_dir, "cell_type"), showWarnings = FALSE)
fig_dir <- "plots/Metacells"
dir.create(fig_dir, showWarnings = FALSE)
ann_dir <- "annotation"
```

Load gene annotations.

```{r}
# gene annotation
gnan <- fread(file.path(
  ann_dir, "Nematostella_DToL_FINAL.tsv"
))

# TF annotation
tfan <- fread(file.path(
  ann_dir, "Nematostella_DToL_TFs_FINAL.tsv"
))

# golden markers
gold <- fread(file.path(
  ann_dir, "golden-marks-231124.tsv"
))
```

Project-specific variables:

```{r}
ct_cols <- c(
  "cnidocyte"                  = "#ff42ff",
  "cnidocyte_gastrula"         = "#f7abf7",
  "ecto_pharynx"               = "#5bc0e8",
  "ectoderm"                   = "#51a0be",
  "ecto_aboral"                = "#045170",
  "EMS"                        = "#bdf5bd",
  "EMS_ecto_boundary"          = "#93dbce",
  "gastro_circular_muscle_1"   = "#85c90e",
  "gastro_circular_muscle_2"   = "#73b009",
  "gastro_parietal_muscle"     = "#8ceb10",
  "gastro_IRF1_2"              = "#c1eb05",
  "gastro_somatic_gonad"       = "#bde314",
  "muscle_tentacle_retractor"  = "#ffd700",
  "muscle_mesentery_retractor" = "#f0e229",
  "digestive_filaments_1"      = "#e33d3d",
  "digestive_filaments_2"      = "#d10606",
  "digestive_filaments_3"      = "#ad0303",
  "epidermis_1"                = "#04ccd4",
  "epidermis_2"                = "#16bacc",
  "precursors_PGC"             = "#bebebe",
  "precursors_endoNPC"         = "#8a8686",
  "precursors_NPC"             = "#636363",
  "NPC_1"                      = "#808d91",
  "NPC_2"                      = "#758d92",
  "neuron_GATA_Islet_1"        = "#0c82f7",
  "neuron_GATA_Islet_2"        = "#1175f0",
  "neuron_Pou4_FoxL2_1"        = "#101cde",
  "neuron_Pou4_FoxL2_2"        = "#0b16bf",
  "neuron_Pou4_FoxL2_3"        = "#2e39dd",
  "neuronal"                   = "#063cb9",
  "gland"                      = "#ff6f08",
  "gland_mucin"                = "#ff8f12"
)
cell_types <- names(ct_cols)
adult_cell_types <- c(
  "cnidocyte",
  "gastro_circular_muscle_1", 
  "gastro_circular_muscle_2",
  "gastro_parietal_muscle",
  "gastro_IRF1_2",
  "gastro_somatic_gonad",
  "muscle_mesentery_retractor",
  "muscle_tentacle_retractor",
  "digestive_filaments_1",
  "digestive_filaments_2",
  "digestive_filaments_3",
  "epidermis_1",
  "epidermis_2",
  "precursors_PGC",
  "precursors_endoNPC",
  "precursors_NPC",
  "neuron_GATA_Islet_1",
  "neuron_GATA_Islet_2",
  "neuron_Pou4_FoxL2_1",
  "neuron_Pou4_FoxL2_2",
  "neuron_Pou4_FoxL2_3",
  "gland"
)
gastr_cell_types <- c(setdiff(cell_types, adult_cell_types))
bct_cols <- toupper(c(
  "cnidocyte"                 = "#FF42FF",
  "ecto"                      = "#51a0be",
  "EMS"                       = "#bdf5bd",
  "gastro_circular_muscle"    = "#73b009",
  "gastro_parietal_muscle"    = "#8ceb10",
  "gastro"                    = "#85c90e",  
  "muscle"                    = "#FFD700",
  "digestive_filaments"       = "#e33d3d",
  "precursors"                = "#BEBEBE",
  "NPC"                       = "#808d91",
  "epidermis"                 = "#04ccd4",
  "neuron_GATA_Islet"         = "#1175f0",
  "neuron_Pou4_FoxL2"         = "#101cde",
  "neuronal"                  = "#063cb9",
  "gland"                     = "#ff6f08"
))
bct_maps <- setDT(cbind.data.frame(
  cell_type = cell_types,
  broad_cell_type = str_extract(cell_types, paste(names(bct_cols), collapse = "|"))
))
```

Load accessibility data.

```{r}
# accessibility data
proj_adult <- loadArchRProject(file.path(adult_dir))
proj_gastr <- loadArchRProject(file.path(gastr_dir))

# metadata
meta_all <- fread(file.path(
    "Results", "Clustering",
    "Annotation_Adult_Gastrula_SEACell.tsv"
))

# SEACell aggregated peaks counts
sum_clusters <- readRDS(file.path(
    "Results", "Clustering",
    "Sum_Adult_Gastrula_Peaks_SEACell_qnorm.rds"
))

# Cell type aggregated peaks counts
sum_celltype <- readRDS(file.path(
    "Results", "Clustering",
    "Sum_Adult_Gastrula_Peaks_cell_type_qnorm.rds"
))

# SEACell footprint
fp_clusters <- readRDS(file.path(
    "Results", "Clustering",
    "Footprint_Adult_Gastrula_Peaks_SEACell_qnorm.rds"
))

# Cell type footprint
fp_celltype <- readRDS(file.path(
    "Results", "Clustering",
    "Footprint_Adult_Gastrula_Peaks_cell_type_qnorm.rds"
))

# peak metadata
peak_dt <- fread(file.path(pks_dir, "Peaks_cell_type_mapped.tsv.gz"))
peak_dt[, idx := sprintf("%s:%s-%s", seqnames, start, end)]

```

## Combine adult and gastrula data

Combine gene scores for adult and gastrula on SEACell level.

```{r}
# gene scores aggregated per SEACell
gene_score_adult <- readRDS(file.path(
  adult_dir, "ArchRProj", "GeneScoreMatrix", 
  "Matrix-Gene-Scores-Dist-Var-Coacces-SEACell-FC.rds"
))
gene_score_gastr <- readRDS(file.path(
  gastr_dir, "ArchRProj", "GeneScoreMatrix", 
  "Matrix-Gene-Scores-Dist-Var-Weighted-SEACell-FC.rds"
))
genes <- unique(c(rownames(gene_score_adult), rownames(gene_score_gastr)))
missg_adult <- unique(setdiff(genes, rownames(gene_score_adult)))
if (length(missg_adult) > 0) {
  gene_score_adult <- rbind(
    gene_score_adult, 
    matrix(
      0, 
      nrow = length(missg_adult), 
      ncol = ncol(gene_score_adult), 
      dimnames = list(missg_adult, colnames(gene_score_adult))
    )
  )[genes, ]
}
missg_gastr <- setdiff(genes, rownames(gene_score_gastr))
if (length(missg_gastr) > 0) {
  gene_score_gastr <- rbind(
    gene_score_gastr, 
    matrix(
      0, 
      nrow = length(missg_gastr), 
      ncol = ncol(gene_score_gastr), 
      dimnames = list(missg_gastr, colnames(gene_score_gastr))
    )
  )[genes, ]
}
gene_score_mat <- cbind(gene_score_adult, gene_score_gastr)

# save
dir.create(file.path("Results", "GeneScoreMatrix"), showWarnings = FALSE)
saveRDS(
  gene_score_mat,
  file.path("Results", "GeneScoreMatrix", "Matrix-Gene-Scores-SEACell-FC.rds")
)
```

Combine gene scores for adult and gastrula on cell type level.

```{r}
# gene scores aggregated per cell type
gene_score_adult <- readRDS(file.path(
  adult_dir, "ArchRProj", "GeneScoreMatrix", 
  "Matrix-Gene-Scores-Dist-Var-Coacces-cell-type-FC.rds"
))
gene_score_gastr <- readRDS(file.path(
  gastr_dir, "ArchRProj", "GeneScoreMatrix", 
  "Matrix-Gene-Scores-Dist-Var-Weighted-cell_type-FC.rds"
))
genes <- unique(c(rownames(gene_score_adult), rownames(gene_score_gastr)))
missg_adult <- unique(setdiff(genes, rownames(gene_score_adult)))
if (length(missg_adult) > 0) {
  gene_score_adult <- rbind(
    gene_score_adult, 
    matrix(
      0, 
      nrow = length(missg_adult), 
      ncol = ncol(gene_score_adult), 
      dimnames = list(missg_adult, colnames(gene_score_adult))
    )
  )[genes, ]
}
missg_gastr <- setdiff(genes, rownames(gene_score_gastr))
if (length(missg_gastr) > 0) {
  gene_score_gastr <- rbind(
    gene_score_gastr, 
    matrix(
      0, 
      nrow = length(missg_gastr), 
      ncol = ncol(gene_score_gastr), 
      dimnames = list(missg_gastr, colnames(gene_score_gastr))
    )
  )[genes, ]
}
gene_score_mat <- cbind(gene_score_adult, gene_score_gastr)

rename_dt <- fread("tmp.txt")
new_cols <- rename_dt[match(colnames(gene_score_mat), old), ]$new
all(new_cols %in% cell_types)
all(cell_types %in% new_cols)
colnames(gene_score_mat) <- new_cols
gene_score_mat <- gene_score_mat[, cell_types]

# save
dir.create(file.path("Results", "GeneScoreMatrix"), showWarnings = FALSE)
saveRDS(
  gene_score_mat,
  file.path("Results", "GeneScoreMatrix", "Matrix-Gene-Scores-cell-type-FC.rds")
)
```

Load gene expression data for adult and gastrula.

```{r}
scdb_gastr_dir <- file.path("../..", "scRNAseq_nvec_technau", "scdb")
scdb_init(scdb_gastr_dir, force_reinit = TRUE)
mat_gastr <- scdb_mat("gastrula")
mc_gastr <- scdb_mc("gastrula_K30")
mc_ann_gastr <- fread(file.path(
    scdb_gastr_dir, "annotation.gastrula_K30.tsv"
))

scdb_adult_dir <- file.path("../..", "scRNAseq_nvec_v4", "scdb")
scdb_init(scdb_adult_dir, force_reinit = TRUE)
mat_adult <- scdb_mat("Nvec")
mc_adult <- scdb_mc("Nvec_K30_atlas")
mc_ann_adult <- fread(file.path(
    scdb_adult_dir, "annotation.Nvec_K30_atlas.tsv"
))
```

How many TFs are expressed in gastrula?

```{r}
ct_gastr <- sca_cell_type_fp(mc_ann_gastr, mc_gastr, mat_gastr)
mcfp_gastr_tf <- ct_gastr@mc_fp[tfan[gene %in% rownames(mc_gastr@mc_fp)]$gene,]
dim(mcfp_gastr_tf)

# max gene FC
max_mcfp_gastr_tf <- apply(mcfp_gastr_tf, 1, max)
max_msfp_gastr_cl <- apply(mcfp_gastr_tf, 1, which.max)
max_mcfp_gastr_ct <- colnames(mcfp_gastr_tf)[max_msfp_gastr_cl]
names(max_mcfp_gastr_ct) <- names(max_msfp_gastr_cl)
mcfp_dt <- data.table(
    gene = names(max_mcfp_gastr_tf),
    mcfp = max_mcfp_gastr_tf,
    cell_type = max_mcfp_gastr_ct
)

# rank
# ct_gastr_rank <- apply(ct_gastr@mc_fp, 2, order, decreasing = TRUE)
# rownames(ct_gastr_rank) <- rownames(ct_gastr@mc_fp)
# colnames(ct_gastr_rank) <- colnames(ct_gastr@mc_fp)
rank_gastr_tf <- sapply(mcfp_dt$gene, function(g) {
    # rank = ct_gastr_rank[g, mcfp_dt[gene == g]$cell_type] 
    ranked = sort(ct_gastr@mc_fp[, mcfp_dt[gene == g]$cell_type], decreasing=TRUE)
    which(names(ranked) == g)
})
mcfp_dt[, rank := rank_gastr_tf[gene]]

# gene UMIs in max FC cell type
ct_counts <- sca_mc_gene_counts(ct_gastr, mat_gastr)
max_umi_gastr_tf <- sapply(mcfp_dt$gene, function(g) {
    ct_counts[g, mcfp_dt[gene == g]$cell_type]
})
mcfp_dt[, umi := max_umi_gastr_tf[gene]]

# total gene UIMs
umi_gastr_tf <- mat_gastr@mat[rownames(mcfp_gastr_tf), ]
sum_umi_gastr_tf <- rowSums(umi_gastr_tf)
mcfp_dt[, total_umi := sum_umi_gastr_tf[gene]]

# order
setcolorder(mcfp_dt, c("gene", "cell_type", "rank", "mcfp", "umi", "total_umi"))

chromvar <- readRDS(file.path("results", "insilicoChIP", "ChromVAR", 0.1, "Matrix-chromVAR-insilicoChIP.rds"))
dim(chromvar)
rownames(chromvar) <- str_split(rownames(chromvar), "__", simplify = TRUE)[, 1]

sum(rownames(chromvar) %in% rownames(mcfp_gastr_tf))
max_chromvar <- apply(chromvar, 1, max)
chromvar_dt <- data.table(
    gene = names(max_chromvar),
    max_chromvar = max_chromvar
)

dt <- merge.data.table(mcfp_dt, chromvar_dt, by = "gene", all.x = TRUE)
dt[, .N, is.na(max_chromvar)]
setorder(dt, -max_mcfp)

# add gene annotation
dt <- merge.data.table(dt, tfan, by = "gene")

# save
fwrite(dt, file.path("results", "Metacells", "gastrula_tfs.tsv"), sep = "\t")

# plot
ggplot(dt, aes(rank, umi, color = mcfp)) + 
    geom_point() + 
    scale_y_continuous(trans = "log10") + 
    scale_color_gradientn(
        colours = c("#fff1e0","orange","orangered2","#520c52"),
        limits = c(1, 8),
        oob = scales::squish
    )
ggsave(file.path("plots", "Metacells", "gastrula_tfs.png"), width = 6, height = 6)

name="Lwamide"

for (name in gold$common_name) {
    name <- str_replace_all(name, "/", "_")
    g=gold[common_name==name]$gene
    png(file.path("plots", "Metacells", sprintf("gastrula_tfs_examples_%s.png",name)), width = 8, height = 6, units = "in", res = 300)
    plot(
        ct_gastr_rank[g,cts],
        ct_gastr@mc_fp[g,cts],
        main=sprintf("%s (%s)", g, name),
        xlab="rank",
        ylab="mcfp",
        ylim=c(0, max(ct_gastr@mc_fp[g,cts])+1),
    )
    text(
        ct_gastr_rank[g,cts],
        ct_gastr@mc_fp[g,cts],
        labels = cts,
        srt = 90, adj = c(0.5, 1)
    )
    dev.off()
}
```

Combine expression data for adult and gastrula.

```{r}
# combine
lvl <- "metacell"
exp <- "fc"

if (lvl == "single_cell") {
    exp_adult <- mat_adult@mat[, colnames(mat_adult@mat) %in% names(mc_adult@mc)]
    exp_gastr <- mat_gastr@mat[, colnames(mat_gastr@mat) %in% names(mc_gastr@mc)]
    
    mc_adult_mc <- structure(
        paste0("adult_", mc_adult@mc),
        names = paste0("adult_", names(mc_adult@mc))
    )
    mc_gastr_mc <- structure(
        paste0("gastrula_", mc_gastr@mc),
        names = paste0("gastrula_", names(mc_gastr@mc))
    )
    mc_asign <- c(mc_adult_mc, mc_gastr_mc)
    saveRDS(mc_asign, file.path(
        res_dir, lvl, "metacell_assignment.rds"
    ))

} else if (lvl == "metacell") {

    if (exp == "fc") {
        exp_adult <- mc_adult@mc_fp
        exp_gastr <- mc_gastr@mc_fp
    } else if (exp == "umifrac") {
        umicoun_adult <- sca_mc_gene_counts(mc_adult, mat_adult)
        umifrac_adult <- sca_mc_gene_umifrac(mc_adult, umicoun_adult)
        umicoun_gastr <- sca_mc_gene_counts(mc_gastr, mat_gastr)
        umifrac_gastr <- sca_mc_gene_umifrac(mc_gastr, umicoun_gastr)
        exp_adult <- umifrac_adult
        exp_gastr <- umifrac_gastr
    }
  
  mc_ann <- rbindlist(list(
    mc_ann_adult[, .(metacell, cell_type, color)][, metacell := paste0("adult_", metacell)],
    mc_ann_gastr[, .(metacell, cell_type, color)][, metacell := paste0("gastrula_", metacell)]
  ))
  fwrite(mc_ann, file.path(
    res_dir, lvl, "gene_expression_metacell_annotation.tsv"
  ), sep = "\t")

} else if (lvl == "cell_type") {

    ct_adult <- sca_cell_type_fp(mc_ann_adult, mc_adult, mat_adult)
    ct_gastr <- sca_cell_type_fp(mc_ann_gastr, mc_gastr, mat_gastr)
    if (exp == "fc") {
        exp_gastr <- ct_gastr@mc_fp
        exp_adult <- ct_adult@mc_fp
    } else if (exp == "umifrac") {
        umicoun_adult <- sca_mc_gene_counts(ct_adult, mat_adult)
        umifrac_adult <- sca_mc_gene_umifrac(ct_adult, umicoun_adult)
        umicoun_gastr <- sca_mc_gene_counts(ct_gastr, mat_gastr)
        umifrac_gastr <- sca_mc_gene_umifrac(ct_gastr, umicoun_gastr)
        exp_adult <- umifrac_adult
        exp_gastr <- umifrac_gastr
    }

}

colnames(exp_gastr) <- paste0("gastrula_", colnames(exp_gastr))
colnames(exp_adult) <- paste0("adult_", colnames(exp_adult))

gns <- unique(c(rownames(exp_gastr), rownames(exp_adult)))

miss_gastr_gns <- setdiff(gns, rownames(exp_gastr))
miss_gastr_mat <- matrix(
    0,
    nrow = length(miss_gastr_gns),
    ncol = ncol(exp_gastr),
    dimnames = list(miss_gastr_gns, colnames(exp_gastr))
)
exp_gastr <- do.call(rbind, list(exp_gastr, miss_gastr_mat))

miss_adult_gns <- setdiff(gns, rownames(exp_adult))
miss_adult_mat <- matrix(
    0,
    nrow = length(miss_adult_gns),
    ncol = ncol(exp_adult),
    dimnames = list(miss_adult_gns, colnames(exp_adult))
)
exp_adult <- do.call(rbind, list(exp_adult, miss_adult_mat))
exp_mt <- do.call(cbind, list(exp_gastr[gns, ], exp_adult[gns, ]))

if (lvl == "single_cell" & exp == "fc") {
  
	totu <- colSums(exp_mt)
	exp_mt <- t(t(exp_mt) / totu) * 800
	lus_1 <- log2(1 + 7 * exp_mt)
	exp_mt <- apply(lus_1 - apply(lus_1, 1, median), 2, function(x) pmax(x, 0))

} else if (lvl == "single_cell" & exp == "umifrac") {

    umicoun_adult <- sca_mc_gene_counts(ct_adult, mat_adult)
    umifrac_adult <- sca_mc_gene_umifrac(ct_adult, umicoun_adult)
    umicoun_gastr <- sca_mc_gene_counts(ct_gastr, mat_gastr)
    umifrac_gastr <- sca_mc_gene_umifrac(ct_gastr, umicoun_gastr)
    exp_adult <- umifrac_adult
    exp_gastr <- umifrac_gastr

}

dir.create(file.path(res_dir, lvl), showWarnings = FALSE)
saveRDS(
    exp_mt,
    file.path(
        res_dir, lvl, sprintf("gene_expression_%s_%s.rds", lvl, exp)
    )
)
```

## Mapping scRNA and scATAC meatacells

Mapping top correlated RNA metacell to each ATAC metacell, then mapping every 
other RNA metacell to the best correlated ATAC metacell, above given threshold.

Mapping scRNA and scATAC meatacells for adult

```{r}
# parameters for mapping
lvl <- "metacell"
exp <- "umifrac"
cor_method <- "spearman"

# accessibility data for mapping - adult
if (lvl == "metacell") {
    acc_mt <- as.matrix(adult_gene_access)
    acc_an <- unique(as.data.table(
        proj_adult@cellColData
    )[, .(SEACell, cell_type)])[SEACell %in% colnames(acc_mt)]
} else if (lvl == "cell_type") {
    acc_mt <- as.matrix(adult_gene_access_ct)
    acc_an <- unique(as.data.table(
        proj_adult@cellColData
    )[, .(cell_type)])[cell_type %in% colnames(acc_mt)]
}
acc_an[, cell_type := factor(cell_type, levels = names(ct_cols))]
setorder(acc_an, cell_type)
acc_an[, broad_cell_type := str_extract(cell_type, paste(bc, collapse = "|"))]
acc_an_adult <- copy(acc_an)

# expression data for mapping - adult
if (lvl == "metacell") {
   exp_mt <- as.matrix(mc_adult@mc_fp)
   exp_an <- copy(mc_ann_adult)
} else if (lvl == "cell_type") {
   exp_mt <- as.matrix(ct_adult@mc_fp)
   exp_an <- unique(copy(mc_ann_adult)[, .(cell_type, color)])
}
exp_an[, broad_cell_type := str_extract(cell_type, paste(bc, collapse = "|"))]
exp_an[cell_type %in% c(
    "gastrodermis_muscle_tentacle_bud_stage",
    "gastrodermis_muscle_somatic_gonad",
    "gastrodermis_muscle_X1"
), broad_cell_type := "gastro"]
exp_an[cell_type %in% c(
    "gastrodermis_muscle_parietal_circular_prog"
), broad_cell_type := "muscle"]
if (lvl == "metacell") {
    exp_an[metacell %in% 99:134, broad_cell_type := "neuron_GATA_Islet"]
    exp_an[metacell %in% 135:150, broad_cell_type := "neuron_Pou4_FoxL2"]
} else if (lvl == "cell_type") {
    exp_an[cell_type %in% mc_ann_adult[metacell %in% 99:134]$cell_type,
        broad_cell_type := "neuron_GATA_Islet"]
    exp_an[cell_type %in% mc_ann_adult[metacell %in% 135:150]$cell_type,
        broad_cell_type := "neuron_Pou4_FoxL2"]
}
exp_an_adult <- copy(exp_an)
exp_cols <- mc_ann_adult[, .(color, cell_type)][, setNames(color, cell_type)]

# subset for TFs
subset_tfs <- FALSE
if (subset_tfs) {
    tfs <- tfan[gene %in% rownames(acc_mt) & gene %in% rownames(exp_mt)][[1]]
    message(length(tfs), " TFs") # 665
    acc_mt <- acc_mt[tfs, ]
    exp_mt <- exp_mt[tfs, ]
    var <- "TFs"
} else {
    var <- "genes"
}

# correlation
if (cor_method %in% c("pearson", "spearman")) {
    gns <- intersect(rownames(acc_mt), rownames(exp_mt))

    # inspect genes fc distribution
    plot_fc <- FALSE
    if (plot_fc) {
        top_fc_dt <- data.table(
            gene = gns,
            expression = pmin(apply(exp_mt[gns, ], 1, max), 20),
            accessibility = pmin(apply(acc_mt[gns, ], 1, max), 20)
        )
        top_fc_md <- melt.data.table(
            top_fc_dt, id.vars = "gene"
        )
        gp_top_fc <- ggplot(top_fc_md, aes(value)) +
            geom_histogram(color = "white") +
            scale_x_continuous() +
            labs(x = "max FC per gene") +
            facet_grid(. ~ variable, scales = "free_x")
        ggsave(file.path(
            fig_dir, itr,
            sprintf("%s-expression-accessibility-adult-dist.pdf", lvl)
        ), width = 8, height = 4)
    }

    # threshold for variable genes
    exp_thrs <- 2
    acc_thrs <- 4
    id <- sprintf(
        "%s_exp_FC%s_acc_FC%s_%s",
        var, exp_thrs, acc_thrs, cor_method
    )

    # subset var genes
    gns_var <- gns[
        rowMax(exp_mt[gns, ]) >= exp_thrs |
        rowMax(acc_mt[gns, ]) >= acc_thrs
    ]
    message(length(gns_var), " variable genes")
    cor_mt <- cor(acc_mt[gns_var, ], exp_mt[gns_var, ], method = cor_method)

  
} else if (cor_method %in% c("aucell")) {

    require(AUCell)

    # gene sets - ATAC
    acc_thrs <- 2
    id <- sprintf("%s_acc_FC%s_%s", var, acc_thrs, cor_method)
    require(GSEABase)
    clusters <- colnames(acc_mt)
    gsets <- unlist(lapply(clusters, function(ct) {
        x <- rownames(acc_mt)[acc_mt[, ct] > acc_thrs] 
        message(ct, ": ", length(x), " genes")
        GeneSet(x, setName = ct)
    }))
    names(gsets) <- clusters
    gsetscol <- GeneSetCollection(gsets)

    # rankings
    ranks <- AUCell_buildRankings(exp_mt)
    clust_AUC <- AUCell_calcAUC(gsetscol, ranks)

    # cluster assignment
    clust_assignment <- AUCell_exploreThresholds(
        clust_AUC, plotHist = FALSE, assign = TRUE
    ) 
    pdf(
        file.path(fig_dir, itr, sprintf("AUCell-hist-%s.pdf", id)),
        width = 6, height = 3
    )
    for (geneSetName in rownames(clust_AUC)) {
        print(AUCell_plotHist(clust_AUC[geneSetName, ]))
        abline(v = clust_assignment[[geneSetName]]$aucThr$thresholds[1])
    }
    dev.off()

    # get AUCell matrix
    auc_mat <- getAUC(clust_AUC)
    auc_mat_scale <- t(apply(auc_mat, 1, function(x) x / max(x, na.rm = TRUE)))

    # order
    cor_mt <- as.matrix(auc_mat_scale)
    cor_mt <- cor_mt[order(apply(cor_mt, 1, which.max)), ]
    
    # update annotation 
    acc_an <- acc_an[acc_an[[1]] %in% rownames(cor_mt)]
}

# order
ord_mt <- cor_mt[as.character(acc_an[[1]]), as.character(exp_an[[1]])]

if (lvl == "metacell") {

  # mapping top RNA metacell to each ATAC metacell,
  # then mapping the rest of RNA metacells to top ATAC metacell,
  # if above correlation threshold
  mapped_mcs_1 <- sapply(rownames(ord_mt), function(sc) {
      x <- ord_mt[sc, ]
      ord <- order(x, decreasing = TRUE)
      mcs <- colnames(ord_mt)[ord]
      bc <- acc_an[SEACell == sc]$broad_cell_type
      exp_an[match(mcs, metacell)][broad_cell_type == bc]$metacell[1]
  }, USE.NAMES = TRUE, simplify = TRUE)
  unmapped_mcs <- as.character(setdiff(exp_an$metacell, mapped_mcs_1))
  mapped_mcs_2 <- sapply(unmapped_mcs, function(mc) {
      x <- ord_mt[, mc]
      ord <- order(x, decreasing = TRUE)
      scs <- rownames(ord_mt)[ord]
      bc <- exp_an[metacell == mc]$broad_cell_type
      sc <- acc_an[match(scs, SEACell)][broad_cell_type == bc]$SEACell[1]
      if (x[sc] > quantile(ord_mt, 0.9)) {
          sc
      } else {
          NA
      }
  }, USE.NAMES = TRUE, simplify = TRUE)
  mapped_mcs_2 <- mapped_mcs_2[!is.na(mapped_mcs_2)]
  mapped_mcs <- c(
      mapped_mcs_1,
      structure(names(mapped_mcs_2), names = mapped_mcs_2)
  )

  map_mc <- data.table(
      "SEACell" = names(mapped_mcs),
      "metacell" = as.integer(mapped_mcs)
  )
  map_mc[, SEACell_cell_type := acc_an[
  , setNames(cell_type, SEACell)
  ][SEACell]]
  map_mc[, metacell_cell_type := exp_an[
  , setNames(cell_type, metacell)
  ][metacell]]
  map_mc[, SEACell := factor(SEACell, levels = acc_an$SEACell)]
  setorder(map_mc, "SEACell")

} else if (lvl == "cell_type") {
    
  map_mc <- data.table(
      "SEACell_cell_type" = rownames(ord_mt),
      "metacell_cell_type" = sapply(rownames(ord_mt), function(sc) {
          x <- ord_mt[sc, ]
          ord <- order(x, decreasing = TRUE)
          mcs <- colnames(ord_mt)[ord]
          bc <- acc_an[cell_type == sc]$broad_cell_type
          exp_an[match(mcs, cell_type)][broad_cell_type == bc]$cell_type[1]
      })
  )
}

# save
fwrite(
  map_mc,
  file.path(
    res_dir, lvl, sprintf("mapping_%s_%s_adult.tsv", lvl, id)
  ),
  sep = "\t"
)
```

Plot heatmap.

```{r}
# heatmap
col_ann <- HeatmapAnnotation(
    which = "column",
    "cell_type_RNA" = as.character(
        exp_an[match(colnames(ord_mt), get(lvl))]$cell_type
    ),
    col = list("cell_type_RNA" = exp_cols),
    show_legend = TRUE
)
row_ann <- HeatmapAnnotation(
    "cell_type_ATAC" = as.character(
      map_mc[match(rownames(ord_mt), map_mc[[1]])]$SEACell_cell_type
    ),
    "cell_type_matched" = as.character(
      map_mc[match(rownames(ord_mt), map_mc[[1]])]$metacell_cell_type
    ),
    which = "row",
    col = list("cell_type_ATAC" = ct_cols, "cell_type_matched" = exp_cols),
    show_legend = TRUE
)
hm_cor <- Heatmap(
  pmax(ord_mt, 0), name = sprintf("%s\ncorrelation", cor_method),
  col = colorRampPalette(ArchR::ArchRPalettes$greyMagma)(10),
  bottom_annotation = col_ann, left_annotation = row_ann,
  row_title = sprintf("%s scATAC %ss", nrow(cor_mt), lvl),
  column_title = sprintf("%s RNA %ss", ncol(cor_mt), lvl),
  row_title_side = "left", column_title_side = "bottom",
  row_names_gp = gpar(fontsize = 6),
  column_names_gp = gpar(fontsize = 6),
  show_column_names = FALSE, column_names_side = "bottom",
  show_row_names = FALSE, row_names_side = "left",
  cluster_rows = FALSE, cluster_columns = FALSE,
  show_row_dend = FALSE, show_column_dend = FALSE
)
hm_width <- switch(
    lvl,
    "cell_type" = 16,
    "metacell" = 14
)
hm_height <- switch(
    lvl,
    "cell_type" = 8,
    "metacell" = 18
)
pdf(file.path(
    fig_dir, sprintf("%s-correlation-heatmap-adult-%s.pdf", lvl, id)
), width = hm_width, height = hm_height)
draw(hm_cor)
dev.off()
```

Mapping scRNA and scATAC meatacells for gastrula

```{r}
# broad cell types
bc <- c(
    "cnidocyte",
    "ectoderm_embryonic_oral", "ectoderm_embryonic_aboral",
    "ectoderm", "mesendoderm",
    "NPC", "neuronal", "gland"
)

# accessibility data for mapping - gastrula
if (lvl == "metacell") {
    acc_mt <- as.matrix(gastr_gene_access)
    acc_an <- unique(as.data.table(
        proj_gastr@cellColData
    )[, .(SEACell, cell_type, color)])[SEACell %in% colnames(acc_mt)]
} else if (lvl == "cell_type") {
    acc_mt <- as.matrix(gastr_gene_access_ct)
    acc_an <- unique(as.data.table(
        proj_gastr@cellColData
    )[, .(cell_type, color)])[cell_type %in% colnames(acc_mt)]
}
acc_an[, cell_type := str_replace_all(cell_type, "\\.", "_")]
acc_an[, cell_type := factor(cell_type, levels = names(ct_cols))]
setorder(acc_an, cell_type)
acc_an[, broad_cell_type := str_extract(cell_type, paste(bc, collapse = "|"))]
acc_an_gastrula <- copy(acc_an)

# expression data for mapping - gastrula
if (lvl == "metacell") {
   exp_mt <- as.matrix(mc_gastr@mc_fp)
   exp_an <- copy(mc_ann_gastr)
} else if (lvl == "cell_type") {
   exp_mt <- as.matrix(ct_gastr@mc_fp)
   exp_an <- unique(copy(mc_ann_gastr)[, .(cell_type, color)])
}
exp_an[, broad_cell_type := str_replace_all(cell_type, "\\.", "_")]
exp_an[, broad_cell_type := str_extract(
    broad_cell_type, paste(bc, collapse = "|")
)]
exp_an_gastrula <- copy(exp_an)
exp_cols <- unique(
    mc_ann_gastr[, .(color, cell_type)]
)[, setNames(color, cell_type)]

# subset for TFs
subset_tfs <- FALSE
if (subset_tfs) {
    tfs <- tfan[gene %in% rownames(acc_mt) & gene %in% rownames(exp_mt)][[1]]
    message(length(tfs), " TFs")
    acc_mt <- acc_mt[tfs, ]
    exp_mt <- exp_mt[tfs, ]
    var <- "TFs"
} else {
    var <- "genes"
}

# correlation
cor_method <- "spearman"

if (cor_method %in% c("pearson", "spearman")) {
    gns <- intersect(rownames(acc_mt), rownames(exp_mt))

    # inspect genes fc distribution
    plot_fc <- FALSE
    if (plot_fc) {
        top_fc_dt <- data.table(
            gene = gns,
            expression = pmin(apply(exp_mt[gns, ], 1, max), 20),
            accessibility = pmin(apply(acc_mt[gns, ], 1, max), 20)
        )
        top_fc_md <- melt.data.table(
            top_fc_dt, id.vars = "gene"
        )
        gp_top_fc <- ggplot(top_fc_md, aes(value)) +
            geom_histogram(color = "white") +
            scale_x_continuous() +
            labs(x = "max FC per gene") +
            facet_grid(. ~ variable, scales = "free_x")
        ggsave(file.path(
            fig_dir, itr,
            sprintf("%s-expression-accessibility-gastrula-dist.pdf", lvl)
        ), width = 8, height = 4)
    }
    
    # correlation with globally variable genes
    if (itr %in% c("01", "02", "03")) {

        # quantile of variable genes
        #qtl_thrs <- 0.99
        #exp_thrs <- round(quantile(exp_mt[gns, ], qtl_thrs))
        #acc_thrs <- round(quantile(acc_mt[gns, ], qtl_thrs))
        #id <- sprintf(
        #    "%s_exp_acc_q%s_%s",
        #    var, qtl_thrs, cor_method
        #)

        # threshold for variable genes
        exp_thrs <- 2
        acc_thrs <- 4
        id <- sprintf(
            "%s_exp_FC%s_acc_FC%s_%s",
            var, exp_thrs, acc_thrs, cor_method
        )

        # subset var genes
        gns_var <- gns[
            rowMax(exp_mt[gns, ]) >= exp_thrs |
            rowMax(acc_mt[gns, ]) >= acc_thrs
        ]
        message(length(gns_var), " variable genes")
        cor_mt <- cor(acc_mt[gns_var, ], exp_mt[gns_var, ], method = cor_method)
    
    # correaltion with variable genes per cell type
    } else if (itr %in% c("01.1", "02.1", "03.1")) {
        cor_ls <- lapply(unique(acc_an$broad_cell_type), function(bc) {
            mcs <- exp_an[broad_cell_type == bc]$metacell
            scs <- acc_an[broad_cell_type == bc]$SEACell

            # quantile of variable genes
            qtl_thrs <- 0.99
            exp_thrs <- round(quantile(exp_mt[gns, mcs], qtl_thrs))
            acc_thrs <- round(quantile(acc_mt[gns, scs], qtl_thrs))
            id <- sprintf(
                "%s_exp_acc_q%s_%s",
                var, qtl_thrs, cor_method
            )

            # threshold for variable genes
            #exp_thrs <- 2
            #acc_thrs <- 4
            #id <- sprintf(
            #    "%s_exp_FC%s_acc_FC%s_%s",
            #    var, exp_thrs, acc_thrs, cor_method
            #)

            # subset var genes
            gns_var <- gns[
                rowMax(exp_mt[gns, mcs]) >= exp_thrs |
                rowMax(acc_mt[gns, scs]) >= acc_thrs
            ]
            message(sprintf(
                "%s variable genes for %s with expression > %.2f and accessibility > %.2f",
                length(gns_var), bc, exp_thrs, acc_thrs
            ))
            cor_bc <- cor(
                acc_mt[gns_var, scs],
                exp_mt[gns_var, mcs],
                method = cor_method
            )
            mco <- setdiff(exp_an$metacell, mcs)
            cor_ot <- matrix(
                0, nrow = nrow(cor_bc), ncol = length(mco),
                dimnames = list(rownames(cor_bc), mco)
            )
            cbind(cor_bc, cor_ot)[, as.character(exp_an$metacell)]
        })
        cor_mt <- do.call("rbind", cor_ls)

    }
    
} else if (cor_method %in% c("aucell")) {

    require(AUCell)

    # gene sets - ATAC
    require(GSEABase)
    acc_thrs <- 2
    clusters <- colnames(acc_mt)
    gsets <- unlist(lapply(clusters, function(ct) {
        x <- rownames(acc_mt)[acc_mt[, ct] > acc_thrs] 
        message(ct, ": ", length(x), " genes")
        GeneSet(x, setName = ct)
    }))
    names(gsets) <- clusters
    gsetscol <- GeneSetCollection(gsets)

    # rankings
    ranks <- AUCell_buildRankings(exp_mt)
    clust_AUC <- AUCell_calcAUC(gsetscol, ranks)

    # cluster assignment
    clust_assignment <- AUCell_exploreThresholds(
        clust_AUC, plotHist = FALSE, assign = TRUE
    ) 
    pdf(
        file.path(fig_dir, sprintf("AUCell-hist-%s.pdf", id)),
        width = 6, height = 3
    )
    for (geneSetName in rownames(clust_AUC)) {
        print(AUCell_plotHist(clust_AUC[geneSetName, ]))
        abline(v = clust_assignment[[geneSetName]]$aucThr$thresholds[1])
    }
    dev.off()

    # get AUCell matrix
    auc_mat <- getAUC(clust_AUC)
    auc_mat_scale <- t(apply(auc_mat, 1, function(x) x / max(x, na.rm = TRUE)))

    # order
    cor_mt <- as.matrix(auc_mat_scale)

    # update annotation 
    acc_an <- acc_an[acc_an[[1]] %in% rownames(cor_mt)]

    # id
    id <- sprintf("%s_acc_FC%s_%s", var, acc_thrs, cor_method)
}

# order
rownames(cor_mt) <- str_replace_all(rownames(cor_mt), "\\.", "_")
ord_mt <- cor_mt[as.character(acc_an[[1]]), as.character(exp_an[[1]])]

if (lvl == "metacell") {
    if (itr %in% c("01", "03")) {
    # 1) mapping one RNA metacell to each ATAC metacell
        mapped_mcs <- sapply(rownames(ord_mt), function(sc) {
            x <- ord_mt[sc, ]
            ord <- order(x, decreasing = TRUE)
            mcs <- colnames(ord_mt)[ord]
            bc <- acc_an[SEACell == sc]$broad_cell_type
            exp_an[match(mcs, metacell)][broad_cell_type == bc]$metacell[1]
        })
    } else if (itr %in% c("02", "04")) {
    # 2) mapping multiple RNA metacells to each ATAC metacell
        mapped_mcs <- unlist(lapply(unique(acc_an$broad_cell_type), function(bc) {
            message(bc)
            scs <- acc_an[broad_cell_type == bc]$SEACell
            mcs <- exp_an[broad_cell_type == bc]$metacell
            mt <- ord_mt[scs, mcs]
            unlist(lapply(rownames(mt), function(i) {
                x <- mt[i, ]
                y <- sort(x, decreasing = TRUE)
                mps <- names(y)[y > quantile(mt, 0.8)]
                if (length(mps) == 0) {
                    mps <- colnames(mt)[which.max(x)]
                } else if (length(mps) > 4) {
                    mps <- mps[1:4]
                }
                structure(mps, names = rep(i, length(mps)))
            }))
        }))
    } else if (itr %in% c("03", "03.1")) {
    # 3) mapping top RNA metacell to each ATAC metacell,
    # then mapping the rest of RNA metacells to top ATAC metacell,
    # if above correlation threshold
        mapped_mcs_1 <- sapply(rownames(ord_mt), function(sc) {
            x <- ord_mt[sc, ]
            ord <- order(x, decreasing = TRUE)
            mcs <- colnames(ord_mt)[ord]
            bc <- acc_an[SEACell == sc]$broad_cell_type
            exp_an[match(mcs, metacell)][broad_cell_type == bc]$metacell[1]
        }, USE.NAMES = TRUE, simplify = TRUE)
        unmapped_mcs <- as.character(setdiff(exp_an$metacell, mapped_mcs_1))
        mapped_mcs_2 <- sapply(unmapped_mcs, function(mc) {
            x <- ord_mt[, mc]
            ord <- order(x, decreasing = TRUE)
            scs <- rownames(ord_mt)[ord]
            bc <- exp_an[metacell == mc]$broad_cell_type
            sc <- acc_an[match(scs, SEACell)][broad_cell_type == bc]$SEACell[1]
            if (x[sc] > quantile(ord_mt, 0.9)) {
                sc
            } else {
                NA
            }
        }, USE.NAMES = TRUE, simplify = TRUE)
        mapped_mcs_2 <- mapped_mcs_2[!is.na(mapped_mcs_2)]
        mapped_mcs <- c(
            mapped_mcs_1,
            structure(names(mapped_mcs_2), names = mapped_mcs_2)
        )
    }

    map_mc <- data.table(
        "SEACell" = names(mapped_mcs),
        "metacell" = as.integer(mapped_mcs)
    )
    map_mc[, SEACell_cell_type := acc_an[
    , setNames(cell_type, SEACell)
    ][SEACell]]
    map_mc[, metacell_cell_type := exp_an[
    , setNames(cell_type, metacell)
    ][metacell]]

} else if (lvl == "cell_type") {

    map_mc <- data.table(
        "SEACell_cell_type" = rownames(ord_mt),
        "metacell_cell_type" = sapply(rownames(ord_mt), function(sc) {
            x <- ord_mt[sc, ]
            ord <- order(x, decreasing = TRUE)
            mcs <- colnames(ord_mt)[ord]
            bc <- acc_an[cell_type == sc]$broad_cell_type
            exp_an[match(mcs, cell_type)][broad_cell_type == bc]$cell_type[1]
        })
    )
}

# save
fwrite(
  map_mc,
  file.path(
    res_dir, lvl, itr, sprintf("mapping_%s_%s_gastrula.tsv", lvl, id)
  ),
  sep = "\t"
)
```

Plot heatmap.

```{r}
# heatmap
col_ann <- HeatmapAnnotation(
    which = "column",
    "cell_type_RNA" = as.character(
        exp_an[match(colnames(ord_mt), get(lvl))]$cell_type
    ),
    col = list("cell_type_RNA" = exp_cols),
    show_legend = TRUE
)
row_ann <- HeatmapAnnotation(
    "cell_type_ATAC" = as.character(
      map_mc[match(rownames(ord_mt), map_mc[[1]])]$SEACell_cell_type
    ),
    "cell_type_matched" = as.character(
      map_mc[match(rownames(ord_mt), map_mc[[1]])]$metacell_cell_type
    ),
    which = "row",
    col = list("cell_type_ATAC" = ct_cols, "cell_type_matched" = exp_cols),
    show_legend = TRUE
)
hm_cor <- Heatmap(
  pmax(ord_mt, 0), name = sprintf("%s\ncorrelation", cor_method),
  col = colorRampPalette(ArchR::ArchRPalettes$greyMagma)(10),
  bottom_annotation = col_ann, left_annotation = row_ann,
  row_title = sprintf("%s scATAC %ss", nrow(cor_mt), lvl),
  column_title = sprintf("%s RNA %ss", ncol(cor_mt), lvl),
  row_title_side = "left", column_title_side = "bottom",
  row_names_gp = gpar(fontsize = 6),
  column_names_gp = gpar(fontsize = 6),
  show_column_names = FALSE, column_names_side = "bottom",
  show_row_names = FALSE, row_names_side = "left",
  cluster_rows = FALSE, cluster_columns = FALSE,
  show_row_dend = FALSE, show_column_dend = FALSE
)
hm_width <- switch(
    lvl,
    "cell_type" = 8,
    "metacell" = 12
)
hm_height <- switch(
    lvl,
    "cell_type" = 5,
    "metacell" = 10
)
pdf(file.path(
    fig_dir, itr, sprintf("%s-correlation-heatmap-gastrula-%s.pdf", lvl, id)
), width = hm_width, height = hm_height)
draw(hm_cor)
dev.off()
```

Save full annotations.

```{r}
setnames(acc_an_adult, "cell_type_color", "color")
acc_an <- rbindlist(list(
    adult = acc_an_adult,
    gastrula = acc_an_gastrula
), idcol = "stage")
if ("SEACell" %in% colnames(acc_an))
    setnames(acc_an, c("SEACell"), c("metacell"))
exp_an <- rbindlist(list(
    adult = exp_an_adult,
    gastrula = exp_an_gastrula
), idcol = "stage")
all_an <- rbindlist(list(
    "scATAC" = acc_an,
    "scRNA" = exp_an
), idcol = "assay")
col_ord <- c(
    "metacell", "cell_type", "broad_cell_type", "color", "stage", "assay"
)
setcolorder(
    all_an,
    col_ord[col_ord %in% colnames(all_an)]
)
fwrite(
  all_an,
  file.path(res_dir, lvl, sprintf("annotation_%s.tsv", lvl)),
  sep = "\t"
)
```

ATAC and RNA matrices with mapped metacells.

```{r}
lvl <- "cell_type"
exp <- "umifrac"
id <- "genes_exp_FC2_acc_FC4_spearman"

# mapping of metacells
map_dt <- rbindlist(sapply(c(
    adult = file.path(
        res_dir, lvl, sprintf("mapping_%s_%s_adult.tsv", lvl, id)
    ),
    gastrula = file.path(
        res_dir, lvl, sprintf("mapping_%s_%s_gastrula.tsv", lvl, id)
    )
), fread, simplify = FALSE, USE.NAMES = TRUE), idcol = "stage")
if (lvl == "cell_type") {
    setnames(
        map_dt,
        c("SEACell_cell_type", "metacell_cell_type"),
        c("SEACell", "metacell")
    )
}
map_dt[, SEACell := paste(stage, SEACell, sep = "_")]
map_dt[, metacell := paste(stage, metacell, sep = "_")]

# genes expression matrix with union of genes
exp_mt <- readRDS(file.path(
    res_dir, lvl, sprintf("gene_expression_%s_%s.rds", lvl, exp)
))
stopifnot(all(map_dt$metacell %in% colnames(exp_mt)))
exp_mt <- exp_mt[, map_dt$metacell]
colnames(exp_mt) <- map_dt$SEACell

# peaks accessibility matrix
if (lvl == "metacell") {
    acc_mt <- sum_clusters
    idx_adult <- colnames(acc_mt) %in% proj_adult@cellColData$SEACell
    idx_gastr <- colnames(acc_mt) %in% proj_gastr@cellColData$SEACell
} else if (lvl == "cell_type") {
    acc_mt <- sum_celltype
    idx_adult <- grepl("adult", colnames(acc_mt))
    idx_gastr <- grepl("gastrula", colnames(acc_mt))
    colnames(acc_mt) <- str_remove(colnames(acc_mt), "(adult|gastrula)__")
}
colnames(acc_mt)[idx_adult] <- paste0("adult_", colnames(acc_mt)[idx_adult])
colnames(acc_mt)[idx_gastr] <- paste0("gastrula_", colnames(acc_mt)[idx_gastr])

# normalize accessibility matrix
acc_mt <- sweep(acc_mt, 2, colSums(acc_mt), "/")

# peaks accessibility footprints matrix
if (lvl == "metacell") {
    fpt_mt <- fp_clusters
    idx_adult <- colnames(fpt_mt) %in% proj_adult@cellColData$SEACell
    idx_gastr <- colnames(fpt_mt) %in% proj_gastr@cellColData$SEACell
} else if (lvl == "cell_type") {
    fpt_mt <- fp_celltype
    idx_adult <- grepl("adult", colnames(fpt_mt))
    idx_gastr <- grepl("gastrula", colnames(fpt_mt))
    colnames(fpt_mt) <- str_remove(colnames(fpt_mt), "(adult|gastrula)__")
}
colnames(fpt_mt)[idx_adult] <- paste0("adult_", colnames(fpt_mt)[idx_adult])
colnames(fpt_mt)[idx_gastr] <- paste0("gastrula_", colnames(fpt_mt)[idx_gastr])

# genes score matrix
gsc_mt <- readRDS(
    file.path(
        res_dir, lvl, sprintf("gene_scores_%s_%s.rds", lvl, exp)
    )
)
if (lvl == "cell_type") {
    colnames(gsc_mt) <- str_replace_all(colnames(gsc_mt), "\\.", "_")
}

# matrices with mapped metacells
exp_mt <- exp_mt[, map_dt$SEACell]
acc_mt <- acc_mt[, map_dt$SEACell]
fpt_mt <- fpt_mt[, map_dt$SEACell]
gsc_mt <- gsc_mt[, map_dt$SEACell]

saveRDS(
    exp_mt,
    file.path(
        res_dir, lvl,
        sprintf("gene_expression_%s_%s.rds", exp, id)
    )
)
saveRDS(
    acc_mt,
    file.path(
        res_dir, lvl,
        sprintf("peak_accessibility_%s.rds", id)
    )
)
saveRDS(
    fpt_mt,
    file.path(
        res_dir, lvl,
        sprintf("peak_footprint_%s.rds", id)
    )
)
saveRDS(
    gsc_mt,
    file.path(
        res_dir, lvl,
        sprintf("gene_scores_%s.rds", id)
    )
)
```

```{r}
#| label: rename
#| echo: false
#| include: false


lvl <- "metacell"
exp <- "fc"
id <- "genes_exp_FC2_acc_FC4_spearman"

cell_type_rename <- c(
  "cnidocyte_precursors" = "NPC_2",
  "^muscle_1" = "muscle_tentacle_retractor",
  "^muscle_2" = "muscle_mesentery_retractor",
  "gastro_unknown_1" = "gastro_IRF1_2",
  "gastro_unknown_2" = "gastro_somatic_gonad",
  "gland_mucous" = "gland_mucin",
  "ectoderm_embryonic_oral" = "ecto_pharynx",
  "ectoderm_embryonic$" = "ectoderm",
  "ectoderm_embryonic_aboral" = "ecto_aboral",
  "mesendoderm_embryonic" = "EMS",
  "mesendoderm_ectoderm" = "EMS_ecto_boundary",
  "mesendoderm_oral" = "EMS_ecto_boundary",
  "neuron_GATA_Islet_3" = "neuron_Pou4_FoxL2_3",
  "^NPC$" = "NPC_1",
  "precursors_1" = "precursors_PGC",
  "precursors_2" = "precursors_endoNPC",
  "precursors_3" = "precursors_NPC",
  "^neuronal$" = "neuronal_gastrula"
)


# # # gene expression # # #
fn <- file.path(res_dir, lvl, sprintf("gene_expression_%s_%s.rds", exp, id))
exp_mt <- readRDS(fn)

dt=data.table(old=colnames(exp_mt), new=str_remove(colnames(exp_mt),"(adult|gastrula)_"))
fwrite(dt,"tmp.txt",sep="\t")

rename_dt <- fread("tmp.txt")
new_cols <- rename_dt[match(colnames(exp_mt), old), ]$new
all(new_cols %in% cell_types)
all(cell_types %in% new_cols)
colnames(exp_mt) <- new_cols
exp_mt <- exp_mt[, cell_types]

saveRDS(exp_mt, fn)

# # # peak accessibility # # #
fn <- file.path(res_dir, lvl, sprintf("peak_accessibility_%s.rds", id))
acc_mt <- readRDS(fn)

dt=data.table(old=colnames(acc_mt), new=str_remove(colnames(acc_mt),"(adult|gastrula)_"))
fwrite(dt,"tmp.txt",sep="\t")

rename_dt <- fread("tmp.txt")
rename_dt[, new := str_replace_all(new, cell_type_rename)]
new_cols <- rename_dt[match(colnames(acc_mt), old), ]$new
all(new_cols %in% cell_types)
all(cell_types %in% new_cols)
colnames(acc_mt) <- new_cols
acc_mt <- acc_mt[, cell_types]

saveRDS(acc_mt, fn)

# # # peak footprints # # #
fn <- file.path(res_dir, lvl, sprintf("peak_footprint_%s.rds", id))
fpt_mt <- readRDS(fn)

dt=data.table(old=colnames(fpt_mt), new=str_remove(colnames(fpt_mt),"(adult|gastrula)_"))
fwrite(dt,"tmp.txt",sep="\t")

rename_dt <- fread("tmp.txt")
rename_dt[, new := str_replace_all(new, cell_type_rename)]
new_cols <- rename_dt[match(colnames(fpt_mt), old), ]$new
all(new_cols %in% cell_types)
all(cell_types %in% new_cols)
colnames(fpt_mt) <- new_cols
fpt_mt <- fpt_mt[, cell_types]

saveRDS(fpt_mt, fn)

# # # gene scores # # #
fn <- file.path(res_dir, lvl,sprintf("gene_scores_%s.rds", id))
gsc_mt <- readRDS(fn)

dt=data.table(old=colnames(gsc_mt), new=str_remove(colnames(gsc_mt),"(adult|gastrula)_"))
fwrite(dt,"tmp.txt",sep="\t")

rename_dt <- fread("tmp.txt")
rename_dt[, new := str_replace_all(new, cell_type_rename)]
new_cols <- rename_dt[match(colnames(gsc_mt), old), ]$new
all(new_cols %in% cell_types)
all(cell_types %in% new_cols)
colnames(gsc_mt) <- new_cols
gsc_mt <- gsc_mt[, cell_types]
saveRDS(gsc_mt, fn)


# # # mapping annotation # # #
id <- "genes_exp_FC2_acc_FC4_spearman"
adult = file.path(
    res_dir, lvl, sprintf("mapping_%s_%s_adult.tsv", lvl, id)
)
dt <- fread(adult)
dt[, SEACell_cell_type := str_replace_all(SEACell_cell_type, cell_type_rename)]
stopifnot(
  all(dt[,.N,SEACell_cell_type]$SEAcell_cell_type %in% adult_cell_types)
)
stopifnot(
  adult_cell_types %in% dt[,.N,SEACell_cell_type]$SEACell_cell_type
)
fwrite(dt, adult, sep="\t")

gastrula = file.path(
    res_dir, lvl, sprintf("mapping_%s_%s_gastrula.tsv", lvl, id)
)
dt <- fread(gastrula)
dt[, SEACell_cell_type := str_replace_all(SEACell_cell_type, cell_type_rename)]
dt[SEACell_cell_type == "cnidocyte", SEACell_cell_type := "cnidocyte_gastrula"]
stopifnot(
  all(dt[,.N,SEACell_cell_type]$SEAcell_cell_type %in% gastr_cell_types)
)
stopifnot(
  gastr_cell_types %in% dt[,.N,SEACell_cell_type]$SEACell_cell_type
)
fwrite(dt, gastrula, sep="\t")

```

## Session info

```{r}
#| label: session
sessionInfo()
```

